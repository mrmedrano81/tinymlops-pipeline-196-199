
KWS_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005388  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bc64  08005558  08005558  00015558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080111bc  080111bc  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  080111bc  080111bc  000211bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080111c4  080111c4  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080111c4  080111c4  000211c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080111c8  080111c8  000211c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080111cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000007c  08011248  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08011248  000301f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049e99  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e8  00000000  00000000  00079f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0007d130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0007dc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d5d9  00000000  00000000  0007e610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6fb  00000000  00000000  000abbe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016fb21  00000000  00000000  000bb2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0022ae05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003658  00000000  00000000  0022ae58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005540 	.word	0x08005540

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08005540 	.word	0x08005540

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_d2f>:
 80002b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80002b4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80002b8:	bf24      	itt	cs
 80002ba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80002be:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80002c2:	d90d      	bls.n	80002e0 <__aeabi_d2f+0x30>
 80002c4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80002c8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80002cc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80002d0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80002d4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80002d8:	bf08      	it	eq
 80002da:	f020 0001 	biceq.w	r0, r0, #1
 80002de:	4770      	bx	lr
 80002e0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80002e4:	d121      	bne.n	800032a <__aeabi_d2f+0x7a>
 80002e6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80002ea:	bfbc      	itt	lt
 80002ec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80002f0:	4770      	bxlt	lr
 80002f2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80002fa:	f1c2 0218 	rsb	r2, r2, #24
 80002fe:	f1c2 0c20 	rsb	ip, r2, #32
 8000302:	fa10 f30c 	lsls.w	r3, r0, ip
 8000306:	fa20 f002 	lsr.w	r0, r0, r2
 800030a:	bf18      	it	ne
 800030c:	f040 0001 	orrne.w	r0, r0, #1
 8000310:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000314:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000318:	fa03 fc0c 	lsl.w	ip, r3, ip
 800031c:	ea40 000c 	orr.w	r0, r0, ip
 8000320:	fa23 f302 	lsr.w	r3, r3, r2
 8000324:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000328:	e7cc      	b.n	80002c4 <__aeabi_d2f+0x14>
 800032a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800032e:	d107      	bne.n	8000340 <__aeabi_d2f+0x90>
 8000330:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000334:	bf1e      	ittt	ne
 8000336:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800033a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800033e:	4770      	bxne	lr
 8000340:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000344:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000348:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b974 	b.w	8000650 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468e      	mov	lr, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	d14d      	bne.n	800042a <__udivmoddi4+0xaa>
 800038e:	428a      	cmp	r2, r1
 8000390:	4694      	mov	ip, r2
 8000392:	d969      	bls.n	8000468 <__udivmoddi4+0xe8>
 8000394:	fab2 f282 	clz	r2, r2
 8000398:	b152      	cbz	r2, 80003b0 <__udivmoddi4+0x30>
 800039a:	fa01 f302 	lsl.w	r3, r1, r2
 800039e:	f1c2 0120 	rsb	r1, r2, #32
 80003a2:	fa20 f101 	lsr.w	r1, r0, r1
 80003a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003aa:	ea41 0e03 	orr.w	lr, r1, r3
 80003ae:	4094      	lsls	r4, r2
 80003b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003b4:	0c21      	lsrs	r1, r4, #16
 80003b6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ba:	fa1f f78c 	uxth.w	r7, ip
 80003be:	fb08 e316 	mls	r3, r8, r6, lr
 80003c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003c6:	fb06 f107 	mul.w	r1, r6, r7
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003d6:	f080 811f 	bcs.w	8000618 <__udivmoddi4+0x298>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 811c 	bls.w	8000618 <__udivmoddi4+0x298>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f4:	fb00 f707 	mul.w	r7, r0, r7
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x92>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	f080 810a 	bcs.w	800061c <__udivmoddi4+0x29c>
 8000408:	42a7      	cmp	r7, r4
 800040a:	f240 8107 	bls.w	800061c <__udivmoddi4+0x29c>
 800040e:	4464      	add	r4, ip
 8000410:	3802      	subs	r0, #2
 8000412:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000416:	1be4      	subs	r4, r4, r7
 8000418:	2600      	movs	r6, #0
 800041a:	b11d      	cbz	r5, 8000424 <__udivmoddi4+0xa4>
 800041c:	40d4      	lsrs	r4, r2
 800041e:	2300      	movs	r3, #0
 8000420:	e9c5 4300 	strd	r4, r3, [r5]
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0xc2>
 800042e:	2d00      	cmp	r5, #0
 8000430:	f000 80ef 	beq.w	8000612 <__udivmoddi4+0x292>
 8000434:	2600      	movs	r6, #0
 8000436:	e9c5 0100 	strd	r0, r1, [r5]
 800043a:	4630      	mov	r0, r6
 800043c:	4631      	mov	r1, r6
 800043e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000442:	fab3 f683 	clz	r6, r3
 8000446:	2e00      	cmp	r6, #0
 8000448:	d14a      	bne.n	80004e0 <__udivmoddi4+0x160>
 800044a:	428b      	cmp	r3, r1
 800044c:	d302      	bcc.n	8000454 <__udivmoddi4+0xd4>
 800044e:	4282      	cmp	r2, r0
 8000450:	f200 80f9 	bhi.w	8000646 <__udivmoddi4+0x2c6>
 8000454:	1a84      	subs	r4, r0, r2
 8000456:	eb61 0303 	sbc.w	r3, r1, r3
 800045a:	2001      	movs	r0, #1
 800045c:	469e      	mov	lr, r3
 800045e:	2d00      	cmp	r5, #0
 8000460:	d0e0      	beq.n	8000424 <__udivmoddi4+0xa4>
 8000462:	e9c5 4e00 	strd	r4, lr, [r5]
 8000466:	e7dd      	b.n	8000424 <__udivmoddi4+0xa4>
 8000468:	b902      	cbnz	r2, 800046c <__udivmoddi4+0xec>
 800046a:	deff      	udf	#255	; 0xff
 800046c:	fab2 f282 	clz	r2, r2
 8000470:	2a00      	cmp	r2, #0
 8000472:	f040 8092 	bne.w	800059a <__udivmoddi4+0x21a>
 8000476:	eba1 010c 	sub.w	r1, r1, ip
 800047a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047e:	fa1f fe8c 	uxth.w	lr, ip
 8000482:	2601      	movs	r6, #1
 8000484:	0c20      	lsrs	r0, r4, #16
 8000486:	fbb1 f3f7 	udiv	r3, r1, r7
 800048a:	fb07 1113 	mls	r1, r7, r3, r1
 800048e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000492:	fb0e f003 	mul.w	r0, lr, r3
 8000496:	4288      	cmp	r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x12c>
 800049a:	eb1c 0101 	adds.w	r1, ip, r1
 800049e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x12a>
 80004a4:	4288      	cmp	r0, r1
 80004a6:	f200 80cb 	bhi.w	8000640 <__udivmoddi4+0x2c0>
 80004aa:	4643      	mov	r3, r8
 80004ac:	1a09      	subs	r1, r1, r0
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b4:	fb07 1110 	mls	r1, r7, r0, r1
 80004b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004bc:	fb0e fe00 	mul.w	lr, lr, r0
 80004c0:	45a6      	cmp	lr, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x156>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004cc:	d202      	bcs.n	80004d4 <__udivmoddi4+0x154>
 80004ce:	45a6      	cmp	lr, r4
 80004d0:	f200 80bb 	bhi.w	800064a <__udivmoddi4+0x2ca>
 80004d4:	4608      	mov	r0, r1
 80004d6:	eba4 040e 	sub.w	r4, r4, lr
 80004da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x9a>
 80004e0:	f1c6 0720 	rsb	r7, r6, #32
 80004e4:	40b3      	lsls	r3, r6
 80004e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ee:	fa20 f407 	lsr.w	r4, r0, r7
 80004f2:	fa01 f306 	lsl.w	r3, r1, r6
 80004f6:	431c      	orrs	r4, r3
 80004f8:	40f9      	lsrs	r1, r7
 80004fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000502:	fbb1 f8f9 	udiv	r8, r1, r9
 8000506:	0c20      	lsrs	r0, r4, #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fb09 1118 	mls	r1, r9, r8, r1
 8000510:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000514:	fb08 f00e 	mul.w	r0, r8, lr
 8000518:	4288      	cmp	r0, r1
 800051a:	fa02 f206 	lsl.w	r2, r2, r6
 800051e:	d90b      	bls.n	8000538 <__udivmoddi4+0x1b8>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000528:	f080 8088 	bcs.w	800063c <__udivmoddi4+0x2bc>
 800052c:	4288      	cmp	r0, r1
 800052e:	f240 8085 	bls.w	800063c <__udivmoddi4+0x2bc>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	1a09      	subs	r1, r1, r0
 800053a:	b2a4      	uxth	r4, r4
 800053c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000540:	fb09 1110 	mls	r1, r9, r0, r1
 8000544:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000548:	fb00 fe0e 	mul.w	lr, r0, lr
 800054c:	458e      	cmp	lr, r1
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x1e2>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000558:	d26c      	bcs.n	8000634 <__udivmoddi4+0x2b4>
 800055a:	458e      	cmp	lr, r1
 800055c:	d96a      	bls.n	8000634 <__udivmoddi4+0x2b4>
 800055e:	3802      	subs	r0, #2
 8000560:	4461      	add	r1, ip
 8000562:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000566:	fba0 9402 	umull	r9, r4, r0, r2
 800056a:	eba1 010e 	sub.w	r1, r1, lr
 800056e:	42a1      	cmp	r1, r4
 8000570:	46c8      	mov	r8, r9
 8000572:	46a6      	mov	lr, r4
 8000574:	d356      	bcc.n	8000624 <__udivmoddi4+0x2a4>
 8000576:	d053      	beq.n	8000620 <__udivmoddi4+0x2a0>
 8000578:	b15d      	cbz	r5, 8000592 <__udivmoddi4+0x212>
 800057a:	ebb3 0208 	subs.w	r2, r3, r8
 800057e:	eb61 010e 	sbc.w	r1, r1, lr
 8000582:	fa01 f707 	lsl.w	r7, r1, r7
 8000586:	fa22 f306 	lsr.w	r3, r2, r6
 800058a:	40f1      	lsrs	r1, r6
 800058c:	431f      	orrs	r7, r3
 800058e:	e9c5 7100 	strd	r7, r1, [r5]
 8000592:	2600      	movs	r6, #0
 8000594:	4631      	mov	r1, r6
 8000596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	40d8      	lsrs	r0, r3
 80005a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005a4:	fa21 f303 	lsr.w	r3, r1, r3
 80005a8:	4091      	lsls	r1, r2
 80005aa:	4301      	orrs	r1, r0
 80005ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b0:	fa1f fe8c 	uxth.w	lr, ip
 80005b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005b8:	fb07 3610 	mls	r6, r7, r0, r3
 80005bc:	0c0b      	lsrs	r3, r1, #16
 80005be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005c2:	fb00 f60e 	mul.w	r6, r0, lr
 80005c6:	429e      	cmp	r6, r3
 80005c8:	fa04 f402 	lsl.w	r4, r4, r2
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x260>
 80005ce:	eb1c 0303 	adds.w	r3, ip, r3
 80005d2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005d6:	d22f      	bcs.n	8000638 <__udivmoddi4+0x2b8>
 80005d8:	429e      	cmp	r6, r3
 80005da:	d92d      	bls.n	8000638 <__udivmoddi4+0x2b8>
 80005dc:	3802      	subs	r0, #2
 80005de:	4463      	add	r3, ip
 80005e0:	1b9b      	subs	r3, r3, r6
 80005e2:	b289      	uxth	r1, r1
 80005e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005e8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f0:	fb06 f30e 	mul.w	r3, r6, lr
 80005f4:	428b      	cmp	r3, r1
 80005f6:	d908      	bls.n	800060a <__udivmoddi4+0x28a>
 80005f8:	eb1c 0101 	adds.w	r1, ip, r1
 80005fc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000600:	d216      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 8000602:	428b      	cmp	r3, r1
 8000604:	d914      	bls.n	8000630 <__udivmoddi4+0x2b0>
 8000606:	3e02      	subs	r6, #2
 8000608:	4461      	add	r1, ip
 800060a:	1ac9      	subs	r1, r1, r3
 800060c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000610:	e738      	b.n	8000484 <__udivmoddi4+0x104>
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e705      	b.n	8000424 <__udivmoddi4+0xa4>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e3      	b.n	80003e4 <__udivmoddi4+0x64>
 800061c:	4618      	mov	r0, r3
 800061e:	e6f8      	b.n	8000412 <__udivmoddi4+0x92>
 8000620:	454b      	cmp	r3, r9
 8000622:	d2a9      	bcs.n	8000578 <__udivmoddi4+0x1f8>
 8000624:	ebb9 0802 	subs.w	r8, r9, r2
 8000628:	eb64 0e0c 	sbc.w	lr, r4, ip
 800062c:	3801      	subs	r0, #1
 800062e:	e7a3      	b.n	8000578 <__udivmoddi4+0x1f8>
 8000630:	4646      	mov	r6, r8
 8000632:	e7ea      	b.n	800060a <__udivmoddi4+0x28a>
 8000634:	4620      	mov	r0, r4
 8000636:	e794      	b.n	8000562 <__udivmoddi4+0x1e2>
 8000638:	4640      	mov	r0, r8
 800063a:	e7d1      	b.n	80005e0 <__udivmoddi4+0x260>
 800063c:	46d0      	mov	r8, sl
 800063e:	e77b      	b.n	8000538 <__udivmoddi4+0x1b8>
 8000640:	3b02      	subs	r3, #2
 8000642:	4461      	add	r1, ip
 8000644:	e732      	b.n	80004ac <__udivmoddi4+0x12c>
 8000646:	4630      	mov	r0, r6
 8000648:	e709      	b.n	800045e <__udivmoddi4+0xde>
 800064a:	4464      	add	r4, ip
 800064c:	3802      	subs	r0, #2
 800064e:	e742      	b.n	80004d6 <__udivmoddi4+0x156>

08000650 <__aeabi_idiv0>:
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop

08000654 <__io_putchar>:
extern UART_HandleTypeDef DebugUartHandler; // Defined in main.cpp


/* Function Definitions -----------------------------------------------------*/
int __io_putchar(int ch)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&DebugUartHandler, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800065c:	1d39      	adds	r1, r7, #4
 800065e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000662:	2201      	movs	r2, #1
 8000664:	4803      	ldr	r0, [pc, #12]	; (8000674 <__io_putchar+0x20>)
 8000666:	f002 fe57 	bl	8003318 <HAL_UART_Transmit>
    return ch;
 800066a:	687b      	ldr	r3, [r7, #4]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000c4 	.word	0x200000c4

08000678 <DebugLog>:


// Used by TFLite error_reporter
void DebugLog(const char *s)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	fprintf(stderr, "%s", s);
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <DebugLog+0x20>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	4619      	mov	r1, r3
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f003 fef9 	bl	8004480 <fputs>
	// NOTE: fprintf uses _write(), which is defined in syscall.c
	//       _write() uses __io_putchar(), which is a weak function
	//       and needs to be implemented by user.
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000014 	.word	0x20000014

0800069c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006a0:	f3bf 8f4f 	dsb	sy
}
 80006a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a6:	f3bf 8f6f 	isb	sy
}
 80006aa:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <SCB_EnableICache+0x48>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006b4:	f3bf 8f4f 	dsb	sy
}
 80006b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006ba:	f3bf 8f6f 	isb	sy
}
 80006be:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <SCB_EnableICache+0x48>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <SCB_EnableICache+0x48>)
 80006c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006cc:	f3bf 8f4f 	dsb	sy
}
 80006d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d2:	f3bf 8f6f 	isb	sy
}
 80006d6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SCB_EnableDCache+0x9c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006f6:	f3bf 8f4f 	dsb	sy
}
 80006fa:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006fc:	4b21      	ldr	r3, [pc, #132]	; (8000784 <SCB_EnableDCache+0x9c>)
 80006fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000702:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	0b5b      	lsrs	r3, r3, #13
 8000708:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800070c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	08db      	lsrs	r3, r3, #3
 8000712:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000716:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	015a      	lsls	r2, r3, #5
 800071c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000720:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000726:	4917      	ldr	r1, [pc, #92]	; (8000784 <SCB_EnableDCache+0x9c>)
 8000728:	4313      	orrs	r3, r2
 800072a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	2b00      	cmp	r3, #0
 8000736:	bf14      	ite	ne
 8000738:	2301      	movne	r3, #1
 800073a:	2300      	moveq	r3, #0
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d000      	beq.n	8000744 <SCB_EnableDCache+0x5c>
      do {
 8000742:	e7e9      	b.n	8000718 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	1e5a      	subs	r2, r3, #1
 8000748:	60fa      	str	r2, [r7, #12]
 800074a:	2b00      	cmp	r3, #0
 800074c:	bf14      	ite	ne
 800074e:	2301      	movne	r3, #1
 8000750:	2300      	moveq	r3, #0
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d000      	beq.n	800075a <SCB_EnableDCache+0x72>
    do {
 8000758:	e7d9      	b.n	800070e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800075a:	f3bf 8f4f 	dsb	sy
}
 800075e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <SCB_EnableDCache+0x9c>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <SCB_EnableDCache+0x9c>)
 8000766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800076a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800076c:	f3bf 8f4f 	dsb	sy
}
 8000770:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000772:	f3bf 8f6f 	isb	sy
}
 8000776:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	080110b0 	.word	0x080110b0

080007a8 <_ZN6tflite13ErrorReporterD0Ev>:
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ffe9 	bl	8000788 <_ZN6tflite13ErrorReporterD1Ev>
 80007b6:	2104      	movs	r1, #4
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f003 fd91 	bl	80042e0 <_ZdlPvj>
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <_ZN11flatbuffers11EndianCheckEv>:
  Offset(uoffset_t _o) : o(_o) {}
  Offset<void> Union() const { return Offset<void>(o); }
  bool IsNull() const { return !o; }
};

inline void EndianCheck() {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
  int endiantest = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	607b      	str	r3, [r7, #4]
  // If this fails, see FLATBUFFERS_LITTLEENDIAN above.
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d005      	beq.n	80007e6 <_ZN11flatbuffers11EndianCheckEv+0x1e>
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <_ZN11flatbuffers11EndianCheckEv+0x28>)
 80007dc:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 80007de:	2149      	movs	r1, #73	; 0x49
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 80007e2:	f003 fdab 	bl	800433c <__assert_func>
                     FLATBUFFERS_LITTLEENDIAN);
  (void)endiantest;
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	08005558 	.word	0x08005558
 80007f4:	0800559c 	.word	0x0800559c
 80007f8:	080055bc 	.word	0x080055bc

080007fc <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 8000804:	687c      	ldr	r4, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fe5e 	bl	80014ca <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 800080e:	4603      	mov	r3, r0
 8000810:	425b      	negs	r3, r3
 8000812:	4423      	add	r3, r4
  }
 8000814:	4618      	mov	r0, r3
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bd90      	pop	{r4, r7, pc}

0800081c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff ffe7 	bl	80007fc <_ZNK11flatbuffers5Table9GetVTableEv>
 800082e:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	f000 fe2e 	bl	8001492 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8000836:	4603      	mov	r3, r0
 8000838:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800083a:	887a      	ldrh	r2, [r7, #2]
 800083c:	897b      	ldrh	r3, [r7, #10]
 800083e:	429a      	cmp	r2, r3
 8000840:	d207      	bcs.n	8000852 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 8000842:	887b      	ldrh	r3, [r7, #2]
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	4413      	add	r3, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f000 fe22 	bl	8001492 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 800084e:	4603      	mov	r3, r0
 8000850:	e000      	b.n	8000854 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 8000852:	2300      	movs	r3, #0
  }
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <_ZNK6tflite5Model7versionEv>:
    VT_DESCRIPTION = 10,
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16
  };
  uint32_t version() const {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2200      	movs	r2, #0
 8000868:	2104      	movs	r1, #4
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fe3b 	bl	80014e6 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8000870:	4603      	mov	r3, r0
  }
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f000 fe4d 	bl	8001522 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8000888:	4603      	mov	r3, r0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff6f 	bl	8000788 <_ZN6tflite13ErrorReporterD1Ev>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	080110dc 	.word	0x080110dc

080008b8 <_ZN6tflite18MicroErrorReporterD0Ev>:
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff ffe7 	bl	8000894 <_ZN6tflite18MicroErrorReporterD1Ev>
 80008c6:	2104      	movs	r1, #4
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f003 fd09 	bl	80042e0 <_ZdlPvj>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <__tcf_0>:
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_CRC_Init();
  /* USER CODE BEGIN 2 */

  static tflite::MicroErrorReporter micro_error_reporter;
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
 80008dc:	4801      	ldr	r0, [pc, #4]	; (80008e4 <__tcf_0+0xc>)
 80008de:	f7ff ffd9 	bl	8000894 <_ZN6tflite18MicroErrorReporterD1Ev>
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000000 	.word	0x20000000

080008e8 <main>:
{
 80008e8:	b598      	push	{r3, r4, r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  SCB_EnableICache();
 80008ec:	f7ff fed6 	bl	800069c <SCB_EnableICache>
  SCB_EnableDCache();
 80008f0:	f7ff fefa 	bl	80006e8 <SCB_EnableDCache>
  HAL_Init();
 80008f4:	f001 f854 	bl	80019a0 <HAL_Init>
  SystemClock_Config();
 80008f8:	f000 f85c 	bl	80009b4 <_Z18SystemClock_Configv>
  uart1_init();
 80008fc:	f000 fd8a 	bl	8001414 <_ZL10uart1_initv>
  MX_GPIO_Init();
 8000900:	f000 f8f2 	bl	8000ae8 <_ZL12MX_GPIO_Initv>
  MX_CRC_Init();
 8000904:	f000 f8c8 	bl	8000a98 <_ZL11MX_CRC_Initv>
  static tflite::MicroErrorReporter micro_error_reporter;
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <main+0xb0>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	f3bf 8f5b 	dmb	ish
 8000910:	b2db      	uxtb	r3, r3
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf0c      	ite	eq
 800091a:	2301      	moveq	r3, #1
 800091c:	2300      	movne	r3, #0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d010      	beq.n	8000946 <main+0x5e>
 8000924:	481c      	ldr	r0, [pc, #112]	; (8000998 <main+0xb0>)
 8000926:	f003 fcdd 	bl	80042e4 <__cxa_guard_acquire>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	bf14      	ite	ne
 8000930:	2301      	movne	r3, #1
 8000932:	2300      	moveq	r3, #0
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b00      	cmp	r3, #0
 8000938:	d005      	beq.n	8000946 <main+0x5e>
 800093a:	4818      	ldr	r0, [pc, #96]	; (800099c <main+0xb4>)
 800093c:	f003 fd1c 	bl	8004378 <atexit>
 8000940:	4815      	ldr	r0, [pc, #84]	; (8000998 <main+0xb0>)
 8000942:	f003 fcdb 	bl	80042fc <__cxa_guard_release>
  error_reporter = &micro_error_reporter;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <main+0xb8>)
 8000948:	4a16      	ldr	r2, [pc, #88]	; (80009a4 <main+0xbc>)
 800094a:	601a      	str	r2, [r3, #0]

  model = tflite::GetModel(g_ds_cnn_quantized_data);
 800094c:	4816      	ldr	r0, [pc, #88]	; (80009a8 <main+0xc0>)
 800094e:	f7ff ff94 	bl	800087a <_ZN6tflite8GetModelEPKv>
 8000952:	4603      	mov	r3, r0
 8000954:	4a15      	ldr	r2, [pc, #84]	; (80009ac <main+0xc4>)
 8000956:	6013      	str	r3, [r2, #0]

  if(model->version() != TFLITE_SCHEMA_VERSION) {
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <main+0xc4>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ff7d 	bl	800085c <_ZNK6tflite5Model7versionEv>
 8000962:	4603      	mov	r3, r0
 8000964:	2b03      	cmp	r3, #3
 8000966:	bf14      	ite	ne
 8000968:	2301      	movne	r3, #1
 800096a:	2300      	moveq	r3, #0
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00e      	beq.n	8000990 <main+0xa8>
		  TF_LITE_REPORT_ERROR(error_reporter,
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <main+0xb8>)
 8000974:	681c      	ldr	r4, [r3, #0]
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <main+0xc4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ff6e 	bl	800085c <_ZNK6tflite5Model7versionEv>
 8000980:	4602      	mov	r2, r0
 8000982:	2303      	movs	r3, #3
 8000984:	490a      	ldr	r1, [pc, #40]	; (80009b0 <main+0xc8>)
 8000986:	4620      	mov	r0, r4
 8000988:	f003 f94d 	bl	8003c26 <_ZN6tflite13ErrorReporter6ReportEPKcz>
		   "Model provided is schema version %d not equal "
		   "to supported version %d.",
		   model->version(), TFLITE_SCHEMA_VERSION);
		  return 0;
 800098c:	2300      	movs	r3, #0
 800098e:	e000      	b.n	8000992 <main+0xaa>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000990:	e7fe      	b.n	8000990 <main+0xa8>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000992:	4618      	mov	r0, r3
 8000994:	bd98      	pop	{r3, r4, r7, pc}
 8000996:	bf00      	nop
 8000998:	2000014c 	.word	0x2000014c
 800099c:	080008d9 	.word	0x080008d9
 80009a0:	20000098 	.word	0x20000098
 80009a4:	20000000 	.word	0x20000000
 80009a8:	080056a8 	.word	0x080056a8
 80009ac:	2000009c 	.word	0x2000009c
 80009b0:	08005640 	.word	0x08005640

080009b4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b094      	sub	sp, #80	; 0x50
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 0320 	add.w	r3, r7, #32
 80009be:	2230      	movs	r2, #48	; 0x30
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f003 fd9c 	bl	8004500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d8:	4b2d      	ldr	r3, [pc, #180]	; (8000a90 <_Z18SystemClock_Configv+0xdc>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a2c      	ldr	r2, [pc, #176]	; (8000a90 <_Z18SystemClock_Configv+0xdc>)
 80009de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
 80009e4:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <_Z18SystemClock_Configv+0xdc>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009f0:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <_Z18SystemClock_Configv+0xe0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009f8:	4a26      	ldr	r2, [pc, #152]	; (8000a94 <_Z18SystemClock_Configv+0xe0>)
 80009fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <_Z18SystemClock_Configv+0xe0>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a10:	2301      	movs	r3, #1
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a14:	2310      	movs	r3, #16
 8000a16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000a20:	230a      	movs	r3, #10
 8000a22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8000a24:	23d2      	movs	r3, #210	; 0xd2
 8000a26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a30:	f107 0320 	add.w	r3, r7, #32
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 fba7 	bl	8002188 <HAL_RCC_OscConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	bf14      	ite	ne
 8000a40:	2301      	movne	r3, #1
 8000a42:	2300      	moveq	r3, #0
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <_Z18SystemClock_Configv+0x9a>
  {
    Error_Handler();
 8000a4a:	f000 fd11 	bl	8001470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4e:	230f      	movs	r3, #15
 8000a50:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a52:	2302      	movs	r3, #2
 8000a54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a5a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2105      	movs	r1, #5
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 fe2f 	bl	80026d0 <HAL_RCC_ClockConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	bf14      	ite	ne
 8000a78:	2301      	movne	r3, #1
 8000a7a:	2300      	moveq	r3, #0
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8000a82:	f000 fcf5 	bl	8001470 <Error_Handler>
  }
}
 8000a86:	bf00      	nop
 8000a88:	3750      	adds	r7, #80	; 0x50
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000

08000a98 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <_ZL11MX_CRC_Initv+0x48>)
 8000a9e:	4a11      	ldr	r2, [pc, #68]	; (8000ae4 <_ZL11MX_CRC_Initv+0x4c>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <_ZL11MX_CRC_Initv+0x48>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <_ZL11MX_CRC_Initv+0x48>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <_ZL11MX_CRC_Initv+0x48>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <_ZL11MX_CRC_Initv+0x48>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <_ZL11MX_CRC_Initv+0x48>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ac0:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <_ZL11MX_CRC_Initv+0x48>)
 8000ac2:	f001 f8b1 	bl	8001c28 <HAL_CRC_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	bf14      	ite	ne
 8000acc:	2301      	movne	r3, #1
 8000ace:	2300      	moveq	r3, #0
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8000ad6:	f000 fccb 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000a0 	.word	0x200000a0
 8000ae4:	40023000 	.word	0x40023000

08000ae8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b090      	sub	sp, #64	; 0x40
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000afe:	4bad      	ldr	r3, [pc, #692]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4aac      	ldr	r2, [pc, #688]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b04:	f043 0310 	orr.w	r3, r3, #16
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4baa      	ldr	r3, [pc, #680]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b16:	4ba7      	ldr	r3, [pc, #668]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4aa6      	ldr	r2, [pc, #664]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4ba4      	ldr	r3, [pc, #656]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4ba1      	ldr	r3, [pc, #644]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4aa0      	ldr	r2, [pc, #640]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b9e      	ldr	r3, [pc, #632]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	623b      	str	r3, [r7, #32]
 8000b44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	4b9b      	ldr	r3, [pc, #620]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a9a      	ldr	r2, [pc, #616]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b98      	ldr	r3, [pc, #608]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	61fb      	str	r3, [r7, #28]
 8000b5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b95      	ldr	r3, [pc, #596]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a94      	ldr	r2, [pc, #592]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b92      	ldr	r3, [pc, #584]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	61bb      	str	r3, [r7, #24]
 8000b74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b8f      	ldr	r3, [pc, #572]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a8e      	ldr	r2, [pc, #568]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b8c      	ldr	r3, [pc, #560]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b8e:	4b89      	ldr	r3, [pc, #548]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a88      	ldr	r2, [pc, #544]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b86      	ldr	r3, [pc, #536]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ba6:	4b83      	ldr	r3, [pc, #524]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a82      	ldr	r2, [pc, #520]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b80      	ldr	r3, [pc, #512]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000bbe:	4b7d      	ldr	r3, [pc, #500]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a7c      	ldr	r2, [pc, #496]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000bc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b7a      	ldr	r3, [pc, #488]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd6:	4b77      	ldr	r3, [pc, #476]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a76      	ldr	r2, [pc, #472]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000bdc:	f043 0320 	orr.w	r3, r3, #32
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b74      	ldr	r3, [pc, #464]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0320 	and.w	r3, r3, #32
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bee:	4b71      	ldr	r3, [pc, #452]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a70      	ldr	r2, [pc, #448]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b6e      	ldr	r3, [pc, #440]	; (8000db4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2120      	movs	r1, #32
 8000c0a:	486b      	ldr	r0, [pc, #428]	; (8000db8 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000c0c:	f001 faa2 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f241 010c 	movw	r1, #4108	; 0x100c
 8000c16:	4869      	ldr	r0, [pc, #420]	; (8000dbc <_ZL12MX_GPIO_Initv+0x2d4>)
 8000c18:	f001 fa9c 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2108      	movs	r1, #8
 8000c20:	4867      	ldr	r0, [pc, #412]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x2d8>)
 8000c22:	f001 fa97 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2c:	4865      	ldr	r0, [pc, #404]	; (8000dc4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8000c2e:	f001 fa91 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	21c8      	movs	r1, #200	; 0xc8
 8000c36:	4864      	ldr	r0, [pc, #400]	; (8000dc8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000c38:	f001 fa8c 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000c3c:	2310      	movs	r3, #16
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c4c:	230e      	movs	r3, #14
 8000c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c54:	4619      	mov	r1, r3
 8000c56:	485d      	ldr	r0, [pc, #372]	; (8000dcc <_ZL12MX_GPIO_Initv+0x2e4>)
 8000c58:	f001 f8d0 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4857      	ldr	r0, [pc, #348]	; (8000dcc <_ZL12MX_GPIO_Initv+0x2e4>)
 8000c70:	f001 f8c4 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000c74:	2304      	movs	r3, #4
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000c84:	2309      	movs	r3, #9
 8000c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	484f      	ldr	r0, [pc, #316]	; (8000dcc <_ZL12MX_GPIO_Initv+0x2e4>)
 8000c90:	f001 f8b4 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000c94:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca6:	230b      	movs	r3, #11
 8000ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000caa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4845      	ldr	r0, [pc, #276]	; (8000dc8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000cb2:	f001 f8a3 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000cb6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cc8:	230c      	movs	r3, #12
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ccc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	483e      	ldr	r0, [pc, #248]	; (8000dcc <_ZL12MX_GPIO_Initv+0x2e4>)
 8000cd4:	f001 f892 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000cd8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cde:	2312      	movs	r3, #18
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cea:	2304      	movs	r3, #4
 8000cec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4836      	ldr	r0, [pc, #216]	; (8000dd0 <_ZL12MX_GPIO_Initv+0x2e8>)
 8000cf6:	f001 f881 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000cfa:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d0c:	230a      	movs	r3, #10
 8000d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d14:	4619      	mov	r1, r3
 8000d16:	482e      	ldr	r0, [pc, #184]	; (8000dd0 <_ZL12MX_GPIO_Initv+0x2e8>)
 8000d18:	f001 f870 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000d1c:	2310      	movs	r3, #16
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d34:	4619      	mov	r1, r3
 8000d36:	4826      	ldr	r0, [pc, #152]	; (8000dd0 <_ZL12MX_GPIO_Initv+0x2e8>)
 8000d38:	f001 f860 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d54:	4619      	mov	r1, r3
 8000d56:	4818      	ldr	r0, [pc, #96]	; (8000db8 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000d58:	f001 f850 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000d5c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d6e:	230c      	movs	r3, #12
 8000d70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d76:	4619      	mov	r1, r3
 8000d78:	4816      	ldr	r0, [pc, #88]	; (8000dd4 <_ZL12MX_GPIO_Initv+0x2ec>)
 8000d7a:	f001 f83f 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d90:	2301      	movs	r3, #1
 8000d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480f      	ldr	r0, [pc, #60]	; (8000dd8 <_ZL12MX_GPIO_Initv+0x2f0>)
 8000d9c:	f001 f82e 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000da0:	2360      	movs	r3, #96	; 0x60
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000db0:	230d      	movs	r3, #13
 8000db2:	e013      	b.n	8000ddc <_ZL12MX_GPIO_Initv+0x2f4>
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020c00 	.word	0x40020c00
 8000dbc:	40022000 	.word	0x40022000
 8000dc0:	40022800 	.word	0x40022800
 8000dc4:	40021c00 	.word	0x40021c00
 8000dc8:	40021800 	.word	0x40021800
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40020400 	.word	0x40020400
 8000dd4:	40020800 	.word	0x40020800
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de2:	4619      	mov	r1, r3
 8000de4:	48bb      	ldr	r0, [pc, #748]	; (80010d4 <_ZL12MX_GPIO_Initv+0x5ec>)
 8000de6:	f001 f809 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dfa:	2307      	movs	r3, #7
 8000dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e02:	4619      	mov	r1, r3
 8000e04:	48b4      	ldr	r0, [pc, #720]	; (80010d8 <_ZL12MX_GPIO_Initv+0x5f0>)
 8000e06:	f000 fff9 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000e0a:	2340      	movs	r3, #64	; 0x40
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e22:	4619      	mov	r1, r3
 8000e24:	48ac      	ldr	r0, [pc, #688]	; (80010d8 <_ZL12MX_GPIO_Initv+0x5f0>)
 8000e26:	f000 ffe9 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000e2a:	f248 1333 	movw	r3, #33075	; 0x8133
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e3c:	230c      	movs	r3, #12
 8000e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e44:	4619      	mov	r1, r3
 8000e46:	48a5      	ldr	r0, [pc, #660]	; (80010dc <_ZL12MX_GPIO_Initv+0x5f4>)
 8000e48:	f000 ffd8 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000e4c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e5e:	230e      	movs	r3, #14
 8000e60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e66:	4619      	mov	r1, r3
 8000e68:	489d      	ldr	r0, [pc, #628]	; (80010e0 <_ZL12MX_GPIO_Initv+0x5f8>)
 8000e6a:	f000 ffc7 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e80:	4619      	mov	r1, r3
 8000e82:	4897      	ldr	r0, [pc, #604]	; (80010e0 <_ZL12MX_GPIO_Initv+0x5f8>)
 8000e84:	f000 ffba 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000e88:	2340      	movs	r3, #64	; 0x40
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e8c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4891      	ldr	r0, [pc, #580]	; (80010e4 <_ZL12MX_GPIO_Initv+0x5fc>)
 8000e9e:	f000 ffad 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000ea2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4889      	ldr	r0, [pc, #548]	; (80010e4 <_ZL12MX_GPIO_Initv+0x5fc>)
 8000ec0:	f000 ff9c 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000ec4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ed6:	230a      	movs	r3, #10
 8000ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4881      	ldr	r0, [pc, #516]	; (80010e8 <_ZL12MX_GPIO_Initv+0x600>)
 8000ee2:	f000 ff8b 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000ee6:	23f0      	movs	r3, #240	; 0xf0
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000efa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000efe:	4619      	mov	r1, r3
 8000f00:	487a      	ldr	r0, [pc, #488]	; (80010ec <_ZL12MX_GPIO_Initv+0x604>)
 8000f02:	f000 ff7b 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000f06:	23f7      	movs	r3, #247	; 0xf7
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f16:	230e      	movs	r3, #14
 8000f18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4873      	ldr	r0, [pc, #460]	; (80010f0 <_ZL12MX_GPIO_Initv+0x608>)
 8000f22:	f000 ff6b 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f38:	2309      	movs	r3, #9
 8000f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f40:	4619      	mov	r1, r3
 8000f42:	4866      	ldr	r0, [pc, #408]	; (80010dc <_ZL12MX_GPIO_Initv+0x5f4>)
 8000f44:	f000 ff5a 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f5a:	230a      	movs	r3, #10
 8000f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f62:	4619      	mov	r1, r3
 8000f64:	485d      	ldr	r0, [pc, #372]	; (80010dc <_ZL12MX_GPIO_Initv+0x5f4>)
 8000f66:	f000 ff49 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f6a:	2320      	movs	r3, #32
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4858      	ldr	r0, [pc, #352]	; (80010e4 <_ZL12MX_GPIO_Initv+0x5fc>)
 8000f82:	f000 ff3b 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000f86:	2308      	movs	r3, #8
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f96:	230d      	movs	r3, #13
 8000f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4850      	ldr	r0, [pc, #320]	; (80010e4 <_ZL12MX_GPIO_Initv+0x5fc>)
 8000fa2:	f000 ff2b 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000fa6:	f241 030c 	movw	r3, #4108	; 0x100c
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	484b      	ldr	r0, [pc, #300]	; (80010ec <_ZL12MX_GPIO_Initv+0x604>)
 8000fc0:	f000 ff1c 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4846      	ldr	r0, [pc, #280]	; (80010f4 <_ZL12MX_GPIO_Initv+0x60c>)
 8000fda:	f000 ff0f 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000fde:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ff0:	230c      	movs	r3, #12
 8000ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	483f      	ldr	r0, [pc, #252]	; (80010f8 <_ZL12MX_GPIO_Initv+0x610>)
 8000ffc:	f000 fefe 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001000:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001012:	230e      	movs	r3, #14
 8001014:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101a:	4619      	mov	r1, r3
 800101c:	4833      	ldr	r0, [pc, #204]	; (80010ec <_ZL12MX_GPIO_Initv+0x604>)
 800101e:	f000 feed 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001022:	2308      	movs	r3, #8
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001036:	4619      	mov	r1, r3
 8001038:	482d      	ldr	r0, [pc, #180]	; (80010f0 <_ZL12MX_GPIO_Initv+0x608>)
 800103a:	f000 fedf 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800103e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001050:	230d      	movs	r3, #13
 8001052:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001058:	4619      	mov	r1, r3
 800105a:	4820      	ldr	r0, [pc, #128]	; (80010dc <_ZL12MX_GPIO_Initv+0x5f4>)
 800105c:	f000 fece 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001060:	2310      	movs	r3, #16
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001064:	2300      	movs	r3, #0
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001070:	4619      	mov	r1, r3
 8001072:	481c      	ldr	r0, [pc, #112]	; (80010e4 <_ZL12MX_GPIO_Initv+0x5fc>)
 8001074:	f000 fec2 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001078:	2304      	movs	r3, #4
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001088:	230c      	movs	r3, #12
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001090:	4619      	mov	r1, r3
 8001092:	4814      	ldr	r0, [pc, #80]	; (80010e4 <_ZL12MX_GPIO_Initv+0x5fc>)
 8001094:	f000 feb2 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001098:	f248 0304 	movw	r3, #32772	; 0x8004
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109e:	2300      	movs	r3, #0
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010aa:	4619      	mov	r1, r3
 80010ac:	4813      	ldr	r0, [pc, #76]	; (80010fc <_ZL12MX_GPIO_Initv+0x614>)
 80010ae:	f000 fea5 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80010b2:	2302      	movs	r3, #2
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010c2:	2305      	movs	r3, #5
 80010c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ca:	4619      	mov	r1, r3
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <_ZL12MX_GPIO_Initv+0x604>)
 80010ce:	f000 fe95 	bl	8001dfc <HAL_GPIO_Init>
 80010d2:	e015      	b.n	8001100 <_ZL12MX_GPIO_Initv+0x618>
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40020400 	.word	0x40020400
 80010dc:	40021800 	.word	0x40021800
 80010e0:	40022400 	.word	0x40022400
 80010e4:	40020c00 	.word	0x40020c00
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40022000 	.word	0x40022000
 80010f0:	40022800 	.word	0x40022800
 80010f4:	40020800 	.word	0x40020800
 80010f8:	40021400 	.word	0x40021400
 80010fc:	40021c00 	.word	0x40021c00

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001116:	4619      	mov	r1, r3
 8001118:	48b6      	ldr	r0, [pc, #728]	; (80013f4 <_ZL12MX_GPIO_Initv+0x90c>)
 800111a:	f000 fe6f 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800111e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001130:	230d      	movs	r3, #13
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001134:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001138:	4619      	mov	r1, r3
 800113a:	48ae      	ldr	r0, [pc, #696]	; (80013f4 <_ZL12MX_GPIO_Initv+0x90c>)
 800113c:	f000 fe5e 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001140:	2301      	movs	r3, #1
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001150:	2302      	movs	r3, #2
 8001152:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001158:	4619      	mov	r1, r3
 800115a:	48a7      	ldr	r0, [pc, #668]	; (80013f8 <_ZL12MX_GPIO_Initv+0x910>)
 800115c:	f000 fe4e 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001172:	2307      	movs	r3, #7
 8001174:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117a:	4619      	mov	r1, r3
 800117c:	489f      	ldr	r0, [pc, #636]	; (80013fc <_ZL12MX_GPIO_Initv+0x914>)
 800117e:	f000 fe3d 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001194:	2301      	movs	r3, #1
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800119c:	4619      	mov	r1, r3
 800119e:	4897      	ldr	r0, [pc, #604]	; (80013fc <_ZL12MX_GPIO_Initv+0x914>)
 80011a0:	f000 fe2c 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80011a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011aa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b8:	4619      	mov	r1, r3
 80011ba:	488f      	ldr	r0, [pc, #572]	; (80013f8 <_ZL12MX_GPIO_Initv+0x910>)
 80011bc:	f000 fe1e 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80011c0:	23c0      	movs	r3, #192	; 0xc0
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011d0:	2308      	movs	r3, #8
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d8:	4619      	mov	r1, r3
 80011da:	4889      	ldr	r0, [pc, #548]	; (8001400 <_ZL12MX_GPIO_Initv+0x918>)
 80011dc:	f000 fe0e 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80011e0:	2310      	movs	r3, #16
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80011f0:	230a      	movs	r3, #10
 80011f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f8:	4619      	mov	r1, r3
 80011fa:	487e      	ldr	r0, [pc, #504]	; (80013f4 <_ZL12MX_GPIO_Initv+0x90c>)
 80011fc:	f000 fdfe 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001200:	2328      	movs	r3, #40	; 0x28
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001210:	230c      	movs	r3, #12
 8001212:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001214:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001218:	4619      	mov	r1, r3
 800121a:	4876      	ldr	r0, [pc, #472]	; (80013f4 <_ZL12MX_GPIO_Initv+0x90c>)
 800121c:	f000 fdee 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001220:	23c8      	movs	r3, #200	; 0xc8
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001230:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001234:	4619      	mov	r1, r3
 8001236:	4873      	ldr	r0, [pc, #460]	; (8001404 <_ZL12MX_GPIO_Initv+0x91c>)
 8001238:	f000 fde0 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800123c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001242:	2303      	movs	r3, #3
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800124a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124e:	4619      	mov	r1, r3
 8001250:	486d      	ldr	r0, [pc, #436]	; (8001408 <_ZL12MX_GPIO_Initv+0x920>)
 8001252:	f000 fdd3 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001256:	2308      	movs	r3, #8
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001266:	230c      	movs	r3, #12
 8001268:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800126e:	4619      	mov	r1, r3
 8001270:	4863      	ldr	r0, [pc, #396]	; (8001400 <_ZL12MX_GPIO_Initv+0x918>)
 8001272:	f000 fdc3 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001276:	2305      	movs	r3, #5
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001286:	230a      	movs	r3, #10
 8001288:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800128e:	4619      	mov	r1, r3
 8001290:	485b      	ldr	r0, [pc, #364]	; (8001400 <_ZL12MX_GPIO_Initv+0x918>)
 8001292:	f000 fdb3 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001296:	2332      	movs	r3, #50	; 0x32
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a6:	230b      	movs	r3, #11
 80012a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ae:	4619      	mov	r1, r3
 80012b0:	4853      	ldr	r0, [pc, #332]	; (8001400 <_ZL12MX_GPIO_Initv+0x918>)
 80012b2:	f000 fda3 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012b6:	2304      	movs	r3, #4
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012c6:	2309      	movs	r3, #9
 80012c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ce:	4619      	mov	r1, r3
 80012d0:	484e      	ldr	r0, [pc, #312]	; (800140c <_ZL12MX_GPIO_Initv+0x924>)
 80012d2:	f000 fd93 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80012d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012e8:	2309      	movs	r3, #9
 80012ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f0:	4619      	mov	r1, r3
 80012f2:	4847      	ldr	r0, [pc, #284]	; (8001410 <_ZL12MX_GPIO_Initv+0x928>)
 80012f4:	f000 fd82 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80012f8:	2304      	movs	r3, #4
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001308:	4619      	mov	r1, r3
 800130a:	483e      	ldr	r0, [pc, #248]	; (8001404 <_ZL12MX_GPIO_Initv+0x91c>)
 800130c:	f000 fd76 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001310:	2386      	movs	r3, #134	; 0x86
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001320:	230b      	movs	r3, #11
 8001322:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001328:	4619      	mov	r1, r3
 800132a:	4834      	ldr	r0, [pc, #208]	; (80013fc <_ZL12MX_GPIO_Initv+0x914>)
 800132c:	f000 fd66 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001330:	2301      	movs	r3, #1
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001334:	2303      	movs	r3, #3
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001340:	4619      	mov	r1, r3
 8001342:	482e      	ldr	r0, [pc, #184]	; (80013fc <_ZL12MX_GPIO_Initv+0x914>)
 8001344:	f000 fd5a 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001348:	2350      	movs	r3, #80	; 0x50
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001358:	230d      	movs	r3, #13
 800135a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001360:	4619      	mov	r1, r3
 8001362:	4826      	ldr	r0, [pc, #152]	; (80013fc <_ZL12MX_GPIO_Initv+0x914>)
 8001364:	f000 fd4a 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001368:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136e:	2312      	movs	r3, #18
 8001370:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800137a:	2304      	movs	r3, #4
 800137c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800137e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001382:	4619      	mov	r1, r3
 8001384:	481b      	ldr	r0, [pc, #108]	; (80013f4 <_ZL12MX_GPIO_Initv+0x90c>)
 8001386:	f000 fd39 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800138a:	2328      	movs	r3, #40	; 0x28
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800139a:	230a      	movs	r3, #10
 800139c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a2:	4619      	mov	r1, r3
 80013a4:	4815      	ldr	r0, [pc, #84]	; (80013fc <_ZL12MX_GPIO_Initv+0x914>)
 80013a6:	f000 fd29 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80013aa:	2340      	movs	r3, #64	; 0x40
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80013ba:	2309      	movs	r3, #9
 80013bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c2:	4619      	mov	r1, r3
 80013c4:	480b      	ldr	r0, [pc, #44]	; (80013f4 <_ZL12MX_GPIO_Initv+0x90c>)
 80013c6:	f000 fd19 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80013ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013dc:	2305      	movs	r3, #5
 80013de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e4:	4619      	mov	r1, r3
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <_ZL12MX_GPIO_Initv+0x924>)
 80013e8:	f000 fd08 	bl	8001dfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ec:	bf00      	nop
 80013ee:	3740      	adds	r7, #64	; 0x40
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021c00 	.word	0x40021c00
 80013f8:	40022000 	.word	0x40022000
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020800 	.word	0x40020800
 8001404:	40021800 	.word	0x40021800
 8001408:	40021400 	.word	0x40021400
 800140c:	40020400 	.word	0x40020400
 8001410:	40020c00 	.word	0x40020c00

08001414 <_ZL10uart1_initv>:
  * @brief  UART1 Initialization Function
  * @param  None
  * @retval None
  */
static void uart1_init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	      - Parity = None
	      - BaudRate = 9600 baud
	      - Hardware flow control disabled (RTS and CTS signals)
	 */

	DebugUartHandler.Instance        = DISCOVERY_COM1;
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <_ZL10uart1_initv+0x54>)
 800141a:	4a14      	ldr	r2, [pc, #80]	; (800146c <_ZL10uart1_initv+0x58>)
 800141c:	601a      	str	r2, [r3, #0]
	DebugUartHandler.Init.BaudRate   = 9600;
 800141e:	4b12      	ldr	r3, [pc, #72]	; (8001468 <_ZL10uart1_initv+0x54>)
 8001420:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001424:	605a      	str	r2, [r3, #4]
	DebugUartHandler.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <_ZL10uart1_initv+0x54>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
	DebugUartHandler.Init.StopBits   = UART_STOPBITS_1;
 800142c:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <_ZL10uart1_initv+0x54>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
	DebugUartHandler.Init.Parity     = UART_PARITY_NONE;
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <_ZL10uart1_initv+0x54>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
	DebugUartHandler.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <_ZL10uart1_initv+0x54>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
	DebugUartHandler.Init.Mode       = UART_MODE_TX_RX;
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <_ZL10uart1_initv+0x54>)
 8001440:	220c      	movs	r2, #12
 8001442:	615a      	str	r2, [r3, #20]
	DebugUartHandler.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <_ZL10uart1_initv+0x54>)
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_UART_Init(&DebugUartHandler) != HAL_OK)
 800144a:	4807      	ldr	r0, [pc, #28]	; (8001468 <_ZL10uart1_initv+0x54>)
 800144c:	f001 ff16 	bl	800327c <HAL_UART_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	bf14      	ite	ne
 8001456:	2301      	movne	r3, #1
 8001458:	2300      	moveq	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <_ZL10uart1_initv+0x50>
	{
	    Error_Handler();
 8001460:	f000 f806 	bl	8001470 <Error_Handler>
	}
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200000c4 	.word	0x200000c4
 800146c:	40011000 	.word	0x40011000

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    // Turn Green LED ON
    BSP_LED_On(LED_GREEN);
 8001474:	2000      	movs	r0, #0
 8001476:	f000 fa7b 	bl	8001970 <BSP_LED_On>
    while(1);
 800147a:	e7fe      	b.n	800147a <Error_Handler+0xa>

0800147c <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 8001484:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f856 	bl	8001550 <_ZN11flatbuffers12EndianScalarItEET_S1_>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ffde 	bl	800147c <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f82f 	bl	800153a <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	460b      	mov	r3, r1
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 80014f4:	897b      	ldrh	r3, [r7, #10]
 80014f6:	4619      	mov	r1, r3
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f7ff f98f 	bl	800081c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80014fe:	4603      	mov	r3, r0
 8001500:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8001502:	8afb      	ldrh	r3, [r7, #22]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	8afb      	ldrh	r3, [r7, #22]
 800150c:	4413      	add	r3, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff ffcd 	bl	80014ae <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8001514:	4603      	mov	r3, r0
 8001516:	e000      	b.n	800151a <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 8001518:	687b      	ldr	r3, [r7, #4]
  }
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f81c 	bl	8001568 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
    return t;
 8001542:	687b      	ldr	r3, [r7, #4]
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
    return t;
 800155a:	88fb      	ldrh	r3, [r7, #6]
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  EndianCheck();
 8001570:	f7ff f92a 	bl	80007c8 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff7f 	bl	800147c <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800157e:	4602      	mov	r2, r0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4413      	add	r3, r2
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <HAL_MspInit+0x44>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <HAL_MspInit+0x44>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <HAL_MspInit+0x44>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_MspInit+0x44>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_MspInit+0x44>)
 80015b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b4:	6453      	str	r3, [r2, #68]	; 0x44
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_MspInit+0x44>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_CRC_MspInit+0x38>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d10b      	bne.n	80015fe <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_CRC_MspInit+0x3c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a09      	ldr	r2, [pc, #36]	; (8001610 <HAL_CRC_MspInit+0x3c>)
 80015ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <HAL_CRC_MspInit+0x3c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40023000 	.word	0x40023000
 8001610:	40023800 	.word	0x40023800

08001614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0ac      	sub	sp, #176	; 0xb0
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800162c:	f107 0318 	add.w	r3, r7, #24
 8001630:	2284      	movs	r2, #132	; 0x84
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f002 ff63 	bl	8004500 <memset>
  if(huart->Instance==USART1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a32      	ldr	r2, [pc, #200]	; (8001708 <HAL_UART_MspInit+0xf4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d15c      	bne.n	80016fe <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001644:	2340      	movs	r3, #64	; 0x40
 8001646:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001648:	2300      	movs	r3, #0
 800164a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800164c:	f107 0318 	add.w	r3, r7, #24
 8001650:	4618      	mov	r0, r3
 8001652:	f001 fa23 	bl	8002a9c <HAL_RCCEx_PeriphCLKConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800165c:	f7ff ff08 	bl	8001470 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_UART_MspInit+0xf8>)
 8001662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001664:	4a29      	ldr	r2, [pc, #164]	; (800170c <HAL_UART_MspInit+0xf8>)
 8001666:	f043 0310 	orr.w	r3, r3, #16
 800166a:	6453      	str	r3, [r2, #68]	; 0x44
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_UART_MspInit+0xf8>)
 800166e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_UART_MspInit+0xf8>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	4a23      	ldr	r2, [pc, #140]	; (800170c <HAL_UART_MspInit+0xf8>)
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	6313      	str	r3, [r2, #48]	; 0x30
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <HAL_UART_MspInit+0xf8>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	4b1e      	ldr	r3, [pc, #120]	; (800170c <HAL_UART_MspInit+0xf8>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	4a1d      	ldr	r2, [pc, #116]	; (800170c <HAL_UART_MspInit+0xf8>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6313      	str	r3, [r2, #48]	; 0x30
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_UART_MspInit+0xf8>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016c0:	2307      	movs	r3, #7
 80016c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016ca:	4619      	mov	r1, r3
 80016cc:	4810      	ldr	r0, [pc, #64]	; (8001710 <HAL_UART_MspInit+0xfc>)
 80016ce:	f000 fb95 	bl	8001dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80016d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ec:	2307      	movs	r3, #7
 80016ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80016f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016f6:	4619      	mov	r1, r3
 80016f8:	4806      	ldr	r0, [pc, #24]	; (8001714 <HAL_UART_MspInit+0x100>)
 80016fa:	f000 fb7f 	bl	8001dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016fe:	bf00      	nop
 8001700:	37b0      	adds	r7, #176	; 0xb0
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40011000 	.word	0x40011000
 800170c:	40023800 	.word	0x40023800
 8001710:	40020400 	.word	0x40020400
 8001714:	40020000 	.word	0x40020000

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800171c:	e7fe      	b.n	800171c <NMI_Handler+0x4>

0800171e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <MemManage_Handler+0x4>

0800172a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <UsageFault_Handler+0x4>

08001736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001764:	f000 f95a 	bl	8001a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return 1;
 8001770:	2301      	movs	r3, #1
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <_kill>:

int _kill(int pid, int sig)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001786:	f002 fdfd 	bl	8004384 <__errno>
 800178a:	4603      	mov	r3, r0
 800178c:	2216      	movs	r2, #22
 800178e:	601a      	str	r2, [r3, #0]
  return -1;
 8001790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <_exit>:

void _exit (int status)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ffe7 	bl	800177c <_kill>
  while (1) {}    /* Make sure we hang here */
 80017ae:	e7fe      	b.n	80017ae <_exit+0x12>

080017b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	e00a      	b.n	80017d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017c2:	f3af 8000 	nop.w
 80017c6:	4601      	mov	r1, r0
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	60ba      	str	r2, [r7, #8]
 80017ce:	b2ca      	uxtb	r2, r1
 80017d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3301      	adds	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	dbf0      	blt.n	80017c2 <_read+0x12>
  }

  return len;
 80017e0:	687b      	ldr	r3, [r7, #4]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	e009      	b.n	8001810 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	60ba      	str	r2, [r7, #8]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe ff25 	bl	8000654 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3301      	adds	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	429a      	cmp	r2, r3
 8001816:	dbf1      	blt.n	80017fc <_write+0x12>
  }
  return len;
 8001818:	687b      	ldr	r3, [r7, #4]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_close>:

int _close(int file)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800182a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800184a:	605a      	str	r2, [r3, #4]
  return 0;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <_isatty>:

int _isatty(int file)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001894:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <_sbrk+0x5c>)
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <_sbrk+0x60>)
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <_sbrk+0x64>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <_sbrk+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d207      	bcs.n	80018cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018bc:	f002 fd62 	bl	8004384 <__errno>
 80018c0:	4603      	mov	r3, r0
 80018c2:	220c      	movs	r2, #12
 80018c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ca:	e009      	b.n	80018e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <_sbrk+0x64>)
 80018dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20050000 	.word	0x20050000
 80018ec:	00000400 	.word	0x00000400
 80018f0:	20000150 	.word	0x20000150
 80018f4:	200001f8 	.word	0x200001f8

080018f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <SystemInit+0x20>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <SystemInit+0x20>)
 8001904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800191c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001920:	480d      	ldr	r0, [pc, #52]	; (8001958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001922:	490e      	ldr	r1, [pc, #56]	; (800195c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001924:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001938:	4c0b      	ldr	r4, [pc, #44]	; (8001968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001946:	f7ff ffd7 	bl	80018f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800194a:	f002 fda1 	bl	8004490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194e:	f7fe ffcb 	bl	80008e8 <main>
  bx  lr    
 8001952:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001954:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800195c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001960:	080111cc 	.word	0x080111cc
  ldr r2, =_sbss
 8001964:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001968:	200001f8 	.word	0x200001f8

0800196c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC_IRQHandler>
	...

08001970 <BSP_LED_On>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Switch On LED connected to GPIO */
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d108      	bne.n	8001992 <BSP_LED_On+0x22>
  {
    gpio_led = LED1_GPIO_PORT;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <BSP_LED_On+0x2c>)
 8001982:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_SET);
 8001984:	2302      	movs	r3, #2
 8001986:	b29b      	uxth	r3, r3
 8001988:	2201      	movs	r2, #1
 800198a:	4619      	mov	r1, r3
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 fbe1 	bl	8002154 <HAL_GPIO_WritePin>
  }
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40022000 	.word	0x40022000

080019a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 f90b 	bl	8001bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f000 f806 	bl	80019bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b0:	f7ff fdec 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_InitTick+0x54>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_InitTick+0x58>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f917 	bl	8001c0e <HAL_SYSTICK_Config>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00e      	b.n	8001a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b0f      	cmp	r3, #15
 80019ee:	d80a      	bhi.n	8001a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f0:	2200      	movs	r2, #0
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019f8:	f000 f8ed 	bl	8001bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019fc:	4a06      	ldr	r2, [pc, #24]	; (8001a18 <HAL_InitTick+0x5c>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e000      	b.n	8001a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000004 	.word	0x20000004
 8001a14:	2000000c 	.word	0x2000000c
 8001a18:	20000008 	.word	0x20000008

08001a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x20>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x24>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_IncTick+0x24>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	2000000c 	.word	0x2000000c
 8001a40:	20000154 	.word	0x20000154

08001a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return uwTick;
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <HAL_GetTick+0x14>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000154 	.word	0x20000154

08001a5c <__NVIC_SetPriorityGrouping>:
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <__NVIC_SetPriorityGrouping+0x40>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8a:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <__NVIC_SetPriorityGrouping+0x40>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	60d3      	str	r3, [r2, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00
 8001aa0:	05fa0000 	.word	0x05fa0000

08001aa4 <__NVIC_GetPriorityGrouping>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <__NVIC_GetPriorityGrouping+0x18>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 0307 	and.w	r3, r3, #7
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_SetPriority>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	db0a      	blt.n	8001aea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	490c      	ldr	r1, [pc, #48]	; (8001b0c <__NVIC_SetPriority+0x4c>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ae8:	e00a      	b.n	8001b00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4908      	ldr	r1, [pc, #32]	; (8001b10 <__NVIC_SetPriority+0x50>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	3b04      	subs	r3, #4
 8001af8:	0112      	lsls	r2, r2, #4
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	440b      	add	r3, r1
 8001afe:	761a      	strb	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000e100 	.word	0xe000e100
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <NVIC_EncodePriority>:
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f1c3 0307 	rsb	r3, r3, #7
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	bf28      	it	cs
 8001b32:	2304      	movcs	r3, #4
 8001b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d902      	bls.n	8001b44 <NVIC_EncodePriority+0x30>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3b03      	subs	r3, #3
 8001b42:	e000      	b.n	8001b46 <NVIC_EncodePriority+0x32>
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43d9      	mvns	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	4313      	orrs	r3, r2
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b8c:	d301      	bcc.n	8001b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00f      	b.n	8001bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <SysTick_Config+0x40>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9a:	210f      	movs	r1, #15
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ba0:	f7ff ff8e 	bl	8001ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <SysTick_Config+0x40>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001baa:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <SysTick_Config+0x40>)
 8001bac:	2207      	movs	r2, #7
 8001bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	e000e010 	.word	0xe000e010

08001bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff47 	bl	8001a5c <__NVIC_SetPriorityGrouping>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be8:	f7ff ff5c 	bl	8001aa4 <__NVIC_GetPriorityGrouping>
 8001bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	6978      	ldr	r0, [r7, #20]
 8001bf4:	f7ff ff8e 	bl	8001b14 <NVIC_EncodePriority>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff5d 	bl	8001ac0 <__NVIC_SetPriority>
}
 8001c06:	bf00      	nop
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffb0 	bl	8001b7c <SysTick_Config>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e054      	b.n	8001ce4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	7f5b      	ldrb	r3, [r3, #29]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff fcc2 	bl	80015d4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	791b      	ldrb	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10c      	bne.n	8001c78 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a22      	ldr	r2, [pc, #136]	; (8001cec <HAL_CRC_Init+0xc4>)
 8001c64:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0218 	bic.w	r2, r2, #24
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	e00c      	b.n	8001c92 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6899      	ldr	r1, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	461a      	mov	r2, r3
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f834 	bl	8001cf0 <HAL_CRCEx_Polynomial_Set>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e028      	b.n	8001ce4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	795b      	ldrb	r3, [r3, #5]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d105      	bne.n	8001ca6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ca2:	611a      	str	r2, [r3, #16]
 8001ca4:	e004      	b.n	8001cb0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6912      	ldr	r2, [r2, #16]
 8001cae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695a      	ldr	r2, [r3, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699a      	ldr	r2, [r3, #24]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	04c11db7 	.word	0x04c11db7

08001cf0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001d00:	231f      	movs	r3, #31
 8001d02:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001d04:	bf00      	nop
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1e5a      	subs	r2, r3, #1
 8001d0a:	613a      	str	r2, [r7, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d009      	beq.n	8001d24 <HAL_CRCEx_Polynomial_Set+0x34>
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	f003 031f 	and.w	r3, r3, #31
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b18      	cmp	r3, #24
 8001d28:	d846      	bhi.n	8001db8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001d2a:	a201      	add	r2, pc, #4	; (adr r2, 8001d30 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d30:	08001dbf 	.word	0x08001dbf
 8001d34:	08001db9 	.word	0x08001db9
 8001d38:	08001db9 	.word	0x08001db9
 8001d3c:	08001db9 	.word	0x08001db9
 8001d40:	08001db9 	.word	0x08001db9
 8001d44:	08001db9 	.word	0x08001db9
 8001d48:	08001db9 	.word	0x08001db9
 8001d4c:	08001db9 	.word	0x08001db9
 8001d50:	08001dad 	.word	0x08001dad
 8001d54:	08001db9 	.word	0x08001db9
 8001d58:	08001db9 	.word	0x08001db9
 8001d5c:	08001db9 	.word	0x08001db9
 8001d60:	08001db9 	.word	0x08001db9
 8001d64:	08001db9 	.word	0x08001db9
 8001d68:	08001db9 	.word	0x08001db9
 8001d6c:	08001db9 	.word	0x08001db9
 8001d70:	08001da1 	.word	0x08001da1
 8001d74:	08001db9 	.word	0x08001db9
 8001d78:	08001db9 	.word	0x08001db9
 8001d7c:	08001db9 	.word	0x08001db9
 8001d80:	08001db9 	.word	0x08001db9
 8001d84:	08001db9 	.word	0x08001db9
 8001d88:	08001db9 	.word	0x08001db9
 8001d8c:	08001db9 	.word	0x08001db9
 8001d90:	08001d95 	.word	0x08001d95
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d913      	bls.n	8001dc2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001d9e:	e010      	b.n	8001dc2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b07      	cmp	r3, #7
 8001da4:	d90f      	bls.n	8001dc6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001daa:	e00c      	b.n	8001dc6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	2b0f      	cmp	r3, #15
 8001db0:	d90b      	bls.n	8001dca <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001db6:	e008      	b.n	8001dca <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	75fb      	strb	r3, [r7, #23]
      break;
 8001dbc:	e006      	b.n	8001dcc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001dbe:	bf00      	nop
 8001dc0:	e004      	b.n	8001dcc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001dc2:	bf00      	nop
 8001dc4:	e002      	b.n	8001dcc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001dc6:	bf00      	nop
 8001dc8:	e000      	b.n	8001dcc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001dca:	bf00      	nop
  }
  if (status == HAL_OK)
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10d      	bne.n	8001dee <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f023 0118 	bic.w	r1, r3, #24
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	e175      	b.n	8002108 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	f040 8164 	bne.w	8002102 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d005      	beq.n	8001e52 <HAL_GPIO_Init+0x56>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d130      	bne.n	8001eb4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e88:	2201      	movs	r2, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 0201 	and.w	r2, r3, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d017      	beq.n	8001ef0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d123      	bne.n	8001f44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	08da      	lsrs	r2, r3, #3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3208      	adds	r2, #8
 8001f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	220f      	movs	r2, #15
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	08da      	lsrs	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3208      	adds	r2, #8
 8001f3e:	69b9      	ldr	r1, [r7, #24]
 8001f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0203 	and.w	r2, r3, #3
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80be 	beq.w	8002102 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f86:	4b66      	ldr	r3, [pc, #408]	; (8002120 <HAL_GPIO_Init+0x324>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a65      	ldr	r2, [pc, #404]	; (8002120 <HAL_GPIO_Init+0x324>)
 8001f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b63      	ldr	r3, [pc, #396]	; (8002120 <HAL_GPIO_Init+0x324>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f9e:	4a61      	ldr	r2, [pc, #388]	; (8002124 <HAL_GPIO_Init+0x328>)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a58      	ldr	r2, [pc, #352]	; (8002128 <HAL_GPIO_Init+0x32c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d037      	beq.n	800203a <HAL_GPIO_Init+0x23e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a57      	ldr	r2, [pc, #348]	; (800212c <HAL_GPIO_Init+0x330>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d031      	beq.n	8002036 <HAL_GPIO_Init+0x23a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a56      	ldr	r2, [pc, #344]	; (8002130 <HAL_GPIO_Init+0x334>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d02b      	beq.n	8002032 <HAL_GPIO_Init+0x236>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a55      	ldr	r2, [pc, #340]	; (8002134 <HAL_GPIO_Init+0x338>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d025      	beq.n	800202e <HAL_GPIO_Init+0x232>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a54      	ldr	r2, [pc, #336]	; (8002138 <HAL_GPIO_Init+0x33c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01f      	beq.n	800202a <HAL_GPIO_Init+0x22e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a53      	ldr	r2, [pc, #332]	; (800213c <HAL_GPIO_Init+0x340>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d019      	beq.n	8002026 <HAL_GPIO_Init+0x22a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a52      	ldr	r2, [pc, #328]	; (8002140 <HAL_GPIO_Init+0x344>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <HAL_GPIO_Init+0x226>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a51      	ldr	r2, [pc, #324]	; (8002144 <HAL_GPIO_Init+0x348>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00d      	beq.n	800201e <HAL_GPIO_Init+0x222>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a50      	ldr	r2, [pc, #320]	; (8002148 <HAL_GPIO_Init+0x34c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d007      	beq.n	800201a <HAL_GPIO_Init+0x21e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4f      	ldr	r2, [pc, #316]	; (800214c <HAL_GPIO_Init+0x350>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d101      	bne.n	8002016 <HAL_GPIO_Init+0x21a>
 8002012:	2309      	movs	r3, #9
 8002014:	e012      	b.n	800203c <HAL_GPIO_Init+0x240>
 8002016:	230a      	movs	r3, #10
 8002018:	e010      	b.n	800203c <HAL_GPIO_Init+0x240>
 800201a:	2308      	movs	r3, #8
 800201c:	e00e      	b.n	800203c <HAL_GPIO_Init+0x240>
 800201e:	2307      	movs	r3, #7
 8002020:	e00c      	b.n	800203c <HAL_GPIO_Init+0x240>
 8002022:	2306      	movs	r3, #6
 8002024:	e00a      	b.n	800203c <HAL_GPIO_Init+0x240>
 8002026:	2305      	movs	r3, #5
 8002028:	e008      	b.n	800203c <HAL_GPIO_Init+0x240>
 800202a:	2304      	movs	r3, #4
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x240>
 800202e:	2303      	movs	r3, #3
 8002030:	e004      	b.n	800203c <HAL_GPIO_Init+0x240>
 8002032:	2302      	movs	r3, #2
 8002034:	e002      	b.n	800203c <HAL_GPIO_Init+0x240>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_GPIO_Init+0x240>
 800203a:	2300      	movs	r3, #0
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	f002 0203 	and.w	r2, r2, #3
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	4093      	lsls	r3, r2
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800204c:	4935      	ldr	r1, [pc, #212]	; (8002124 <HAL_GPIO_Init+0x328>)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800205a:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <HAL_GPIO_Init+0x354>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800207e:	4a34      	ldr	r2, [pc, #208]	; (8002150 <HAL_GPIO_Init+0x354>)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002084:	4b32      	ldr	r3, [pc, #200]	; (8002150 <HAL_GPIO_Init+0x354>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a8:	4a29      	ldr	r2, [pc, #164]	; (8002150 <HAL_GPIO_Init+0x354>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ae:	4b28      	ldr	r3, [pc, #160]	; (8002150 <HAL_GPIO_Init+0x354>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020d2:	4a1f      	ldr	r2, [pc, #124]	; (8002150 <HAL_GPIO_Init+0x354>)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <HAL_GPIO_Init+0x354>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020fc:	4a14      	ldr	r2, [pc, #80]	; (8002150 <HAL_GPIO_Init+0x354>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3301      	adds	r3, #1
 8002106:	61fb      	str	r3, [r7, #28]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	2b0f      	cmp	r3, #15
 800210c:	f67f ae86 	bls.w	8001e1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	3724      	adds	r7, #36	; 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	40013800 	.word	0x40013800
 8002128:	40020000 	.word	0x40020000
 800212c:	40020400 	.word	0x40020400
 8002130:	40020800 	.word	0x40020800
 8002134:	40020c00 	.word	0x40020c00
 8002138:	40021000 	.word	0x40021000
 800213c:	40021400 	.word	0x40021400
 8002140:	40021800 	.word	0x40021800
 8002144:	40021c00 	.word	0x40021c00
 8002148:	40022000 	.word	0x40022000
 800214c:	40022400 	.word	0x40022400
 8002150:	40013c00 	.word	0x40013c00

08002154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
 8002160:	4613      	mov	r3, r2
 8002162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002164:	787b      	ldrb	r3, [r7, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002170:	e003      	b.n	800217a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	041a      	lsls	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	619a      	str	r2, [r3, #24]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002190:	2300      	movs	r3, #0
 8002192:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e291      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8087 	beq.w	80022ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ac:	4b96      	ldr	r3, [pc, #600]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d00c      	beq.n	80021d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b8:	4b93      	ldr	r3, [pc, #588]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d112      	bne.n	80021ea <HAL_RCC_OscConfig+0x62>
 80021c4:	4b90      	ldr	r3, [pc, #576]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021d0:	d10b      	bne.n	80021ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d2:	4b8d      	ldr	r3, [pc, #564]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d06c      	beq.n	80022b8 <HAL_RCC_OscConfig+0x130>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d168      	bne.n	80022b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e26b      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f2:	d106      	bne.n	8002202 <HAL_RCC_OscConfig+0x7a>
 80021f4:	4b84      	ldr	r3, [pc, #528]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a83      	ldr	r2, [pc, #524]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80021fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	e02e      	b.n	8002260 <HAL_RCC_OscConfig+0xd8>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10c      	bne.n	8002224 <HAL_RCC_OscConfig+0x9c>
 800220a:	4b7f      	ldr	r3, [pc, #508]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a7e      	ldr	r2, [pc, #504]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	4b7c      	ldr	r3, [pc, #496]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a7b      	ldr	r2, [pc, #492]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 800221c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e01d      	b.n	8002260 <HAL_RCC_OscConfig+0xd8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800222c:	d10c      	bne.n	8002248 <HAL_RCC_OscConfig+0xc0>
 800222e:	4b76      	ldr	r3, [pc, #472]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a75      	ldr	r2, [pc, #468]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	4b73      	ldr	r3, [pc, #460]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a72      	ldr	r2, [pc, #456]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e00b      	b.n	8002260 <HAL_RCC_OscConfig+0xd8>
 8002248:	4b6f      	ldr	r3, [pc, #444]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a6e      	ldr	r2, [pc, #440]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 800224e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b6c      	ldr	r3, [pc, #432]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a6b      	ldr	r2, [pc, #428]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 800225a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d013      	beq.n	8002290 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7ff fbec 	bl	8001a44 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002270:	f7ff fbe8 	bl	8001a44 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	; 0x64
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e21f      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002282:	4b61      	ldr	r3, [pc, #388]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0xe8>
 800228e:	e014      	b.n	80022ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7ff fbd8 	bl	8001a44 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002298:	f7ff fbd4 	bl	8001a44 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e20b      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022aa:	4b57      	ldr	r3, [pc, #348]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x110>
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d069      	beq.n	800239a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022c6:	4b50      	ldr	r3, [pc, #320]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00b      	beq.n	80022ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022d2:	4b4d      	ldr	r3, [pc, #308]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d11c      	bne.n	8002318 <HAL_RCC_OscConfig+0x190>
 80022de:	4b4a      	ldr	r3, [pc, #296]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d116      	bne.n	8002318 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	4b47      	ldr	r3, [pc, #284]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <HAL_RCC_OscConfig+0x17a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e1df      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002302:	4b41      	ldr	r3, [pc, #260]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	493d      	ldr	r1, [pc, #244]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	e040      	b.n	800239a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d023      	beq.n	8002368 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002320:	4b39      	ldr	r3, [pc, #228]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a38      	ldr	r2, [pc, #224]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7ff fb8a 	bl	8001a44 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002334:	f7ff fb86 	bl	8001a44 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e1bd      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002346:	4b30      	ldr	r3, [pc, #192]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002352:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4929      	ldr	r1, [pc, #164]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
 8002366:	e018      	b.n	800239a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002368:	4b27      	ldr	r3, [pc, #156]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a26      	ldr	r2, [pc, #152]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7ff fb66 	bl	8001a44 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237c:	f7ff fb62 	bl	8001a44 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e199      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238e:	4b1e      	ldr	r3, [pc, #120]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d038      	beq.n	8002418 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d019      	beq.n	80023e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ae:	4b16      	ldr	r3, [pc, #88]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80023b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b2:	4a15      	ldr	r2, [pc, #84]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ba:	f7ff fb43 	bl	8001a44 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c2:	f7ff fb3f 	bl	8001a44 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e176      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80023d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x23a>
 80023e0:	e01a      	b.n	8002418 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80023e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e6:	4a08      	ldr	r2, [pc, #32]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80023e8:	f023 0301 	bic.w	r3, r3, #1
 80023ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ee:	f7ff fb29 	bl	8001a44 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f6:	f7ff fb25 	bl	8001a44 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d903      	bls.n	800240c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e15c      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
 8002408:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240c:	4b91      	ldr	r3, [pc, #580]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 800240e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ee      	bne.n	80023f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80a4 	beq.w	800256e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002426:	4b8b      	ldr	r3, [pc, #556]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10d      	bne.n	800244e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	4b88      	ldr	r3, [pc, #544]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	4a87      	ldr	r2, [pc, #540]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243c:	6413      	str	r3, [r2, #64]	; 0x40
 800243e:	4b85      	ldr	r3, [pc, #532]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244a:	2301      	movs	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800244e:	4b82      	ldr	r3, [pc, #520]	; (8002658 <HAL_RCC_OscConfig+0x4d0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d118      	bne.n	800248c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800245a:	4b7f      	ldr	r3, [pc, #508]	; (8002658 <HAL_RCC_OscConfig+0x4d0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a7e      	ldr	r2, [pc, #504]	; (8002658 <HAL_RCC_OscConfig+0x4d0>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002466:	f7ff faed 	bl	8001a44 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246e:	f7ff fae9 	bl	8001a44 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b64      	cmp	r3, #100	; 0x64
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e120      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002480:	4b75      	ldr	r3, [pc, #468]	; (8002658 <HAL_RCC_OscConfig+0x4d0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_OscConfig+0x31a>
 8002494:	4b6f      	ldr	r3, [pc, #444]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002498:	4a6e      	ldr	r2, [pc, #440]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6713      	str	r3, [r2, #112]	; 0x70
 80024a0:	e02d      	b.n	80024fe <HAL_RCC_OscConfig+0x376>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x33c>
 80024aa:	4b6a      	ldr	r3, [pc, #424]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ae:	4a69      	ldr	r2, [pc, #420]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	6713      	str	r3, [r2, #112]	; 0x70
 80024b6:	4b67      	ldr	r3, [pc, #412]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ba:	4a66      	ldr	r2, [pc, #408]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024bc:	f023 0304 	bic.w	r3, r3, #4
 80024c0:	6713      	str	r3, [r2, #112]	; 0x70
 80024c2:	e01c      	b.n	80024fe <HAL_RCC_OscConfig+0x376>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b05      	cmp	r3, #5
 80024ca:	d10c      	bne.n	80024e6 <HAL_RCC_OscConfig+0x35e>
 80024cc:	4b61      	ldr	r3, [pc, #388]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	4a60      	ldr	r2, [pc, #384]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	6713      	str	r3, [r2, #112]	; 0x70
 80024d8:	4b5e      	ldr	r3, [pc, #376]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024dc:	4a5d      	ldr	r2, [pc, #372]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6713      	str	r3, [r2, #112]	; 0x70
 80024e4:	e00b      	b.n	80024fe <HAL_RCC_OscConfig+0x376>
 80024e6:	4b5b      	ldr	r3, [pc, #364]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ea:	4a5a      	ldr	r2, [pc, #360]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	6713      	str	r3, [r2, #112]	; 0x70
 80024f2:	4b58      	ldr	r3, [pc, #352]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	4a57      	ldr	r2, [pc, #348]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024f8:	f023 0304 	bic.w	r3, r3, #4
 80024fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d015      	beq.n	8002532 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002506:	f7ff fa9d 	bl	8001a44 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7ff fa99 	bl	8001a44 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	; 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0ce      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002524:	4b4b      	ldr	r3, [pc, #300]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ee      	beq.n	800250e <HAL_RCC_OscConfig+0x386>
 8002530:	e014      	b.n	800255c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7ff fa87 	bl	8001a44 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7ff fa83 	bl	8001a44 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0b8      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002550:	4b40      	ldr	r3, [pc, #256]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1ee      	bne.n	800253a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d105      	bne.n	800256e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002562:	4b3c      	ldr	r3, [pc, #240]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4a3b      	ldr	r2, [pc, #236]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 80a4 	beq.w	80026c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002578:	4b36      	ldr	r3, [pc, #216]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d06b      	beq.n	800265c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d149      	bne.n	8002620 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258c:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a30      	ldr	r2, [pc, #192]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7ff fa54 	bl	8001a44 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a0:	f7ff fa50 	bl	8001a44 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e087      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b2:	4b28      	ldr	r3, [pc, #160]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69da      	ldr	r2, [r3, #28]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	019b      	lsls	r3, r3, #6
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	3b01      	subs	r3, #1
 80025d8:	041b      	lsls	r3, r3, #16
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	061b      	lsls	r3, r3, #24
 80025e2:	4313      	orrs	r3, r2
 80025e4:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80025e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a18      	ldr	r2, [pc, #96]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80025f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7ff fa24 	bl	8001a44 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002600:	f7ff fa20 	bl	8001a44 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e057      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x478>
 800261e:	e04f      	b.n	80026c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0b      	ldr	r2, [pc, #44]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800262a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7ff fa0a 	bl	8001a44 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7ff fa06 	bl	8001a44 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e03d      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002646:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x4ac>
 8002652:	e035      	b.n	80026c0 <HAL_RCC_OscConfig+0x538>
 8002654:	40023800 	.word	0x40023800
 8002658:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_RCC_OscConfig+0x544>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d028      	beq.n	80026bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d121      	bne.n	80026bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	429a      	cmp	r2, r3
 8002684:	d11a      	bne.n	80026bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800268c:	4013      	ands	r3, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002692:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002694:	4293      	cmp	r3, r2
 8002696:	d111      	bne.n	80026bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	085b      	lsrs	r3, r3, #1
 80026a4:	3b01      	subs	r3, #1
 80026a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d107      	bne.n	80026bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800

080026d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0d0      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026e8:	4b6a      	ldr	r3, [pc, #424]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d910      	bls.n	8002718 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f6:	4b67      	ldr	r3, [pc, #412]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 020f 	bic.w	r2, r3, #15
 80026fe:	4965      	ldr	r1, [pc, #404]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b63      	ldr	r3, [pc, #396]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0b8      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002730:	4b59      	ldr	r3, [pc, #356]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4a58      	ldr	r2, [pc, #352]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800273a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002748:	4b53      	ldr	r3, [pc, #332]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4a52      	ldr	r2, [pc, #328]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800274e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002752:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b50      	ldr	r3, [pc, #320]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	494d      	ldr	r1, [pc, #308]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d040      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b47      	ldr	r3, [pc, #284]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d115      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e07f      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002792:	4b41      	ldr	r3, [pc, #260]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e073      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e06b      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b2:	4b39      	ldr	r3, [pc, #228]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f023 0203 	bic.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4936      	ldr	r1, [pc, #216]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c4:	f7ff f93e 	bl	8001a44 <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027cc:	f7ff f93a 	bl	8001a44 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e053      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e2:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 020c 	and.w	r2, r3, #12
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d1eb      	bne.n	80027cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f4:	4b27      	ldr	r3, [pc, #156]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d210      	bcs.n	8002824 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b24      	ldr	r3, [pc, #144]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 020f 	bic.w	r2, r3, #15
 800280a:	4922      	ldr	r1, [pc, #136]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e032      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4916      	ldr	r1, [pc, #88]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	490e      	ldr	r1, [pc, #56]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002862:	f000 f821 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8002866:	4602      	mov	r2, r0
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	490a      	ldr	r1, [pc, #40]	; (800289c <HAL_RCC_ClockConfig+0x1cc>)
 8002874:	5ccb      	ldrb	r3, [r1, r3]
 8002876:	fa22 f303 	lsr.w	r3, r2, r3
 800287a:	4a09      	ldr	r2, [pc, #36]	; (80028a0 <HAL_RCC_ClockConfig+0x1d0>)
 800287c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_RCC_ClockConfig+0x1d4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff f89a 	bl	80019bc <HAL_InitTick>

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023c00 	.word	0x40023c00
 8002898:	40023800 	.word	0x40023800
 800289c:	080110bc 	.word	0x080110bc
 80028a0:	20000004 	.word	0x20000004
 80028a4:	20000008 	.word	0x20000008

080028a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028ac:	b090      	sub	sp, #64	; 0x40
 80028ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34
 80028b4:	2300      	movs	r3, #0
 80028b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b8:	2300      	movs	r3, #0
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c0:	4b59      	ldr	r3, [pc, #356]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d00d      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x40>
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	f200 80a1 	bhi.w	8002a14 <HAL_RCC_GetSysClockFreq+0x16c>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x34>
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d003      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028da:	e09b      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b53      	ldr	r3, [pc, #332]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x184>)
 80028de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028e0:	e09b      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028e2:	4b53      	ldr	r3, [pc, #332]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x188>)
 80028e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028e6:	e098      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e8:	4b4f      	ldr	r3, [pc, #316]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028f0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028f2:	4b4d      	ldr	r3, [pc, #308]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d028      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fe:	4b4a      	ldr	r3, [pc, #296]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	2200      	movs	r2, #0
 8002906:	623b      	str	r3, [r7, #32]
 8002908:	627a      	str	r2, [r7, #36]	; 0x24
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002910:	2100      	movs	r1, #0
 8002912:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002914:	fb03 f201 	mul.w	r2, r3, r1
 8002918:	2300      	movs	r3, #0
 800291a:	fb00 f303 	mul.w	r3, r0, r3
 800291e:	4413      	add	r3, r2
 8002920:	4a43      	ldr	r2, [pc, #268]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002922:	fba0 1202 	umull	r1, r2, r0, r2
 8002926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002928:	460a      	mov	r2, r1
 800292a:	62ba      	str	r2, [r7, #40]	; 0x28
 800292c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800292e:	4413      	add	r3, r2
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002934:	2200      	movs	r2, #0
 8002936:	61bb      	str	r3, [r7, #24]
 8002938:	61fa      	str	r2, [r7, #28]
 800293a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800293e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002942:	f7fd fd05 	bl	8000350 <__aeabi_uldivmod>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4613      	mov	r3, r2
 800294c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800294e:	e053      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002950:	4b35      	ldr	r3, [pc, #212]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	099b      	lsrs	r3, r3, #6
 8002956:	2200      	movs	r2, #0
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	617a      	str	r2, [r7, #20]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002962:	f04f 0b00 	mov.w	fp, #0
 8002966:	4652      	mov	r2, sl
 8002968:	465b      	mov	r3, fp
 800296a:	f04f 0000 	mov.w	r0, #0
 800296e:	f04f 0100 	mov.w	r1, #0
 8002972:	0159      	lsls	r1, r3, #5
 8002974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002978:	0150      	lsls	r0, r2, #5
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	ebb2 080a 	subs.w	r8, r2, sl
 8002982:	eb63 090b 	sbc.w	r9, r3, fp
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002992:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002996:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800299a:	ebb2 0408 	subs.w	r4, r2, r8
 800299e:	eb63 0509 	sbc.w	r5, r3, r9
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	00eb      	lsls	r3, r5, #3
 80029ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029b0:	00e2      	lsls	r2, r4, #3
 80029b2:	4614      	mov	r4, r2
 80029b4:	461d      	mov	r5, r3
 80029b6:	eb14 030a 	adds.w	r3, r4, sl
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	eb45 030b 	adc.w	r3, r5, fp
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ce:	4629      	mov	r1, r5
 80029d0:	028b      	lsls	r3, r1, #10
 80029d2:	4621      	mov	r1, r4
 80029d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029d8:	4621      	mov	r1, r4
 80029da:	028a      	lsls	r2, r1, #10
 80029dc:	4610      	mov	r0, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e2:	2200      	movs	r2, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	60fa      	str	r2, [r7, #12]
 80029e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ec:	f7fd fcb0 	bl	8000350 <__aeabi_uldivmod>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4613      	mov	r3, r2
 80029f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	0c1b      	lsrs	r3, r3, #16
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	3301      	adds	r3, #1
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002a08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a12:	e002      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x184>)
 8002a16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3740      	adds	r7, #64	; 0x40
 8002a20:	46bd      	mov	sp, r7
 8002a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	00f42400 	.word	0x00f42400
 8002a30:	017d7840 	.word	0x017d7840

08002a34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a38:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000004 	.word	0x20000004

08002a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a50:	f7ff fff0 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	0a9b      	lsrs	r3, r3, #10
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	4903      	ldr	r1, [pc, #12]	; (8002a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a62:	5ccb      	ldrb	r3, [r1, r3]
 8002a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	080110cc 	.word	0x080110cc

08002a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a78:	f7ff ffdc 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	0b5b      	lsrs	r3, r3, #13
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	4903      	ldr	r1, [pc, #12]	; (8002a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a8a:	5ccb      	ldrb	r3, [r1, r3]
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40023800 	.word	0x40023800
 8002a98:	080110cc 	.word	0x080110cc

08002a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d012      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ac4:	4b69      	ldr	r3, [pc, #420]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a68      	ldr	r2, [pc, #416]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ace:	6093      	str	r3, [r2, #8]
 8002ad0:	4b66      	ldr	r3, [pc, #408]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	4964      	ldr	r1, [pc, #400]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d017      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002af6:	4b5d      	ldr	r3, [pc, #372]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002afc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b04:	4959      	ldr	r1, [pc, #356]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b14:	d101      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b16:	2301      	movs	r3, #1
 8002b18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b22:	2301      	movs	r3, #1
 8002b24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d017      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b32:	4b4e      	ldr	r3, [pc, #312]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	494a      	ldr	r1, [pc, #296]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b50:	d101      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b52:	2301      	movs	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 808b 	beq.w	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b80:	4b3a      	ldr	r3, [pc, #232]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	4a39      	ldr	r2, [pc, #228]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8c:	4b37      	ldr	r3, [pc, #220]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b98:	4b35      	ldr	r3, [pc, #212]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a34      	ldr	r2, [pc, #208]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba4:	f7fe ff4e 	bl	8001a44 <HAL_GetTick>
 8002ba8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bac:	f7fe ff4a 	bl	8001a44 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	; 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e357      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bbe:	4b2c      	ldr	r3, [pc, #176]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bca:	4b28      	ldr	r3, [pc, #160]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d035      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d02e      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be8:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bf2:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bfe:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	4a1a      	ldr	r2, [pc, #104]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c0a:	4a18      	ldr	r2, [pc, #96]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d114      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe ff12 	bl	8001a44 <HAL_GetTick>
 8002c20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c22:	e00a      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c24:	f7fe ff0e 	bl	8001a44 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e319      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0ee      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c52:	d111      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c60:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c62:	400b      	ands	r3, r1
 8002c64:	4901      	ldr	r1, [pc, #4]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40007000 	.word	0x40007000
 8002c74:	0ffffcff 	.word	0x0ffffcff
 8002c78:	4baa      	ldr	r3, [pc, #680]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4aa9      	ldr	r2, [pc, #676]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c7e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c82:	6093      	str	r3, [r2, #8]
 8002c84:	4ba7      	ldr	r3, [pc, #668]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c90:	49a4      	ldr	r1, [pc, #656]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d010      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ca2:	4ba0      	ldr	r3, [pc, #640]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca8:	4a9e      	ldr	r2, [pc, #632]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002caa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cb2:	4b9c      	ldr	r3, [pc, #624]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	4999      	ldr	r1, [pc, #612]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cd0:	4b94      	ldr	r3, [pc, #592]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cde:	4991      	ldr	r1, [pc, #580]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cf2:	4b8c      	ldr	r3, [pc, #560]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d00:	4988      	ldr	r1, [pc, #544]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d14:	4b83      	ldr	r3, [pc, #524]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d22:	4980      	ldr	r1, [pc, #512]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d36:	4b7b      	ldr	r3, [pc, #492]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d44:	4977      	ldr	r1, [pc, #476]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d58:	4b72      	ldr	r3, [pc, #456]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	496f      	ldr	r1, [pc, #444]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d7a:	4b6a      	ldr	r3, [pc, #424]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d80:	f023 020c 	bic.w	r2, r3, #12
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d88:	4966      	ldr	r1, [pc, #408]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d9c:	4b61      	ldr	r3, [pc, #388]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002daa:	495e      	ldr	r1, [pc, #376]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dbe:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dcc:	4955      	ldr	r1, [pc, #340]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002de0:	4b50      	ldr	r3, [pc, #320]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dee:	494d      	ldr	r1, [pc, #308]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e02:	4b48      	ldr	r3, [pc, #288]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e10:	4944      	ldr	r1, [pc, #272]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e24:	4b3f      	ldr	r3, [pc, #252]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e32:	493c      	ldr	r1, [pc, #240]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e46:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e54:	4933      	ldr	r1, [pc, #204]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e68:	4b2e      	ldr	r3, [pc, #184]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e76:	492b      	ldr	r1, [pc, #172]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d011      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e8a:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e98:	4922      	ldr	r1, [pc, #136]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ea4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea8:	d101      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eca:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed8:	4912      	ldr	r1, [pc, #72]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002eec:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002efc:	4909      	ldr	r1, [pc, #36]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d006      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80d9 	beq.w	80030ca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f18:	4b02      	ldr	r3, [pc, #8]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a01      	ldr	r2, [pc, #4]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f22:	e001      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002f24:	40023800 	.word	0x40023800
 8002f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f2a:	f7fe fd8b 	bl	8001a44 <HAL_GetTick>
 8002f2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f30:	e008      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f32:	f7fe fd87 	bl	8001a44 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b64      	cmp	r3, #100	; 0x64
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e194      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f44:	4b6c      	ldr	r3, [pc, #432]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f0      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d021      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d11d      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f64:	4b64      	ldr	r3, [pc, #400]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f6a:	0c1b      	lsrs	r3, r3, #16
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f72:	4b61      	ldr	r3, [pc, #388]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f78:	0e1b      	lsrs	r3, r3, #24
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	019a      	lsls	r2, r3, #6
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	041b      	lsls	r3, r3, #16
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	061b      	lsls	r3, r3, #24
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	071b      	lsls	r3, r3, #28
 8002f98:	4957      	ldr	r1, [pc, #348]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d004      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fb4:	d00a      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d02e      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fca:	d129      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fcc:	4b4a      	ldr	r3, [pc, #296]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd2:	0c1b      	lsrs	r3, r3, #16
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fda:	4b47      	ldr	r3, [pc, #284]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fe0:	0f1b      	lsrs	r3, r3, #28
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	019a      	lsls	r2, r3, #6
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	041b      	lsls	r3, r3, #16
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	061b      	lsls	r3, r3, #24
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	071b      	lsls	r3, r3, #28
 8003000:	493d      	ldr	r1, [pc, #244]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003008:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800300a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800300e:	f023 021f 	bic.w	r2, r3, #31
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	3b01      	subs	r3, #1
 8003018:	4937      	ldr	r1, [pc, #220]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01d      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800302c:	4b32      	ldr	r3, [pc, #200]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800302e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003032:	0e1b      	lsrs	r3, r3, #24
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800303a:	4b2f      	ldr	r3, [pc, #188]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800303c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003040:	0f1b      	lsrs	r3, r3, #28
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	019a      	lsls	r2, r3, #6
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	041b      	lsls	r3, r3, #16
 8003054:	431a      	orrs	r2, r3
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	061b      	lsls	r3, r3, #24
 800305a:	431a      	orrs	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	071b      	lsls	r3, r3, #28
 8003060:	4925      	ldr	r1, [pc, #148]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d011      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	019a      	lsls	r2, r3, #6
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	041b      	lsls	r3, r3, #16
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	061b      	lsls	r3, r3, #24
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	071b      	lsls	r3, r3, #28
 8003090:	4919      	ldr	r1, [pc, #100]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003098:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a16      	ldr	r2, [pc, #88]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800309e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a4:	f7fe fcce 	bl	8001a44 <HAL_GetTick>
 80030a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030ac:	f7fe fcca 	bl	8001a44 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	; 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e0d7      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030be:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	f040 80cd 	bne.w	800326c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a08      	ldr	r2, [pc, #32]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030de:	f7fe fcb1 	bl	8001a44 <HAL_GetTick>
 80030e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030e4:	e00a      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030e6:	f7fe fcad 	bl	8001a44 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b64      	cmp	r3, #100	; 0x64
 80030f2:	d903      	bls.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e0ba      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80030f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030fc:	4b5e      	ldr	r3, [pc, #376]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003108:	d0ed      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003126:	2b00      	cmp	r3, #0
 8003128:	d02e      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d12a      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003132:	4b51      	ldr	r3, [pc, #324]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003140:	4b4d      	ldr	r3, [pc, #308]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	0f1b      	lsrs	r3, r3, #28
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	019a      	lsls	r2, r3, #6
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	041b      	lsls	r3, r3, #16
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	061b      	lsls	r3, r3, #24
 8003160:	431a      	orrs	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	071b      	lsls	r3, r3, #28
 8003166:	4944      	ldr	r1, [pc, #272]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800316e:	4b42      	ldr	r3, [pc, #264]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003174:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	3b01      	subs	r3, #1
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	493d      	ldr	r1, [pc, #244]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d022      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003198:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800319c:	d11d      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800319e:	4b36      	ldr	r3, [pc, #216]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	0e1b      	lsrs	r3, r3, #24
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031ac:	4b32      	ldr	r3, [pc, #200]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	0f1b      	lsrs	r3, r3, #28
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	019a      	lsls	r2, r3, #6
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	041b      	lsls	r3, r3, #16
 80031c6:	431a      	orrs	r2, r3
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	061b      	lsls	r3, r3, #24
 80031cc:	431a      	orrs	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	071b      	lsls	r3, r3, #28
 80031d2:	4929      	ldr	r1, [pc, #164]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d028      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031e6:	4b24      	ldr	r3, [pc, #144]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ec:	0e1b      	lsrs	r3, r3, #24
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031f4:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fa:	0c1b      	lsrs	r3, r3, #16
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	019a      	lsls	r2, r3, #6
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	041b      	lsls	r3, r3, #16
 800320c:	431a      	orrs	r2, r3
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	061b      	lsls	r3, r3, #24
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	071b      	lsls	r3, r3, #28
 800321a:	4917      	ldr	r1, [pc, #92]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003222:	4b15      	ldr	r3, [pc, #84]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003228:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	4911      	ldr	r1, [pc, #68]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a0e      	ldr	r2, [pc, #56]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800323e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003242:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003244:	f7fe fbfe 	bl	8001a44 <HAL_GetTick>
 8003248:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800324a:	e008      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800324c:	f7fe fbfa 	bl	8001a44 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e007      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800325e:	4b06      	ldr	r3, [pc, #24]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800326a:	d1ef      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3720      	adds	r7, #32
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40023800 	.word	0x40023800

0800327c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e040      	b.n	8003310 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fe f9b8 	bl	8001614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2224      	movs	r2, #36	; 0x24
 80032a8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0201 	bic.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8b0 	bl	8003420 <UART_SetConfig>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e022      	b.n	8003310 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fb08 	bl	80038e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fb8f 	bl	8003a2c <UART_CheckIdleState>
 800330e:	4603      	mov	r3, r0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08a      	sub	sp, #40	; 0x28
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	4613      	mov	r3, r2
 8003326:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800332c:	2b20      	cmp	r3, #32
 800332e:	d171      	bne.n	8003414 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <HAL_UART_Transmit+0x24>
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e06a      	b.n	8003416 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2221      	movs	r2, #33	; 0x21
 800334c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800334e:	f7fe fb79 	bl	8001a44 <HAL_GetTick>
 8003352:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	88fa      	ldrh	r2, [r7, #6]
 8003358:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	88fa      	ldrh	r2, [r7, #6]
 8003360:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336c:	d108      	bne.n	8003380 <HAL_UART_Transmit+0x68>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d104      	bne.n	8003380 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	e003      	b.n	8003388 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003384:	2300      	movs	r3, #0
 8003386:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003388:	e02c      	b.n	80033e4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2200      	movs	r2, #0
 8003392:	2180      	movs	r1, #128	; 0x80
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 fb80 	bl	8003a9a <UART_WaitOnFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e038      	b.n	8003416 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10b      	bne.n	80033c2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	3302      	adds	r3, #2
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	e007      	b.n	80033d2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	781a      	ldrb	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	3301      	adds	r3, #1
 80033d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1cc      	bne.n	800338a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2200      	movs	r2, #0
 80033f8:	2140      	movs	r1, #64	; 0x40
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 fb4d 	bl	8003a9a <UART_WaitOnFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e005      	b.n	8003416 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	e000      	b.n	8003416 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003414:	2302      	movs	r3, #2
  }
}
 8003416:	4618      	mov	r0, r3
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4ba6      	ldr	r3, [pc, #664]	; (80036e4 <UART_SetConfig+0x2c4>)
 800344c:	4013      	ands	r3, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	6979      	ldr	r1, [r7, #20]
 8003454:	430b      	orrs	r3, r1
 8003456:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	430a      	orrs	r2, r1
 8003490:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a94      	ldr	r2, [pc, #592]	; (80036e8 <UART_SetConfig+0x2c8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d120      	bne.n	80034de <UART_SetConfig+0xbe>
 800349c:	4b93      	ldr	r3, [pc, #588]	; (80036ec <UART_SetConfig+0x2cc>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d816      	bhi.n	80034d8 <UART_SetConfig+0xb8>
 80034aa:	a201      	add	r2, pc, #4	; (adr r2, 80034b0 <UART_SetConfig+0x90>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	080034c1 	.word	0x080034c1
 80034b4:	080034cd 	.word	0x080034cd
 80034b8:	080034c7 	.word	0x080034c7
 80034bc:	080034d3 	.word	0x080034d3
 80034c0:	2301      	movs	r3, #1
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e150      	b.n	8003768 <UART_SetConfig+0x348>
 80034c6:	2302      	movs	r3, #2
 80034c8:	77fb      	strb	r3, [r7, #31]
 80034ca:	e14d      	b.n	8003768 <UART_SetConfig+0x348>
 80034cc:	2304      	movs	r3, #4
 80034ce:	77fb      	strb	r3, [r7, #31]
 80034d0:	e14a      	b.n	8003768 <UART_SetConfig+0x348>
 80034d2:	2308      	movs	r3, #8
 80034d4:	77fb      	strb	r3, [r7, #31]
 80034d6:	e147      	b.n	8003768 <UART_SetConfig+0x348>
 80034d8:	2310      	movs	r3, #16
 80034da:	77fb      	strb	r3, [r7, #31]
 80034dc:	e144      	b.n	8003768 <UART_SetConfig+0x348>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a83      	ldr	r2, [pc, #524]	; (80036f0 <UART_SetConfig+0x2d0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d132      	bne.n	800354e <UART_SetConfig+0x12e>
 80034e8:	4b80      	ldr	r3, [pc, #512]	; (80036ec <UART_SetConfig+0x2cc>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	d828      	bhi.n	8003548 <UART_SetConfig+0x128>
 80034f6:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <UART_SetConfig+0xdc>)
 80034f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fc:	08003531 	.word	0x08003531
 8003500:	08003549 	.word	0x08003549
 8003504:	08003549 	.word	0x08003549
 8003508:	08003549 	.word	0x08003549
 800350c:	0800353d 	.word	0x0800353d
 8003510:	08003549 	.word	0x08003549
 8003514:	08003549 	.word	0x08003549
 8003518:	08003549 	.word	0x08003549
 800351c:	08003537 	.word	0x08003537
 8003520:	08003549 	.word	0x08003549
 8003524:	08003549 	.word	0x08003549
 8003528:	08003549 	.word	0x08003549
 800352c:	08003543 	.word	0x08003543
 8003530:	2300      	movs	r3, #0
 8003532:	77fb      	strb	r3, [r7, #31]
 8003534:	e118      	b.n	8003768 <UART_SetConfig+0x348>
 8003536:	2302      	movs	r3, #2
 8003538:	77fb      	strb	r3, [r7, #31]
 800353a:	e115      	b.n	8003768 <UART_SetConfig+0x348>
 800353c:	2304      	movs	r3, #4
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e112      	b.n	8003768 <UART_SetConfig+0x348>
 8003542:	2308      	movs	r3, #8
 8003544:	77fb      	strb	r3, [r7, #31]
 8003546:	e10f      	b.n	8003768 <UART_SetConfig+0x348>
 8003548:	2310      	movs	r3, #16
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	e10c      	b.n	8003768 <UART_SetConfig+0x348>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a68      	ldr	r2, [pc, #416]	; (80036f4 <UART_SetConfig+0x2d4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d120      	bne.n	800359a <UART_SetConfig+0x17a>
 8003558:	4b64      	ldr	r3, [pc, #400]	; (80036ec <UART_SetConfig+0x2cc>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003562:	2b30      	cmp	r3, #48	; 0x30
 8003564:	d013      	beq.n	800358e <UART_SetConfig+0x16e>
 8003566:	2b30      	cmp	r3, #48	; 0x30
 8003568:	d814      	bhi.n	8003594 <UART_SetConfig+0x174>
 800356a:	2b20      	cmp	r3, #32
 800356c:	d009      	beq.n	8003582 <UART_SetConfig+0x162>
 800356e:	2b20      	cmp	r3, #32
 8003570:	d810      	bhi.n	8003594 <UART_SetConfig+0x174>
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <UART_SetConfig+0x15c>
 8003576:	2b10      	cmp	r3, #16
 8003578:	d006      	beq.n	8003588 <UART_SetConfig+0x168>
 800357a:	e00b      	b.n	8003594 <UART_SetConfig+0x174>
 800357c:	2300      	movs	r3, #0
 800357e:	77fb      	strb	r3, [r7, #31]
 8003580:	e0f2      	b.n	8003768 <UART_SetConfig+0x348>
 8003582:	2302      	movs	r3, #2
 8003584:	77fb      	strb	r3, [r7, #31]
 8003586:	e0ef      	b.n	8003768 <UART_SetConfig+0x348>
 8003588:	2304      	movs	r3, #4
 800358a:	77fb      	strb	r3, [r7, #31]
 800358c:	e0ec      	b.n	8003768 <UART_SetConfig+0x348>
 800358e:	2308      	movs	r3, #8
 8003590:	77fb      	strb	r3, [r7, #31]
 8003592:	e0e9      	b.n	8003768 <UART_SetConfig+0x348>
 8003594:	2310      	movs	r3, #16
 8003596:	77fb      	strb	r3, [r7, #31]
 8003598:	e0e6      	b.n	8003768 <UART_SetConfig+0x348>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a56      	ldr	r2, [pc, #344]	; (80036f8 <UART_SetConfig+0x2d8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d120      	bne.n	80035e6 <UART_SetConfig+0x1c6>
 80035a4:	4b51      	ldr	r3, [pc, #324]	; (80036ec <UART_SetConfig+0x2cc>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035ae:	2bc0      	cmp	r3, #192	; 0xc0
 80035b0:	d013      	beq.n	80035da <UART_SetConfig+0x1ba>
 80035b2:	2bc0      	cmp	r3, #192	; 0xc0
 80035b4:	d814      	bhi.n	80035e0 <UART_SetConfig+0x1c0>
 80035b6:	2b80      	cmp	r3, #128	; 0x80
 80035b8:	d009      	beq.n	80035ce <UART_SetConfig+0x1ae>
 80035ba:	2b80      	cmp	r3, #128	; 0x80
 80035bc:	d810      	bhi.n	80035e0 <UART_SetConfig+0x1c0>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <UART_SetConfig+0x1a8>
 80035c2:	2b40      	cmp	r3, #64	; 0x40
 80035c4:	d006      	beq.n	80035d4 <UART_SetConfig+0x1b4>
 80035c6:	e00b      	b.n	80035e0 <UART_SetConfig+0x1c0>
 80035c8:	2300      	movs	r3, #0
 80035ca:	77fb      	strb	r3, [r7, #31]
 80035cc:	e0cc      	b.n	8003768 <UART_SetConfig+0x348>
 80035ce:	2302      	movs	r3, #2
 80035d0:	77fb      	strb	r3, [r7, #31]
 80035d2:	e0c9      	b.n	8003768 <UART_SetConfig+0x348>
 80035d4:	2304      	movs	r3, #4
 80035d6:	77fb      	strb	r3, [r7, #31]
 80035d8:	e0c6      	b.n	8003768 <UART_SetConfig+0x348>
 80035da:	2308      	movs	r3, #8
 80035dc:	77fb      	strb	r3, [r7, #31]
 80035de:	e0c3      	b.n	8003768 <UART_SetConfig+0x348>
 80035e0:	2310      	movs	r3, #16
 80035e2:	77fb      	strb	r3, [r7, #31]
 80035e4:	e0c0      	b.n	8003768 <UART_SetConfig+0x348>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a44      	ldr	r2, [pc, #272]	; (80036fc <UART_SetConfig+0x2dc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d125      	bne.n	800363c <UART_SetConfig+0x21c>
 80035f0:	4b3e      	ldr	r3, [pc, #248]	; (80036ec <UART_SetConfig+0x2cc>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035fe:	d017      	beq.n	8003630 <UART_SetConfig+0x210>
 8003600:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003604:	d817      	bhi.n	8003636 <UART_SetConfig+0x216>
 8003606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800360a:	d00b      	beq.n	8003624 <UART_SetConfig+0x204>
 800360c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003610:	d811      	bhi.n	8003636 <UART_SetConfig+0x216>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <UART_SetConfig+0x1fe>
 8003616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800361a:	d006      	beq.n	800362a <UART_SetConfig+0x20a>
 800361c:	e00b      	b.n	8003636 <UART_SetConfig+0x216>
 800361e:	2300      	movs	r3, #0
 8003620:	77fb      	strb	r3, [r7, #31]
 8003622:	e0a1      	b.n	8003768 <UART_SetConfig+0x348>
 8003624:	2302      	movs	r3, #2
 8003626:	77fb      	strb	r3, [r7, #31]
 8003628:	e09e      	b.n	8003768 <UART_SetConfig+0x348>
 800362a:	2304      	movs	r3, #4
 800362c:	77fb      	strb	r3, [r7, #31]
 800362e:	e09b      	b.n	8003768 <UART_SetConfig+0x348>
 8003630:	2308      	movs	r3, #8
 8003632:	77fb      	strb	r3, [r7, #31]
 8003634:	e098      	b.n	8003768 <UART_SetConfig+0x348>
 8003636:	2310      	movs	r3, #16
 8003638:	77fb      	strb	r3, [r7, #31]
 800363a:	e095      	b.n	8003768 <UART_SetConfig+0x348>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a2f      	ldr	r2, [pc, #188]	; (8003700 <UART_SetConfig+0x2e0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d125      	bne.n	8003692 <UART_SetConfig+0x272>
 8003646:	4b29      	ldr	r3, [pc, #164]	; (80036ec <UART_SetConfig+0x2cc>)
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003650:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003654:	d017      	beq.n	8003686 <UART_SetConfig+0x266>
 8003656:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800365a:	d817      	bhi.n	800368c <UART_SetConfig+0x26c>
 800365c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003660:	d00b      	beq.n	800367a <UART_SetConfig+0x25a>
 8003662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003666:	d811      	bhi.n	800368c <UART_SetConfig+0x26c>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <UART_SetConfig+0x254>
 800366c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003670:	d006      	beq.n	8003680 <UART_SetConfig+0x260>
 8003672:	e00b      	b.n	800368c <UART_SetConfig+0x26c>
 8003674:	2301      	movs	r3, #1
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	e076      	b.n	8003768 <UART_SetConfig+0x348>
 800367a:	2302      	movs	r3, #2
 800367c:	77fb      	strb	r3, [r7, #31]
 800367e:	e073      	b.n	8003768 <UART_SetConfig+0x348>
 8003680:	2304      	movs	r3, #4
 8003682:	77fb      	strb	r3, [r7, #31]
 8003684:	e070      	b.n	8003768 <UART_SetConfig+0x348>
 8003686:	2308      	movs	r3, #8
 8003688:	77fb      	strb	r3, [r7, #31]
 800368a:	e06d      	b.n	8003768 <UART_SetConfig+0x348>
 800368c:	2310      	movs	r3, #16
 800368e:	77fb      	strb	r3, [r7, #31]
 8003690:	e06a      	b.n	8003768 <UART_SetConfig+0x348>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <UART_SetConfig+0x2e4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d138      	bne.n	800370e <UART_SetConfig+0x2ee>
 800369c:	4b13      	ldr	r3, [pc, #76]	; (80036ec <UART_SetConfig+0x2cc>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80036a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036aa:	d017      	beq.n	80036dc <UART_SetConfig+0x2bc>
 80036ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036b0:	d82a      	bhi.n	8003708 <UART_SetConfig+0x2e8>
 80036b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b6:	d00b      	beq.n	80036d0 <UART_SetConfig+0x2b0>
 80036b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036bc:	d824      	bhi.n	8003708 <UART_SetConfig+0x2e8>
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <UART_SetConfig+0x2aa>
 80036c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c6:	d006      	beq.n	80036d6 <UART_SetConfig+0x2b6>
 80036c8:	e01e      	b.n	8003708 <UART_SetConfig+0x2e8>
 80036ca:	2300      	movs	r3, #0
 80036cc:	77fb      	strb	r3, [r7, #31]
 80036ce:	e04b      	b.n	8003768 <UART_SetConfig+0x348>
 80036d0:	2302      	movs	r3, #2
 80036d2:	77fb      	strb	r3, [r7, #31]
 80036d4:	e048      	b.n	8003768 <UART_SetConfig+0x348>
 80036d6:	2304      	movs	r3, #4
 80036d8:	77fb      	strb	r3, [r7, #31]
 80036da:	e045      	b.n	8003768 <UART_SetConfig+0x348>
 80036dc:	2308      	movs	r3, #8
 80036de:	77fb      	strb	r3, [r7, #31]
 80036e0:	e042      	b.n	8003768 <UART_SetConfig+0x348>
 80036e2:	bf00      	nop
 80036e4:	efff69f3 	.word	0xefff69f3
 80036e8:	40011000 	.word	0x40011000
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40004400 	.word	0x40004400
 80036f4:	40004800 	.word	0x40004800
 80036f8:	40004c00 	.word	0x40004c00
 80036fc:	40005000 	.word	0x40005000
 8003700:	40011400 	.word	0x40011400
 8003704:	40007800 	.word	0x40007800
 8003708:	2310      	movs	r3, #16
 800370a:	77fb      	strb	r3, [r7, #31]
 800370c:	e02c      	b.n	8003768 <UART_SetConfig+0x348>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a72      	ldr	r2, [pc, #456]	; (80038dc <UART_SetConfig+0x4bc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d125      	bne.n	8003764 <UART_SetConfig+0x344>
 8003718:	4b71      	ldr	r3, [pc, #452]	; (80038e0 <UART_SetConfig+0x4c0>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003722:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003726:	d017      	beq.n	8003758 <UART_SetConfig+0x338>
 8003728:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800372c:	d817      	bhi.n	800375e <UART_SetConfig+0x33e>
 800372e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003732:	d00b      	beq.n	800374c <UART_SetConfig+0x32c>
 8003734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003738:	d811      	bhi.n	800375e <UART_SetConfig+0x33e>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <UART_SetConfig+0x326>
 800373e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003742:	d006      	beq.n	8003752 <UART_SetConfig+0x332>
 8003744:	e00b      	b.n	800375e <UART_SetConfig+0x33e>
 8003746:	2300      	movs	r3, #0
 8003748:	77fb      	strb	r3, [r7, #31]
 800374a:	e00d      	b.n	8003768 <UART_SetConfig+0x348>
 800374c:	2302      	movs	r3, #2
 800374e:	77fb      	strb	r3, [r7, #31]
 8003750:	e00a      	b.n	8003768 <UART_SetConfig+0x348>
 8003752:	2304      	movs	r3, #4
 8003754:	77fb      	strb	r3, [r7, #31]
 8003756:	e007      	b.n	8003768 <UART_SetConfig+0x348>
 8003758:	2308      	movs	r3, #8
 800375a:	77fb      	strb	r3, [r7, #31]
 800375c:	e004      	b.n	8003768 <UART_SetConfig+0x348>
 800375e:	2310      	movs	r3, #16
 8003760:	77fb      	strb	r3, [r7, #31]
 8003762:	e001      	b.n	8003768 <UART_SetConfig+0x348>
 8003764:	2310      	movs	r3, #16
 8003766:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003770:	d15b      	bne.n	800382a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003772:	7ffb      	ldrb	r3, [r7, #31]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d828      	bhi.n	80037ca <UART_SetConfig+0x3aa>
 8003778:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <UART_SetConfig+0x360>)
 800377a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377e:	bf00      	nop
 8003780:	080037a5 	.word	0x080037a5
 8003784:	080037ad 	.word	0x080037ad
 8003788:	080037b5 	.word	0x080037b5
 800378c:	080037cb 	.word	0x080037cb
 8003790:	080037bb 	.word	0x080037bb
 8003794:	080037cb 	.word	0x080037cb
 8003798:	080037cb 	.word	0x080037cb
 800379c:	080037cb 	.word	0x080037cb
 80037a0:	080037c3 	.word	0x080037c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a4:	f7ff f952 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 80037a8:	61b8      	str	r0, [r7, #24]
        break;
 80037aa:	e013      	b.n	80037d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037ac:	f7ff f962 	bl	8002a74 <HAL_RCC_GetPCLK2Freq>
 80037b0:	61b8      	str	r0, [r7, #24]
        break;
 80037b2:	e00f      	b.n	80037d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037b4:	4b4b      	ldr	r3, [pc, #300]	; (80038e4 <UART_SetConfig+0x4c4>)
 80037b6:	61bb      	str	r3, [r7, #24]
        break;
 80037b8:	e00c      	b.n	80037d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ba:	f7ff f875 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 80037be:	61b8      	str	r0, [r7, #24]
        break;
 80037c0:	e008      	b.n	80037d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037c6:	61bb      	str	r3, [r7, #24]
        break;
 80037c8:	e004      	b.n	80037d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	77bb      	strb	r3, [r7, #30]
        break;
 80037d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d074      	beq.n	80038c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	005a      	lsls	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	085b      	lsrs	r3, r3, #1
 80037e4:	441a      	add	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b0f      	cmp	r3, #15
 80037f4:	d916      	bls.n	8003824 <UART_SetConfig+0x404>
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fc:	d212      	bcs.n	8003824 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	b29b      	uxth	r3, r3
 8003802:	f023 030f 	bic.w	r3, r3, #15
 8003806:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	085b      	lsrs	r3, r3, #1
 800380c:	b29b      	uxth	r3, r3
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	b29a      	uxth	r2, r3
 8003814:	89fb      	ldrh	r3, [r7, #14]
 8003816:	4313      	orrs	r3, r2
 8003818:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	89fa      	ldrh	r2, [r7, #14]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	e04f      	b.n	80038c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	77bb      	strb	r3, [r7, #30]
 8003828:	e04c      	b.n	80038c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800382a:	7ffb      	ldrb	r3, [r7, #31]
 800382c:	2b08      	cmp	r3, #8
 800382e:	d828      	bhi.n	8003882 <UART_SetConfig+0x462>
 8003830:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <UART_SetConfig+0x418>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	0800385d 	.word	0x0800385d
 800383c:	08003865 	.word	0x08003865
 8003840:	0800386d 	.word	0x0800386d
 8003844:	08003883 	.word	0x08003883
 8003848:	08003873 	.word	0x08003873
 800384c:	08003883 	.word	0x08003883
 8003850:	08003883 	.word	0x08003883
 8003854:	08003883 	.word	0x08003883
 8003858:	0800387b 	.word	0x0800387b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800385c:	f7ff f8f6 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 8003860:	61b8      	str	r0, [r7, #24]
        break;
 8003862:	e013      	b.n	800388c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003864:	f7ff f906 	bl	8002a74 <HAL_RCC_GetPCLK2Freq>
 8003868:	61b8      	str	r0, [r7, #24]
        break;
 800386a:	e00f      	b.n	800388c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800386c:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <UART_SetConfig+0x4c4>)
 800386e:	61bb      	str	r3, [r7, #24]
        break;
 8003870:	e00c      	b.n	800388c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003872:	f7ff f819 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8003876:	61b8      	str	r0, [r7, #24]
        break;
 8003878:	e008      	b.n	800388c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800387a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800387e:	61bb      	str	r3, [r7, #24]
        break;
 8003880:	e004      	b.n	800388c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	77bb      	strb	r3, [r7, #30]
        break;
 800388a:	bf00      	nop
    }

    if (pclk != 0U)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d018      	beq.n	80038c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	085a      	lsrs	r2, r3, #1
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	441a      	add	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b0f      	cmp	r3, #15
 80038aa:	d909      	bls.n	80038c0 <UART_SetConfig+0x4a0>
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b2:	d205      	bcs.n	80038c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	e001      	b.n	80038c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80038d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3720      	adds	r7, #32
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40007c00 	.word	0x40007c00
 80038e0:	40023800 	.word	0x40023800
 80038e4:	00f42400 	.word	0x00f42400

080038e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01a      	beq.n	80039fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039e6:	d10a      	bne.n	80039fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	605a      	str	r2, [r3, #4]
  }
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a3c:	f7fe f802 	bl	8001a44 <HAL_GetTick>
 8003a40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d10e      	bne.n	8003a6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f81b 	bl	8003a9a <UART_WaitOnFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e011      	b.n	8003a92 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b09c      	sub	sp, #112	; 0x70
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aaa:	e0a7      	b.n	8003bfc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab2:	f000 80a3 	beq.w	8003bfc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab6:	f7fd ffc5 	bl	8001a44 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d302      	bcc.n	8003acc <UART_WaitOnFlagUntilTimeout+0x32>
 8003ac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d13f      	bne.n	8003b4c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003adc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ae0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003af0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e6      	bne.n	8003acc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3308      	adds	r3, #8
 8003b04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	663b      	str	r3, [r7, #96]	; 0x60
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e5      	bne.n	8003afe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e068      	b.n	8003c1e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d050      	beq.n	8003bfc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b68:	d148      	bne.n	8003bfc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b72:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	e853 3f00 	ldrex	r3, [r3]
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b92:	637b      	str	r3, [r7, #52]	; 0x34
 8003b94:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b9a:	e841 2300 	strex	r3, r2, [r1]
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e6      	bne.n	8003b74 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3308      	adds	r3, #8
 8003bac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003bc6:	623a      	str	r2, [r7, #32]
 8003bc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bca:	69f9      	ldr	r1, [r7, #28]
 8003bcc:	6a3a      	ldr	r2, [r7, #32]
 8003bce:	e841 2300 	strex	r3, r2, [r1]
 8003bd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1e5      	bne.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e010      	b.n	8003c1e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	4013      	ands	r3, r2
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2301      	moveq	r3, #1
 8003c0e:	2300      	movne	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	79fb      	ldrb	r3, [r7, #7]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	f43f af48 	beq.w	8003aac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3770      	adds	r7, #112	; 0x70
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8003c26:	b40e      	push	{r1, r2, r3}
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8003c30:	f107 0320 	add.w	r3, r7, #32
 8003c34:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3308      	adds	r3, #8
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	69f9      	ldr	r1, [r7, #28]
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
 8003c46:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8003c48:	68fb      	ldr	r3, [r7, #12]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c54:	b003      	add	sp, #12
 8003c56:	4770      	bx	lr

08003c58 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "tensorflow/lite/micro/micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b0c4      	sub	sp, #272	; 0x110
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c66:	6018      	str	r0, [r3, #0]
 8003c68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c70:	6019      	str	r1, [r3, #0]
 8003c72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c7a:	601a      	str	r2, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 8003c7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c80:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c84:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003c88:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8003c8c:	f107 0010 	add.w	r0, r7, #16
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c98:	f000 f9d2 	bl	8004040 <MicroVsnprintf>
  DebugLog(log_buffer);
 8003c9c:	f107 0310 	add.w	r3, r7, #16
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fc fce9 	bl	8000678 <DebugLog>
  DebugLog("\r\n");
 8003ca6:	4804      	ldr	r0, [pc, #16]	; (8003cb8 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x60>)
 8003ca8:	f7fc fce6 	bl	8000678 <DebugLog>
#endif
  return 0;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	08005688 	.word	0x08005688

08003cbc <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d20e      	bcs.n	8003cf6 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	617a      	str	r2, [r7, #20]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	7812      	ldrb	r2, [r2, #0]
 8003ce8:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1e5a      	subs	r2, r3, #1
 8003cee:	613a      	str	r2, [r7, #16]
 8003cf0:	7bfa      	ldrb	r2, [r7, #15]
 8003cf2:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 8003cf4:	e7ec      	b.n	8003cd0 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 8003cf6:	687b      	ldr	r3, [r7, #4]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  char* current = main;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 8003d22:	e7f7      	b.n	8003d14 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00e      	beq.n	8003d54 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d20a      	bcs.n	8003d54 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	781a      	ldrb	r2, [r3, #0]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	701a      	strb	r2, [r3, #0]
    ++current;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	617b      	str	r3, [r7, #20]
    ++to_append;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 8003d52:	e7ec      	b.n	8003d2e <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2200      	movs	r2, #0
 8003d58:	701a      	strb	r2, [r3, #0]
  return current;
 8003d5a:	697b      	ldr	r3, [r7, #20]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d80:	fb01 f202 	mul.w	r2, r1, r2
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b09      	cmp	r3, #9
 8003d8c:	dc04      	bgt.n	8003d98 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	3330      	adds	r3, #48	; 0x30
 8003d94:	77fb      	strb	r3, [r7, #31]
 8003d96:	e003      	b.n	8003da0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	3357      	adds	r3, #87	; 0x57
 8003d9e:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	60ba      	str	r2, [r7, #8]
 8003da6:	7ffa      	ldrb	r2, [r7, #31]
 8003da8:	701a      	strb	r2, [r3, #0]
    i /= base;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db2:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d000      	beq.n	8003dbc <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 8003dba:	e7dd      	b.n	8003d78 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 8003dc2:	68b9      	ldr	r1, [r7, #8]
 8003dc4:	69b8      	ldr	r0, [r7, #24]
 8003dc6:	f7ff ff79 	bl	8003cbc <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 8003dca:	68bb      	ldr	r3, [r7, #8]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3720      	adds	r7, #32
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	da07      	bge.n	8003df8 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	603a      	str	r2, [r7, #0]
 8003dee:	222d      	movs	r2, #45	; 0x2d
 8003df0:	701a      	strb	r2, [r3, #0]
    u = -u;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	425b      	negs	r3, r3
 8003df6:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 8003df8:	220a      	movs	r2, #10
 8003dfa:	6839      	ldr	r1, [r7, #0]
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f7ff ffb3 	bl	8003d68 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 8003e02:	4603      	mov	r3, r0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b090      	sub	sp, #64	; 0x40
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 8003e18:	f107 0310 	add.w	r3, r7, #16
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff ffd8 	bl	8003dd4 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 8003e24:	f107 0310 	add.w	r3, r7, #16
 8003e28:	461a      	mov	r2, r3
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f7ff ff69 	bl	8003d04 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8003e32:	4603      	mov	r3, r0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3740      	adds	r7, #64	; 0x40
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b090      	sub	sp, #64	; 0x40
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 8003e4a:	f107 0310 	add.w	r3, r7, #16
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	4619      	mov	r1, r3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff ff88 	bl	8003d68 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 8003e58:	f107 0310 	add.w	r3, r7, #16
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f7ff ff4f 	bl	8003d04 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8003e66:	4603      	mov	r3, r0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3740      	adds	r7, #64	; 0x40
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b095      	sub	sp, #84	; 0x54
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	ed87 0a01 	vstr	s0, [r7, #4]
 8003e7a:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  char* current_end = buffer + (kFastToBufferSize - 1);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	332f      	adds	r3, #47	; 0x2f
 8003e84:	643b      	str	r3, [r7, #64]	; 0x40
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 8003e86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  const uint32_t exponent_mask = 0x7f800000;
 8003e8c:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8003e90:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t exponent_shift = 23;
 8003e92:	2317      	movs	r3, #23
 8003e94:	637b      	str	r3, [r7, #52]	; 0x34
  const int32_t exponent_bias = 127;
 8003e96:	237f      	movs	r3, #127	; 0x7f
 8003e98:	633b      	str	r3, [r7, #48]	; 0x30
  const uint32_t fraction_mask = 0x007fffff;
 8003e9a:	4b42      	ldr	r3, [pc, #264]	; (8003fa4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x134>)
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint32_t u = *reinterpret_cast<uint32_t*>(&f);
 8003e9e:	1d3b      	adds	r3, r7, #4
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	0ddb      	lsrs	r3, r3, #23
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
  const uint32_t fraction = (u & fraction_mask);
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003eb4:	623b      	str	r3, [r7, #32]
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 8003eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	da05      	bge.n	8003ec8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x58>
    *current = '-';
 8003ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ebe:	222d      	movs	r2, #45	; 0x2d
 8003ec0:	701a      	strb	r2, [r3, #0]
    current += 1;
 8003ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  *current = 0;
 8003ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eca:	2200      	movs	r2, #0
 8003ecc:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	2b80      	cmp	r3, #128	; 0x80
 8003ed2:	d118      	bne.n	8003f06 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x96>
    if (fraction == 0) {
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x80>
      current = StrCatStr(current, (current_end - current), "Inf");
 8003eda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	4a31      	ldr	r2, [pc, #196]	; (8003fa8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x138>)
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003ee6:	f7ff ff0d 	bl	8003d04 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8003eea:	64f8      	str	r0, [r7, #76]	; 0x4c
      return current;
 8003eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eee:	e054      	b.n	8003f9a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x12a>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 8003ef0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	4a2d      	ldr	r2, [pc, #180]	; (8003fac <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x13c>)
 8003ef8:	4619      	mov	r1, r3
 8003efa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003efc:	f7ff ff02 	bl	8003d04 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8003f00:	64f8      	str	r0, [r7, #76]	; 0x4c
      return current;
 8003f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f04:	e049      	b.n	8003f9a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x12a>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 8003f06:	230d      	movs	r3, #13
 8003f08:	61fb      	str	r3, [r7, #28]
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 8003f0a:	4b29      	ldr	r3, [pc, #164]	; (8003fb0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x140>)
 8003f0c:	f107 040c 	add.w	r4, r7, #12
 8003f10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f12:	c407      	stmia	r4!, {r0, r1, r2}
 8003f14:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < scale_shifts_size; ++i) {
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f20:	2b0c      	cmp	r3, #12
 8003f22:	dc0f      	bgt.n	8003f44 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd4>
    scaled_fraction += (fraction >> scale_shifts[i]);
 8003f24:	f107 020c 	add.w	r2, r7, #12
 8003f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f993 3000 	ldrsb.w	r3, [r3]
 8003f30:	461a      	mov	r2, r3
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	40d3      	lsrs	r3, r2
 8003f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f38:	4413      	add	r3, r2
 8003f3a:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < scale_shifts_size; ++i) {
 8003f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f3e:	3301      	adds	r3, #1
 8003f40:	647b      	str	r3, [r7, #68]	; 0x44
 8003f42:	e7ec      	b.n	8003f1e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xae>
  }
  *current = '1';
 8003f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f46:	2231      	movs	r2, #49	; 0x31
 8003f48:	701a      	strb	r2, [r3, #0]
  current += 1;
 8003f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  *current = '.';
 8003f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f52:	222e      	movs	r2, #46	; 0x2e
 8003f54:	701a      	strb	r2, [r3, #0]
  current += 1;
 8003f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f58:	3301      	adds	r3, #1
 8003f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  *current = 0;
 8003f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f5e:	2200      	movs	r2, #0
 8003f60:	701a      	strb	r2, [r3, #0]
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 8003f62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f66:	1ad1      	subs	r1, r2, r3
 8003f68:	230a      	movs	r3, #10
 8003f6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f6c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003f6e:	f7ff ff65 	bl	8003e3c <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 8003f72:	64f8      	str	r0, [r7, #76]	; 0x4c
  current = StrCatStr(current, (current_end - current), "*2^");
 8003f74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x144>)
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003f80:	f7ff fec0 	bl	8003d04 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8003f84:	64f8      	str	r0, [r7, #76]	; 0x4c
  current = StrCatInt32(current, (current_end - current), exponent);
 8003f86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8e:	4619      	mov	r1, r3
 8003f90:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003f92:	f7ff ff3b 	bl	8003e0c <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 8003f96:	64f8      	str	r0, [r7, #76]	; 0x4c
  return current;
 8003f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3754      	adds	r7, #84	; 0x54
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd90      	pop	{r4, r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	007fffff 	.word	0x007fffff
 8003fa8:	0800568c 	.word	0x0800568c
 8003fac:	08005690 	.word	0x08005690
 8003fb0:	08005698 	.word	0x08005698
 8003fb4:	08005694 	.word	0x08005694

08003fb8 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	6838      	ldr	r0, [r7, #0]
 8003fc6:	f7ff ff05 	bl	8003dd4 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	1ad3      	subs	r3, r2, r3
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 8003fe2:	220a      	movs	r2, #10
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	6838      	ldr	r0, [r7, #0]
 8003fe8:	f7ff febe 	bl	8003d68 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 8003fec:	4602      	mov	r2, r0
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	1ad3      	subs	r3, r2, r3
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 8004004:	2210      	movs	r2, #16
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	6838      	ldr	r0, [r7, #0]
 800400a:	f7ff fead 	bl	8003d68 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800400e:	4602      	mov	r2, r0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	1ad3      	subs	r3, r2, r3
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	ed97 0a00 	vldr	s0, [r7]
 800402e:	f7ff ff1f 	bl	8003e70 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 8004032:	4602      	mov	r2, r0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	1ad3      	subs	r3, r2, r3
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 8004040:	b590      	push	{r4, r7, lr}
 8004042:	b08b      	sub	sp, #44	; 0x2c
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	3b01      	subs	r3, #1
 800405a:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8130 	beq.w	80042c6 <MicroVsnprintf+0x286>
 8004066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	429a      	cmp	r2, r3
 800406c:	f280 812b 	bge.w	80042c6 <MicroVsnprintf+0x286>
    if (*current == '%') {
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b25      	cmp	r3, #37	; 0x25
 8004076:	f040 811a 	bne.w	80042ae <MicroVsnprintf+0x26e>
      current++;
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	3301      	adds	r3, #1
 800407e:	623b      	str	r3, [r7, #32]
      switch (*current) {
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b25      	cmp	r3, #37	; 0x25
 8004086:	f000 80e0 	beq.w	800424a <MicroVsnprintf+0x20a>
 800408a:	2b25      	cmp	r3, #37	; 0x25
 800408c:	dbe6      	blt.n	800405c <MicroVsnprintf+0x1c>
 800408e:	2b78      	cmp	r3, #120	; 0x78
 8004090:	dce4      	bgt.n	800405c <MicroVsnprintf+0x1c>
 8004092:	2b64      	cmp	r3, #100	; 0x64
 8004094:	dbe2      	blt.n	800405c <MicroVsnprintf+0x1c>
 8004096:	3b64      	subs	r3, #100	; 0x64
 8004098:	2b14      	cmp	r3, #20
 800409a:	d8df      	bhi.n	800405c <MicroVsnprintf+0x1c>
 800409c:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <MicroVsnprintf+0x64>)
 800409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a2:	bf00      	nop
 80040a4:	080040f9 	.word	0x080040f9
 80040a8:	0800405d 	.word	0x0800405d
 80040ac:	080041df 	.word	0x080041df
 80040b0:	0800405d 	.word	0x0800405d
 80040b4:	0800405d 	.word	0x0800405d
 80040b8:	0800405d 	.word	0x0800405d
 80040bc:	0800405d 	.word	0x0800405d
 80040c0:	0800405d 	.word	0x0800405d
 80040c4:	0800405d 	.word	0x0800405d
 80040c8:	0800405d 	.word	0x0800405d
 80040cc:	0800405d 	.word	0x0800405d
 80040d0:	0800405d 	.word	0x0800405d
 80040d4:	0800405d 	.word	0x0800405d
 80040d8:	0800405d 	.word	0x0800405d
 80040dc:	0800405d 	.word	0x0800405d
 80040e0:	08004263 	.word	0x08004263
 80040e4:	0800405d 	.word	0x0800405d
 80040e8:	0800413b 	.word	0x0800413b
 80040ec:	0800405d 	.word	0x0800405d
 80040f0:	0800405d 	.word	0x0800405d
 80040f4:	0800417d 	.word	0x0800417d
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b0a      	cmp	r3, #10
 8004100:	dc09      	bgt.n	8004116 <MicroVsnprintf+0xd6>
            output[output_index++] = '\0';
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	627a      	str	r2, [r7, #36]	; 0x24
 8004108:	461a      	mov	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4413      	add	r3, r2
 800410e:	2200      	movs	r2, #0
 8004110:	701a      	strb	r2, [r3, #0]
            return output_index;
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	e0e0      	b.n	80042d8 <MicroVsnprintf+0x298>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	18d0      	adds	r0, r2, r3
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	1d1a      	adds	r2, r3, #4
 8004120:	603a      	str	r2, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4619      	mov	r1, r3
 8004126:	f7ff ff47 	bl	8003fb8 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 800412a:	4602      	mov	r2, r0
          output_index +=
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	4413      	add	r3, r2
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	3301      	adds	r3, #1
 8004136:	623b      	str	r3, [r7, #32]
          break;
 8004138:	e0c4      	b.n	80042c4 <MicroVsnprintf+0x284>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b0a      	cmp	r3, #10
 8004142:	dc09      	bgt.n	8004158 <MicroVsnprintf+0x118>
            output[output_index++] = '\0';
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	627a      	str	r2, [r7, #36]	; 0x24
 800414a:	461a      	mov	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4413      	add	r3, r2
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]
            return output_index;
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	e0bf      	b.n	80042d8 <MicroVsnprintf+0x298>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	18d0      	adds	r0, r2, r3
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	1d1a      	adds	r2, r3, #4
 8004162:	603a      	str	r2, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4619      	mov	r1, r3
 8004168:	f7ff ff36 	bl	8003fd8 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 800416c:	4602      	mov	r2, r0
          output_index +=
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	4413      	add	r3, r2
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	3301      	adds	r3, #1
 8004178:	623b      	str	r3, [r7, #32]
          break;
 800417a:	e0a3      	b.n	80042c4 <MicroVsnprintf+0x284>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b09      	cmp	r3, #9
 8004184:	dc09      	bgt.n	800419a <MicroVsnprintf+0x15a>
            output[output_index++] = '\0';
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	627a      	str	r2, [r7, #36]	; 0x24
 800418c:	461a      	mov	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4413      	add	r3, r2
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
            return output_index;
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	e09e      	b.n	80042d8 <MicroVsnprintf+0x298>
          }
          output[output_index++] = '0';
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	627a      	str	r2, [r7, #36]	; 0x24
 80041a0:	461a      	mov	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4413      	add	r3, r2
 80041a6:	2230      	movs	r2, #48	; 0x30
 80041a8:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	627a      	str	r2, [r7, #36]	; 0x24
 80041b0:	461a      	mov	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4413      	add	r3, r2
 80041b6:	2278      	movs	r2, #120	; 0x78
 80041b8:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	18d0      	adds	r0, r2, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	1d1a      	adds	r2, r3, #4
 80041c4:	603a      	str	r2, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4619      	mov	r1, r3
 80041ca:	f7ff ff16 	bl	8003ffa <_ZN12_GLOBAL__N_19FormatHexEPcm>
 80041ce:	4602      	mov	r2, r0
          output_index +=
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	4413      	add	r3, r2
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	3301      	adds	r3, #1
 80041da:	623b      	str	r3, [r7, #32]
          break;
 80041dc:	e072      	b.n	80042c4 <MicroVsnprintf+0x284>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	ee07 3a90 	vmov	s15, r3
 80041e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041ec:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 80041f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f8:	d509      	bpl.n	800420e <MicroVsnprintf+0x1ce>
            output[output_index++] = '\0';
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	627a      	str	r2, [r7, #36]	; 0x24
 8004200:	461a      	mov	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4413      	add	r3, r2
 8004206:	2200      	movs	r2, #0
 8004208:	701a      	strb	r2, [r3, #0]
            return output_index;
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	e064      	b.n	80042d8 <MicroVsnprintf+0x298>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	18d4      	adds	r4, r2, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	3307      	adds	r3, #7
 8004218:	f023 0307 	bic.w	r3, r3, #7
 800421c:	f103 0208 	add.w	r2, r3, #8
 8004220:	603a      	str	r2, [r7, #0]
 8004222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004226:	4610      	mov	r0, r2
 8004228:	4619      	mov	r1, r3
 800422a:	f7fc f841 	bl	80002b0 <__aeabi_d2f>
 800422e:	4603      	mov	r3, r0
 8004230:	ee00 3a10 	vmov	s0, r3
 8004234:	4620      	mov	r0, r4
 8004236:	f7ff fef1 	bl	800401c <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 800423a:	4602      	mov	r2, r0
          output_index +=
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	4413      	add	r3, r2
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	3301      	adds	r3, #1
 8004246:	623b      	str	r3, [r7, #32]
          break;
 8004248:	e03c      	b.n	80042c4 <MicroVsnprintf+0x284>
        case '%':
          output[output_index++] = *current++;
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	623a      	str	r2, [r7, #32]
 8004250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004252:	1c51      	adds	r1, r2, #1
 8004254:	6279      	str	r1, [r7, #36]	; 0x24
 8004256:	4611      	mov	r1, r2
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	440a      	add	r2, r1
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	7013      	strb	r3, [r2, #0]
          break;
 8004260:	e030      	b.n	80042c4 <MicroVsnprintf+0x284>
        case 's':
          char* string = va_arg(args, char*);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	1d1a      	adds	r2, r3, #4
 8004266:	603a      	str	r2, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	4413      	add	r3, r2
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	429a      	cmp	r2, r3
 800427a:	dd14      	ble.n	80042a6 <MicroVsnprintf+0x266>
                 string[string_idx] != '\0') {
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4413      	add	r3, r2
 8004282:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00e      	beq.n	80042a6 <MicroVsnprintf+0x266>
            output[output_index++] = string[string_idx++];
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	61fa      	str	r2, [r7, #28]
 800428e:	461a      	mov	r2, r3
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	441a      	add	r2, r3
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	1c59      	adds	r1, r3, #1
 8004298:	6279      	str	r1, [r7, #36]	; 0x24
 800429a:	4619      	mov	r1, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	440b      	add	r3, r1
 80042a0:	7812      	ldrb	r2, [r2, #0]
 80042a2:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 80042a4:	e7e4      	b.n	8004270 <MicroVsnprintf+0x230>
          }
          current++;
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	3301      	adds	r3, #1
 80042aa:	623b      	str	r3, [r7, #32]
 80042ac:	e6d6      	b.n	800405c <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	623a      	str	r2, [r7, #32]
 80042b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b6:	1c51      	adds	r1, r2, #1
 80042b8:	6279      	str	r1, [r7, #36]	; 0x24
 80042ba:	4611      	mov	r1, r2
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	440a      	add	r2, r1
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 80042c4:	e6ca      	b.n	800405c <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	627a      	str	r2, [r7, #36]	; 0x24
 80042cc:	461a      	mov	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4413      	add	r3, r2
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
  return output_index;
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042d8:	4618      	mov	r0, r3
 80042da:	372c      	adds	r7, #44	; 0x2c
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd90      	pop	{r4, r7, pc}

080042e0 <_ZdlPvj>:
 80042e0:	f000 b812 	b.w	8004308 <_ZdlPv>

080042e4 <__cxa_guard_acquire>:
 80042e4:	6803      	ldr	r3, [r0, #0]
 80042e6:	07db      	lsls	r3, r3, #31
 80042e8:	d406      	bmi.n	80042f8 <__cxa_guard_acquire+0x14>
 80042ea:	7843      	ldrb	r3, [r0, #1]
 80042ec:	b103      	cbz	r3, 80042f0 <__cxa_guard_acquire+0xc>
 80042ee:	deff      	udf	#255	; 0xff
 80042f0:	2301      	movs	r3, #1
 80042f2:	7043      	strb	r3, [r0, #1]
 80042f4:	4618      	mov	r0, r3
 80042f6:	4770      	bx	lr
 80042f8:	2000      	movs	r0, #0
 80042fa:	4770      	bx	lr

080042fc <__cxa_guard_release>:
 80042fc:	2301      	movs	r3, #1
 80042fe:	6003      	str	r3, [r0, #0]
 8004300:	4770      	bx	lr

08004302 <__cxa_pure_virtual>:
 8004302:	b508      	push	{r3, lr}
 8004304:	f000 f80e 	bl	8004324 <_ZSt9terminatev>

08004308 <_ZdlPv>:
 8004308:	f000 b8f2 	b.w	80044f0 <free>

0800430c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800430c:	b508      	push	{r3, lr}
 800430e:	4780      	blx	r0
 8004310:	f000 f80d 	bl	800432e <abort>

08004314 <_ZSt13get_terminatev>:
 8004314:	4b02      	ldr	r3, [pc, #8]	; (8004320 <_ZSt13get_terminatev+0xc>)
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	f3bf 8f5b 	dmb	ish
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000010 	.word	0x20000010

08004324 <_ZSt9terminatev>:
 8004324:	b508      	push	{r3, lr}
 8004326:	f7ff fff5 	bl	8004314 <_ZSt13get_terminatev>
 800432a:	f7ff ffef 	bl	800430c <_ZN10__cxxabiv111__terminateEPFvvE>

0800432e <abort>:
 800432e:	b508      	push	{r3, lr}
 8004330:	2006      	movs	r0, #6
 8004332:	f000 fcf3 	bl	8004d1c <raise>
 8004336:	2001      	movs	r0, #1
 8004338:	f7fd fa30 	bl	800179c <_exit>

0800433c <__assert_func>:
 800433c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800433e:	4614      	mov	r4, r2
 8004340:	461a      	mov	r2, r3
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <__assert_func+0x2c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4605      	mov	r5, r0
 8004348:	68d8      	ldr	r0, [r3, #12]
 800434a:	b14c      	cbz	r4, 8004360 <__assert_func+0x24>
 800434c:	4b07      	ldr	r3, [pc, #28]	; (800436c <__assert_func+0x30>)
 800434e:	9100      	str	r1, [sp, #0]
 8004350:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004354:	4906      	ldr	r1, [pc, #24]	; (8004370 <__assert_func+0x34>)
 8004356:	462b      	mov	r3, r5
 8004358:	f000 f81a 	bl	8004390 <fiprintf>
 800435c:	f7ff ffe7 	bl	800432e <abort>
 8004360:	4b04      	ldr	r3, [pc, #16]	; (8004374 <__assert_func+0x38>)
 8004362:	461c      	mov	r4, r3
 8004364:	e7f3      	b.n	800434e <__assert_func+0x12>
 8004366:	bf00      	nop
 8004368:	20000014 	.word	0x20000014
 800436c:	080110e8 	.word	0x080110e8
 8004370:	080110f5 	.word	0x080110f5
 8004374:	08011123 	.word	0x08011123

08004378 <atexit>:
 8004378:	2300      	movs	r3, #0
 800437a:	4601      	mov	r1, r0
 800437c:	461a      	mov	r2, r3
 800437e:	4618      	mov	r0, r3
 8004380:	f000 bda8 	b.w	8004ed4 <__register_exitproc>

08004384 <__errno>:
 8004384:	4b01      	ldr	r3, [pc, #4]	; (800438c <__errno+0x8>)
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	20000014 	.word	0x20000014

08004390 <fiprintf>:
 8004390:	b40e      	push	{r1, r2, r3}
 8004392:	b503      	push	{r0, r1, lr}
 8004394:	4601      	mov	r1, r0
 8004396:	ab03      	add	r3, sp, #12
 8004398:	4805      	ldr	r0, [pc, #20]	; (80043b0 <fiprintf+0x20>)
 800439a:	f853 2b04 	ldr.w	r2, [r3], #4
 800439e:	6800      	ldr	r0, [r0, #0]
 80043a0:	9301      	str	r3, [sp, #4]
 80043a2:	f000 f9bf 	bl	8004724 <_vfiprintf_r>
 80043a6:	b002      	add	sp, #8
 80043a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043ac:	b003      	add	sp, #12
 80043ae:	4770      	bx	lr
 80043b0:	20000014 	.word	0x20000014

080043b4 <_fputs_r>:
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	460e      	mov	r6, r1
 80043b8:	4614      	mov	r4, r2
 80043ba:	4605      	mov	r5, r0
 80043bc:	b118      	cbz	r0, 80043c6 <_fputs_r+0x12>
 80043be:	6983      	ldr	r3, [r0, #24]
 80043c0:	b90b      	cbnz	r3, 80043c6 <_fputs_r+0x12>
 80043c2:	f000 ff03 	bl	80051cc <__sinit>
 80043c6:	4b2b      	ldr	r3, [pc, #172]	; (8004474 <_fputs_r+0xc0>)
 80043c8:	429c      	cmp	r4, r3
 80043ca:	d11e      	bne.n	800440a <_fputs_r+0x56>
 80043cc:	686c      	ldr	r4, [r5, #4]
 80043ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043d0:	07da      	lsls	r2, r3, #31
 80043d2:	d405      	bmi.n	80043e0 <_fputs_r+0x2c>
 80043d4:	89a3      	ldrh	r3, [r4, #12]
 80043d6:	059b      	lsls	r3, r3, #22
 80043d8:	d402      	bmi.n	80043e0 <_fputs_r+0x2c>
 80043da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043dc:	f000 f87d 	bl	80044da <__retarget_lock_acquire_recursive>
 80043e0:	89a3      	ldrh	r3, [r4, #12]
 80043e2:	0718      	lsls	r0, r3, #28
 80043e4:	d51b      	bpl.n	800441e <_fputs_r+0x6a>
 80043e6:	6923      	ldr	r3, [r4, #16]
 80043e8:	b1cb      	cbz	r3, 800441e <_fputs_r+0x6a>
 80043ea:	3e01      	subs	r6, #1
 80043ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80043f0:	bb39      	cbnz	r1, 8004442 <_fputs_r+0x8e>
 80043f2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80043f4:	f015 0501 	ands.w	r5, r5, #1
 80043f8:	d139      	bne.n	800446e <_fputs_r+0xba>
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	0599      	lsls	r1, r3, #22
 80043fe:	d402      	bmi.n	8004406 <_fputs_r+0x52>
 8004400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004402:	f000 f86c 	bl	80044de <__retarget_lock_release_recursive>
 8004406:	4628      	mov	r0, r5
 8004408:	bd70      	pop	{r4, r5, r6, pc}
 800440a:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <_fputs_r+0xc4>)
 800440c:	429c      	cmp	r4, r3
 800440e:	d101      	bne.n	8004414 <_fputs_r+0x60>
 8004410:	68ac      	ldr	r4, [r5, #8]
 8004412:	e7dc      	b.n	80043ce <_fputs_r+0x1a>
 8004414:	4b19      	ldr	r3, [pc, #100]	; (800447c <_fputs_r+0xc8>)
 8004416:	429c      	cmp	r4, r3
 8004418:	bf08      	it	eq
 800441a:	68ec      	ldreq	r4, [r5, #12]
 800441c:	e7d7      	b.n	80043ce <_fputs_r+0x1a>
 800441e:	4621      	mov	r1, r4
 8004420:	4628      	mov	r0, r5
 8004422:	f000 fce9 	bl	8004df8 <__swsetup_r>
 8004426:	2800      	cmp	r0, #0
 8004428:	d0df      	beq.n	80043ea <_fputs_r+0x36>
 800442a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800442c:	07da      	lsls	r2, r3, #31
 800442e:	d405      	bmi.n	800443c <_fputs_r+0x88>
 8004430:	89a3      	ldrh	r3, [r4, #12]
 8004432:	059b      	lsls	r3, r3, #22
 8004434:	d402      	bmi.n	800443c <_fputs_r+0x88>
 8004436:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004438:	f000 f851 	bl	80044de <__retarget_lock_release_recursive>
 800443c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004440:	e7e1      	b.n	8004406 <_fputs_r+0x52>
 8004442:	68a3      	ldr	r3, [r4, #8]
 8004444:	3b01      	subs	r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	60a3      	str	r3, [r4, #8]
 800444a:	da04      	bge.n	8004456 <_fputs_r+0xa2>
 800444c:	69a2      	ldr	r2, [r4, #24]
 800444e:	4293      	cmp	r3, r2
 8004450:	db06      	blt.n	8004460 <_fputs_r+0xac>
 8004452:	290a      	cmp	r1, #10
 8004454:	d004      	beq.n	8004460 <_fputs_r+0xac>
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	6022      	str	r2, [r4, #0]
 800445c:	7019      	strb	r1, [r3, #0]
 800445e:	e7c5      	b.n	80043ec <_fputs_r+0x38>
 8004460:	4622      	mov	r2, r4
 8004462:	4628      	mov	r0, r5
 8004464:	f000 fc76 	bl	8004d54 <__swbuf_r>
 8004468:	3001      	adds	r0, #1
 800446a:	d1bf      	bne.n	80043ec <_fputs_r+0x38>
 800446c:	e7dd      	b.n	800442a <_fputs_r+0x76>
 800446e:	460d      	mov	r5, r1
 8004470:	e7c9      	b.n	8004406 <_fputs_r+0x52>
 8004472:	bf00      	nop
 8004474:	0801117c 	.word	0x0801117c
 8004478:	0801119c 	.word	0x0801119c
 800447c:	0801115c 	.word	0x0801115c

08004480 <fputs>:
 8004480:	4b02      	ldr	r3, [pc, #8]	; (800448c <fputs+0xc>)
 8004482:	460a      	mov	r2, r1
 8004484:	4601      	mov	r1, r0
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	f7ff bf94 	b.w	80043b4 <_fputs_r>
 800448c:	20000014 	.word	0x20000014

08004490 <__libc_init_array>:
 8004490:	b570      	push	{r4, r5, r6, lr}
 8004492:	4d0d      	ldr	r5, [pc, #52]	; (80044c8 <__libc_init_array+0x38>)
 8004494:	4c0d      	ldr	r4, [pc, #52]	; (80044cc <__libc_init_array+0x3c>)
 8004496:	1b64      	subs	r4, r4, r5
 8004498:	10a4      	asrs	r4, r4, #2
 800449a:	2600      	movs	r6, #0
 800449c:	42a6      	cmp	r6, r4
 800449e:	d109      	bne.n	80044b4 <__libc_init_array+0x24>
 80044a0:	4d0b      	ldr	r5, [pc, #44]	; (80044d0 <__libc_init_array+0x40>)
 80044a2:	4c0c      	ldr	r4, [pc, #48]	; (80044d4 <__libc_init_array+0x44>)
 80044a4:	f001 f84c 	bl	8005540 <_init>
 80044a8:	1b64      	subs	r4, r4, r5
 80044aa:	10a4      	asrs	r4, r4, #2
 80044ac:	2600      	movs	r6, #0
 80044ae:	42a6      	cmp	r6, r4
 80044b0:	d105      	bne.n	80044be <__libc_init_array+0x2e>
 80044b2:	bd70      	pop	{r4, r5, r6, pc}
 80044b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b8:	4798      	blx	r3
 80044ba:	3601      	adds	r6, #1
 80044bc:	e7ee      	b.n	800449c <__libc_init_array+0xc>
 80044be:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c2:	4798      	blx	r3
 80044c4:	3601      	adds	r6, #1
 80044c6:	e7f2      	b.n	80044ae <__libc_init_array+0x1e>
 80044c8:	080111c4 	.word	0x080111c4
 80044cc:	080111c4 	.word	0x080111c4
 80044d0:	080111c4 	.word	0x080111c4
 80044d4:	080111c8 	.word	0x080111c8

080044d8 <__retarget_lock_init_recursive>:
 80044d8:	4770      	bx	lr

080044da <__retarget_lock_acquire_recursive>:
 80044da:	4770      	bx	lr

080044dc <__retarget_lock_release>:
 80044dc:	4770      	bx	lr

080044de <__retarget_lock_release_recursive>:
 80044de:	4770      	bx	lr

080044e0 <malloc>:
 80044e0:	4b02      	ldr	r3, [pc, #8]	; (80044ec <malloc+0xc>)
 80044e2:	4601      	mov	r1, r0
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	f000 b87f 	b.w	80045e8 <_malloc_r>
 80044ea:	bf00      	nop
 80044ec:	20000014 	.word	0x20000014

080044f0 <free>:
 80044f0:	4b02      	ldr	r3, [pc, #8]	; (80044fc <free+0xc>)
 80044f2:	4601      	mov	r1, r0
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	f000 b80b 	b.w	8004510 <_free_r>
 80044fa:	bf00      	nop
 80044fc:	20000014 	.word	0x20000014

08004500 <memset>:
 8004500:	4402      	add	r2, r0
 8004502:	4603      	mov	r3, r0
 8004504:	4293      	cmp	r3, r2
 8004506:	d100      	bne.n	800450a <memset+0xa>
 8004508:	4770      	bx	lr
 800450a:	f803 1b01 	strb.w	r1, [r3], #1
 800450e:	e7f9      	b.n	8004504 <memset+0x4>

08004510 <_free_r>:
 8004510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004512:	2900      	cmp	r1, #0
 8004514:	d044      	beq.n	80045a0 <_free_r+0x90>
 8004516:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800451a:	9001      	str	r0, [sp, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f1a1 0404 	sub.w	r4, r1, #4
 8004522:	bfb8      	it	lt
 8004524:	18e4      	addlt	r4, r4, r3
 8004526:	f000 ff53 	bl	80053d0 <__malloc_lock>
 800452a:	4a1e      	ldr	r2, [pc, #120]	; (80045a4 <_free_r+0x94>)
 800452c:	9801      	ldr	r0, [sp, #4]
 800452e:	6813      	ldr	r3, [r2, #0]
 8004530:	b933      	cbnz	r3, 8004540 <_free_r+0x30>
 8004532:	6063      	str	r3, [r4, #4]
 8004534:	6014      	str	r4, [r2, #0]
 8004536:	b003      	add	sp, #12
 8004538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800453c:	f000 bf4e 	b.w	80053dc <__malloc_unlock>
 8004540:	42a3      	cmp	r3, r4
 8004542:	d908      	bls.n	8004556 <_free_r+0x46>
 8004544:	6825      	ldr	r5, [r4, #0]
 8004546:	1961      	adds	r1, r4, r5
 8004548:	428b      	cmp	r3, r1
 800454a:	bf01      	itttt	eq
 800454c:	6819      	ldreq	r1, [r3, #0]
 800454e:	685b      	ldreq	r3, [r3, #4]
 8004550:	1949      	addeq	r1, r1, r5
 8004552:	6021      	streq	r1, [r4, #0]
 8004554:	e7ed      	b.n	8004532 <_free_r+0x22>
 8004556:	461a      	mov	r2, r3
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	b10b      	cbz	r3, 8004560 <_free_r+0x50>
 800455c:	42a3      	cmp	r3, r4
 800455e:	d9fa      	bls.n	8004556 <_free_r+0x46>
 8004560:	6811      	ldr	r1, [r2, #0]
 8004562:	1855      	adds	r5, r2, r1
 8004564:	42a5      	cmp	r5, r4
 8004566:	d10b      	bne.n	8004580 <_free_r+0x70>
 8004568:	6824      	ldr	r4, [r4, #0]
 800456a:	4421      	add	r1, r4
 800456c:	1854      	adds	r4, r2, r1
 800456e:	42a3      	cmp	r3, r4
 8004570:	6011      	str	r1, [r2, #0]
 8004572:	d1e0      	bne.n	8004536 <_free_r+0x26>
 8004574:	681c      	ldr	r4, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	6053      	str	r3, [r2, #4]
 800457a:	4421      	add	r1, r4
 800457c:	6011      	str	r1, [r2, #0]
 800457e:	e7da      	b.n	8004536 <_free_r+0x26>
 8004580:	d902      	bls.n	8004588 <_free_r+0x78>
 8004582:	230c      	movs	r3, #12
 8004584:	6003      	str	r3, [r0, #0]
 8004586:	e7d6      	b.n	8004536 <_free_r+0x26>
 8004588:	6825      	ldr	r5, [r4, #0]
 800458a:	1961      	adds	r1, r4, r5
 800458c:	428b      	cmp	r3, r1
 800458e:	bf04      	itt	eq
 8004590:	6819      	ldreq	r1, [r3, #0]
 8004592:	685b      	ldreq	r3, [r3, #4]
 8004594:	6063      	str	r3, [r4, #4]
 8004596:	bf04      	itt	eq
 8004598:	1949      	addeq	r1, r1, r5
 800459a:	6021      	streq	r1, [r4, #0]
 800459c:	6054      	str	r4, [r2, #4]
 800459e:	e7ca      	b.n	8004536 <_free_r+0x26>
 80045a0:	b003      	add	sp, #12
 80045a2:	bd30      	pop	{r4, r5, pc}
 80045a4:	2000015c 	.word	0x2000015c

080045a8 <sbrk_aligned>:
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	4e0e      	ldr	r6, [pc, #56]	; (80045e4 <sbrk_aligned+0x3c>)
 80045ac:	460c      	mov	r4, r1
 80045ae:	6831      	ldr	r1, [r6, #0]
 80045b0:	4605      	mov	r5, r0
 80045b2:	b911      	cbnz	r1, 80045ba <sbrk_aligned+0x12>
 80045b4:	f000 fb7a 	bl	8004cac <_sbrk_r>
 80045b8:	6030      	str	r0, [r6, #0]
 80045ba:	4621      	mov	r1, r4
 80045bc:	4628      	mov	r0, r5
 80045be:	f000 fb75 	bl	8004cac <_sbrk_r>
 80045c2:	1c43      	adds	r3, r0, #1
 80045c4:	d00a      	beq.n	80045dc <sbrk_aligned+0x34>
 80045c6:	1cc4      	adds	r4, r0, #3
 80045c8:	f024 0403 	bic.w	r4, r4, #3
 80045cc:	42a0      	cmp	r0, r4
 80045ce:	d007      	beq.n	80045e0 <sbrk_aligned+0x38>
 80045d0:	1a21      	subs	r1, r4, r0
 80045d2:	4628      	mov	r0, r5
 80045d4:	f000 fb6a 	bl	8004cac <_sbrk_r>
 80045d8:	3001      	adds	r0, #1
 80045da:	d101      	bne.n	80045e0 <sbrk_aligned+0x38>
 80045dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80045e0:	4620      	mov	r0, r4
 80045e2:	bd70      	pop	{r4, r5, r6, pc}
 80045e4:	20000160 	.word	0x20000160

080045e8 <_malloc_r>:
 80045e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ec:	1ccd      	adds	r5, r1, #3
 80045ee:	f025 0503 	bic.w	r5, r5, #3
 80045f2:	3508      	adds	r5, #8
 80045f4:	2d0c      	cmp	r5, #12
 80045f6:	bf38      	it	cc
 80045f8:	250c      	movcc	r5, #12
 80045fa:	2d00      	cmp	r5, #0
 80045fc:	4607      	mov	r7, r0
 80045fe:	db01      	blt.n	8004604 <_malloc_r+0x1c>
 8004600:	42a9      	cmp	r1, r5
 8004602:	d905      	bls.n	8004610 <_malloc_r+0x28>
 8004604:	230c      	movs	r3, #12
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	2600      	movs	r6, #0
 800460a:	4630      	mov	r0, r6
 800460c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004610:	4e2e      	ldr	r6, [pc, #184]	; (80046cc <_malloc_r+0xe4>)
 8004612:	f000 fedd 	bl	80053d0 <__malloc_lock>
 8004616:	6833      	ldr	r3, [r6, #0]
 8004618:	461c      	mov	r4, r3
 800461a:	bb34      	cbnz	r4, 800466a <_malloc_r+0x82>
 800461c:	4629      	mov	r1, r5
 800461e:	4638      	mov	r0, r7
 8004620:	f7ff ffc2 	bl	80045a8 <sbrk_aligned>
 8004624:	1c43      	adds	r3, r0, #1
 8004626:	4604      	mov	r4, r0
 8004628:	d14d      	bne.n	80046c6 <_malloc_r+0xde>
 800462a:	6834      	ldr	r4, [r6, #0]
 800462c:	4626      	mov	r6, r4
 800462e:	2e00      	cmp	r6, #0
 8004630:	d140      	bne.n	80046b4 <_malloc_r+0xcc>
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	4631      	mov	r1, r6
 8004636:	4638      	mov	r0, r7
 8004638:	eb04 0803 	add.w	r8, r4, r3
 800463c:	f000 fb36 	bl	8004cac <_sbrk_r>
 8004640:	4580      	cmp	r8, r0
 8004642:	d13a      	bne.n	80046ba <_malloc_r+0xd2>
 8004644:	6821      	ldr	r1, [r4, #0]
 8004646:	3503      	adds	r5, #3
 8004648:	1a6d      	subs	r5, r5, r1
 800464a:	f025 0503 	bic.w	r5, r5, #3
 800464e:	3508      	adds	r5, #8
 8004650:	2d0c      	cmp	r5, #12
 8004652:	bf38      	it	cc
 8004654:	250c      	movcc	r5, #12
 8004656:	4629      	mov	r1, r5
 8004658:	4638      	mov	r0, r7
 800465a:	f7ff ffa5 	bl	80045a8 <sbrk_aligned>
 800465e:	3001      	adds	r0, #1
 8004660:	d02b      	beq.n	80046ba <_malloc_r+0xd2>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	442b      	add	r3, r5
 8004666:	6023      	str	r3, [r4, #0]
 8004668:	e00e      	b.n	8004688 <_malloc_r+0xa0>
 800466a:	6822      	ldr	r2, [r4, #0]
 800466c:	1b52      	subs	r2, r2, r5
 800466e:	d41e      	bmi.n	80046ae <_malloc_r+0xc6>
 8004670:	2a0b      	cmp	r2, #11
 8004672:	d916      	bls.n	80046a2 <_malloc_r+0xba>
 8004674:	1961      	adds	r1, r4, r5
 8004676:	42a3      	cmp	r3, r4
 8004678:	6025      	str	r5, [r4, #0]
 800467a:	bf18      	it	ne
 800467c:	6059      	strne	r1, [r3, #4]
 800467e:	6863      	ldr	r3, [r4, #4]
 8004680:	bf08      	it	eq
 8004682:	6031      	streq	r1, [r6, #0]
 8004684:	5162      	str	r2, [r4, r5]
 8004686:	604b      	str	r3, [r1, #4]
 8004688:	4638      	mov	r0, r7
 800468a:	f104 060b 	add.w	r6, r4, #11
 800468e:	f000 fea5 	bl	80053dc <__malloc_unlock>
 8004692:	f026 0607 	bic.w	r6, r6, #7
 8004696:	1d23      	adds	r3, r4, #4
 8004698:	1af2      	subs	r2, r6, r3
 800469a:	d0b6      	beq.n	800460a <_malloc_r+0x22>
 800469c:	1b9b      	subs	r3, r3, r6
 800469e:	50a3      	str	r3, [r4, r2]
 80046a0:	e7b3      	b.n	800460a <_malloc_r+0x22>
 80046a2:	6862      	ldr	r2, [r4, #4]
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	bf0c      	ite	eq
 80046a8:	6032      	streq	r2, [r6, #0]
 80046aa:	605a      	strne	r2, [r3, #4]
 80046ac:	e7ec      	b.n	8004688 <_malloc_r+0xa0>
 80046ae:	4623      	mov	r3, r4
 80046b0:	6864      	ldr	r4, [r4, #4]
 80046b2:	e7b2      	b.n	800461a <_malloc_r+0x32>
 80046b4:	4634      	mov	r4, r6
 80046b6:	6876      	ldr	r6, [r6, #4]
 80046b8:	e7b9      	b.n	800462e <_malloc_r+0x46>
 80046ba:	230c      	movs	r3, #12
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	4638      	mov	r0, r7
 80046c0:	f000 fe8c 	bl	80053dc <__malloc_unlock>
 80046c4:	e7a1      	b.n	800460a <_malloc_r+0x22>
 80046c6:	6025      	str	r5, [r4, #0]
 80046c8:	e7de      	b.n	8004688 <_malloc_r+0xa0>
 80046ca:	bf00      	nop
 80046cc:	2000015c 	.word	0x2000015c

080046d0 <__sfputc_r>:
 80046d0:	6893      	ldr	r3, [r2, #8]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	b410      	push	{r4}
 80046d8:	6093      	str	r3, [r2, #8]
 80046da:	da08      	bge.n	80046ee <__sfputc_r+0x1e>
 80046dc:	6994      	ldr	r4, [r2, #24]
 80046de:	42a3      	cmp	r3, r4
 80046e0:	db01      	blt.n	80046e6 <__sfputc_r+0x16>
 80046e2:	290a      	cmp	r1, #10
 80046e4:	d103      	bne.n	80046ee <__sfputc_r+0x1e>
 80046e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046ea:	f000 bb33 	b.w	8004d54 <__swbuf_r>
 80046ee:	6813      	ldr	r3, [r2, #0]
 80046f0:	1c58      	adds	r0, r3, #1
 80046f2:	6010      	str	r0, [r2, #0]
 80046f4:	7019      	strb	r1, [r3, #0]
 80046f6:	4608      	mov	r0, r1
 80046f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <__sfputs_r>:
 80046fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004700:	4606      	mov	r6, r0
 8004702:	460f      	mov	r7, r1
 8004704:	4614      	mov	r4, r2
 8004706:	18d5      	adds	r5, r2, r3
 8004708:	42ac      	cmp	r4, r5
 800470a:	d101      	bne.n	8004710 <__sfputs_r+0x12>
 800470c:	2000      	movs	r0, #0
 800470e:	e007      	b.n	8004720 <__sfputs_r+0x22>
 8004710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004714:	463a      	mov	r2, r7
 8004716:	4630      	mov	r0, r6
 8004718:	f7ff ffda 	bl	80046d0 <__sfputc_r>
 800471c:	1c43      	adds	r3, r0, #1
 800471e:	d1f3      	bne.n	8004708 <__sfputs_r+0xa>
 8004720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004724 <_vfiprintf_r>:
 8004724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004728:	460d      	mov	r5, r1
 800472a:	b09d      	sub	sp, #116	; 0x74
 800472c:	4614      	mov	r4, r2
 800472e:	4698      	mov	r8, r3
 8004730:	4606      	mov	r6, r0
 8004732:	b118      	cbz	r0, 800473c <_vfiprintf_r+0x18>
 8004734:	6983      	ldr	r3, [r0, #24]
 8004736:	b90b      	cbnz	r3, 800473c <_vfiprintf_r+0x18>
 8004738:	f000 fd48 	bl	80051cc <__sinit>
 800473c:	4b89      	ldr	r3, [pc, #548]	; (8004964 <_vfiprintf_r+0x240>)
 800473e:	429d      	cmp	r5, r3
 8004740:	d11b      	bne.n	800477a <_vfiprintf_r+0x56>
 8004742:	6875      	ldr	r5, [r6, #4]
 8004744:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004746:	07d9      	lsls	r1, r3, #31
 8004748:	d405      	bmi.n	8004756 <_vfiprintf_r+0x32>
 800474a:	89ab      	ldrh	r3, [r5, #12]
 800474c:	059a      	lsls	r2, r3, #22
 800474e:	d402      	bmi.n	8004756 <_vfiprintf_r+0x32>
 8004750:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004752:	f7ff fec2 	bl	80044da <__retarget_lock_acquire_recursive>
 8004756:	89ab      	ldrh	r3, [r5, #12]
 8004758:	071b      	lsls	r3, r3, #28
 800475a:	d501      	bpl.n	8004760 <_vfiprintf_r+0x3c>
 800475c:	692b      	ldr	r3, [r5, #16]
 800475e:	b9eb      	cbnz	r3, 800479c <_vfiprintf_r+0x78>
 8004760:	4629      	mov	r1, r5
 8004762:	4630      	mov	r0, r6
 8004764:	f000 fb48 	bl	8004df8 <__swsetup_r>
 8004768:	b1c0      	cbz	r0, 800479c <_vfiprintf_r+0x78>
 800476a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800476c:	07dc      	lsls	r4, r3, #31
 800476e:	d50e      	bpl.n	800478e <_vfiprintf_r+0x6a>
 8004770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004774:	b01d      	add	sp, #116	; 0x74
 8004776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800477a:	4b7b      	ldr	r3, [pc, #492]	; (8004968 <_vfiprintf_r+0x244>)
 800477c:	429d      	cmp	r5, r3
 800477e:	d101      	bne.n	8004784 <_vfiprintf_r+0x60>
 8004780:	68b5      	ldr	r5, [r6, #8]
 8004782:	e7df      	b.n	8004744 <_vfiprintf_r+0x20>
 8004784:	4b79      	ldr	r3, [pc, #484]	; (800496c <_vfiprintf_r+0x248>)
 8004786:	429d      	cmp	r5, r3
 8004788:	bf08      	it	eq
 800478a:	68f5      	ldreq	r5, [r6, #12]
 800478c:	e7da      	b.n	8004744 <_vfiprintf_r+0x20>
 800478e:	89ab      	ldrh	r3, [r5, #12]
 8004790:	0598      	lsls	r0, r3, #22
 8004792:	d4ed      	bmi.n	8004770 <_vfiprintf_r+0x4c>
 8004794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004796:	f7ff fea2 	bl	80044de <__retarget_lock_release_recursive>
 800479a:	e7e9      	b.n	8004770 <_vfiprintf_r+0x4c>
 800479c:	2300      	movs	r3, #0
 800479e:	9309      	str	r3, [sp, #36]	; 0x24
 80047a0:	2320      	movs	r3, #32
 80047a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80047aa:	2330      	movs	r3, #48	; 0x30
 80047ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004970 <_vfiprintf_r+0x24c>
 80047b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047b4:	f04f 0901 	mov.w	r9, #1
 80047b8:	4623      	mov	r3, r4
 80047ba:	469a      	mov	sl, r3
 80047bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047c0:	b10a      	cbz	r2, 80047c6 <_vfiprintf_r+0xa2>
 80047c2:	2a25      	cmp	r2, #37	; 0x25
 80047c4:	d1f9      	bne.n	80047ba <_vfiprintf_r+0x96>
 80047c6:	ebba 0b04 	subs.w	fp, sl, r4
 80047ca:	d00b      	beq.n	80047e4 <_vfiprintf_r+0xc0>
 80047cc:	465b      	mov	r3, fp
 80047ce:	4622      	mov	r2, r4
 80047d0:	4629      	mov	r1, r5
 80047d2:	4630      	mov	r0, r6
 80047d4:	f7ff ff93 	bl	80046fe <__sfputs_r>
 80047d8:	3001      	adds	r0, #1
 80047da:	f000 80aa 	beq.w	8004932 <_vfiprintf_r+0x20e>
 80047de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047e0:	445a      	add	r2, fp
 80047e2:	9209      	str	r2, [sp, #36]	; 0x24
 80047e4:	f89a 3000 	ldrb.w	r3, [sl]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80a2 	beq.w	8004932 <_vfiprintf_r+0x20e>
 80047ee:	2300      	movs	r3, #0
 80047f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047f8:	f10a 0a01 	add.w	sl, sl, #1
 80047fc:	9304      	str	r3, [sp, #16]
 80047fe:	9307      	str	r3, [sp, #28]
 8004800:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004804:	931a      	str	r3, [sp, #104]	; 0x68
 8004806:	4654      	mov	r4, sl
 8004808:	2205      	movs	r2, #5
 800480a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800480e:	4858      	ldr	r0, [pc, #352]	; (8004970 <_vfiprintf_r+0x24c>)
 8004810:	f7fb fcfe 	bl	8000210 <memchr>
 8004814:	9a04      	ldr	r2, [sp, #16]
 8004816:	b9d8      	cbnz	r0, 8004850 <_vfiprintf_r+0x12c>
 8004818:	06d1      	lsls	r1, r2, #27
 800481a:	bf44      	itt	mi
 800481c:	2320      	movmi	r3, #32
 800481e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004822:	0713      	lsls	r3, r2, #28
 8004824:	bf44      	itt	mi
 8004826:	232b      	movmi	r3, #43	; 0x2b
 8004828:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800482c:	f89a 3000 	ldrb.w	r3, [sl]
 8004830:	2b2a      	cmp	r3, #42	; 0x2a
 8004832:	d015      	beq.n	8004860 <_vfiprintf_r+0x13c>
 8004834:	9a07      	ldr	r2, [sp, #28]
 8004836:	4654      	mov	r4, sl
 8004838:	2000      	movs	r0, #0
 800483a:	f04f 0c0a 	mov.w	ip, #10
 800483e:	4621      	mov	r1, r4
 8004840:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004844:	3b30      	subs	r3, #48	; 0x30
 8004846:	2b09      	cmp	r3, #9
 8004848:	d94e      	bls.n	80048e8 <_vfiprintf_r+0x1c4>
 800484a:	b1b0      	cbz	r0, 800487a <_vfiprintf_r+0x156>
 800484c:	9207      	str	r2, [sp, #28]
 800484e:	e014      	b.n	800487a <_vfiprintf_r+0x156>
 8004850:	eba0 0308 	sub.w	r3, r0, r8
 8004854:	fa09 f303 	lsl.w	r3, r9, r3
 8004858:	4313      	orrs	r3, r2
 800485a:	9304      	str	r3, [sp, #16]
 800485c:	46a2      	mov	sl, r4
 800485e:	e7d2      	b.n	8004806 <_vfiprintf_r+0xe2>
 8004860:	9b03      	ldr	r3, [sp, #12]
 8004862:	1d19      	adds	r1, r3, #4
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	9103      	str	r1, [sp, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	bfbb      	ittet	lt
 800486c:	425b      	neglt	r3, r3
 800486e:	f042 0202 	orrlt.w	r2, r2, #2
 8004872:	9307      	strge	r3, [sp, #28]
 8004874:	9307      	strlt	r3, [sp, #28]
 8004876:	bfb8      	it	lt
 8004878:	9204      	strlt	r2, [sp, #16]
 800487a:	7823      	ldrb	r3, [r4, #0]
 800487c:	2b2e      	cmp	r3, #46	; 0x2e
 800487e:	d10c      	bne.n	800489a <_vfiprintf_r+0x176>
 8004880:	7863      	ldrb	r3, [r4, #1]
 8004882:	2b2a      	cmp	r3, #42	; 0x2a
 8004884:	d135      	bne.n	80048f2 <_vfiprintf_r+0x1ce>
 8004886:	9b03      	ldr	r3, [sp, #12]
 8004888:	1d1a      	adds	r2, r3, #4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	9203      	str	r2, [sp, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	bfb8      	it	lt
 8004892:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004896:	3402      	adds	r4, #2
 8004898:	9305      	str	r3, [sp, #20]
 800489a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004980 <_vfiprintf_r+0x25c>
 800489e:	7821      	ldrb	r1, [r4, #0]
 80048a0:	2203      	movs	r2, #3
 80048a2:	4650      	mov	r0, sl
 80048a4:	f7fb fcb4 	bl	8000210 <memchr>
 80048a8:	b140      	cbz	r0, 80048bc <_vfiprintf_r+0x198>
 80048aa:	2340      	movs	r3, #64	; 0x40
 80048ac:	eba0 000a 	sub.w	r0, r0, sl
 80048b0:	fa03 f000 	lsl.w	r0, r3, r0
 80048b4:	9b04      	ldr	r3, [sp, #16]
 80048b6:	4303      	orrs	r3, r0
 80048b8:	3401      	adds	r4, #1
 80048ba:	9304      	str	r3, [sp, #16]
 80048bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c0:	482c      	ldr	r0, [pc, #176]	; (8004974 <_vfiprintf_r+0x250>)
 80048c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048c6:	2206      	movs	r2, #6
 80048c8:	f7fb fca2 	bl	8000210 <memchr>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d03f      	beq.n	8004950 <_vfiprintf_r+0x22c>
 80048d0:	4b29      	ldr	r3, [pc, #164]	; (8004978 <_vfiprintf_r+0x254>)
 80048d2:	bb1b      	cbnz	r3, 800491c <_vfiprintf_r+0x1f8>
 80048d4:	9b03      	ldr	r3, [sp, #12]
 80048d6:	3307      	adds	r3, #7
 80048d8:	f023 0307 	bic.w	r3, r3, #7
 80048dc:	3308      	adds	r3, #8
 80048de:	9303      	str	r3, [sp, #12]
 80048e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048e2:	443b      	add	r3, r7
 80048e4:	9309      	str	r3, [sp, #36]	; 0x24
 80048e6:	e767      	b.n	80047b8 <_vfiprintf_r+0x94>
 80048e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80048ec:	460c      	mov	r4, r1
 80048ee:	2001      	movs	r0, #1
 80048f0:	e7a5      	b.n	800483e <_vfiprintf_r+0x11a>
 80048f2:	2300      	movs	r3, #0
 80048f4:	3401      	adds	r4, #1
 80048f6:	9305      	str	r3, [sp, #20]
 80048f8:	4619      	mov	r1, r3
 80048fa:	f04f 0c0a 	mov.w	ip, #10
 80048fe:	4620      	mov	r0, r4
 8004900:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004904:	3a30      	subs	r2, #48	; 0x30
 8004906:	2a09      	cmp	r2, #9
 8004908:	d903      	bls.n	8004912 <_vfiprintf_r+0x1ee>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0c5      	beq.n	800489a <_vfiprintf_r+0x176>
 800490e:	9105      	str	r1, [sp, #20]
 8004910:	e7c3      	b.n	800489a <_vfiprintf_r+0x176>
 8004912:	fb0c 2101 	mla	r1, ip, r1, r2
 8004916:	4604      	mov	r4, r0
 8004918:	2301      	movs	r3, #1
 800491a:	e7f0      	b.n	80048fe <_vfiprintf_r+0x1da>
 800491c:	ab03      	add	r3, sp, #12
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	462a      	mov	r2, r5
 8004922:	4b16      	ldr	r3, [pc, #88]	; (800497c <_vfiprintf_r+0x258>)
 8004924:	a904      	add	r1, sp, #16
 8004926:	4630      	mov	r0, r6
 8004928:	f3af 8000 	nop.w
 800492c:	4607      	mov	r7, r0
 800492e:	1c78      	adds	r0, r7, #1
 8004930:	d1d6      	bne.n	80048e0 <_vfiprintf_r+0x1bc>
 8004932:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004934:	07d9      	lsls	r1, r3, #31
 8004936:	d405      	bmi.n	8004944 <_vfiprintf_r+0x220>
 8004938:	89ab      	ldrh	r3, [r5, #12]
 800493a:	059a      	lsls	r2, r3, #22
 800493c:	d402      	bmi.n	8004944 <_vfiprintf_r+0x220>
 800493e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004940:	f7ff fdcd 	bl	80044de <__retarget_lock_release_recursive>
 8004944:	89ab      	ldrh	r3, [r5, #12]
 8004946:	065b      	lsls	r3, r3, #25
 8004948:	f53f af12 	bmi.w	8004770 <_vfiprintf_r+0x4c>
 800494c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800494e:	e711      	b.n	8004774 <_vfiprintf_r+0x50>
 8004950:	ab03      	add	r3, sp, #12
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	462a      	mov	r2, r5
 8004956:	4b09      	ldr	r3, [pc, #36]	; (800497c <_vfiprintf_r+0x258>)
 8004958:	a904      	add	r1, sp, #16
 800495a:	4630      	mov	r0, r6
 800495c:	f000 f880 	bl	8004a60 <_printf_i>
 8004960:	e7e4      	b.n	800492c <_vfiprintf_r+0x208>
 8004962:	bf00      	nop
 8004964:	0801117c 	.word	0x0801117c
 8004968:	0801119c 	.word	0x0801119c
 800496c:	0801115c 	.word	0x0801115c
 8004970:	08011128 	.word	0x08011128
 8004974:	08011132 	.word	0x08011132
 8004978:	00000000 	.word	0x00000000
 800497c:	080046ff 	.word	0x080046ff
 8004980:	0801112e 	.word	0x0801112e

08004984 <_printf_common>:
 8004984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004988:	4616      	mov	r6, r2
 800498a:	4699      	mov	r9, r3
 800498c:	688a      	ldr	r2, [r1, #8]
 800498e:	690b      	ldr	r3, [r1, #16]
 8004990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004994:	4293      	cmp	r3, r2
 8004996:	bfb8      	it	lt
 8004998:	4613      	movlt	r3, r2
 800499a:	6033      	str	r3, [r6, #0]
 800499c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049a0:	4607      	mov	r7, r0
 80049a2:	460c      	mov	r4, r1
 80049a4:	b10a      	cbz	r2, 80049aa <_printf_common+0x26>
 80049a6:	3301      	adds	r3, #1
 80049a8:	6033      	str	r3, [r6, #0]
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	0699      	lsls	r1, r3, #26
 80049ae:	bf42      	ittt	mi
 80049b0:	6833      	ldrmi	r3, [r6, #0]
 80049b2:	3302      	addmi	r3, #2
 80049b4:	6033      	strmi	r3, [r6, #0]
 80049b6:	6825      	ldr	r5, [r4, #0]
 80049b8:	f015 0506 	ands.w	r5, r5, #6
 80049bc:	d106      	bne.n	80049cc <_printf_common+0x48>
 80049be:	f104 0a19 	add.w	sl, r4, #25
 80049c2:	68e3      	ldr	r3, [r4, #12]
 80049c4:	6832      	ldr	r2, [r6, #0]
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	42ab      	cmp	r3, r5
 80049ca:	dc26      	bgt.n	8004a1a <_printf_common+0x96>
 80049cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049d0:	1e13      	subs	r3, r2, #0
 80049d2:	6822      	ldr	r2, [r4, #0]
 80049d4:	bf18      	it	ne
 80049d6:	2301      	movne	r3, #1
 80049d8:	0692      	lsls	r2, r2, #26
 80049da:	d42b      	bmi.n	8004a34 <_printf_common+0xb0>
 80049dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049e0:	4649      	mov	r1, r9
 80049e2:	4638      	mov	r0, r7
 80049e4:	47c0      	blx	r8
 80049e6:	3001      	adds	r0, #1
 80049e8:	d01e      	beq.n	8004a28 <_printf_common+0xa4>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	68e5      	ldr	r5, [r4, #12]
 80049ee:	6832      	ldr	r2, [r6, #0]
 80049f0:	f003 0306 	and.w	r3, r3, #6
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	bf08      	it	eq
 80049f8:	1aad      	subeq	r5, r5, r2
 80049fa:	68a3      	ldr	r3, [r4, #8]
 80049fc:	6922      	ldr	r2, [r4, #16]
 80049fe:	bf0c      	ite	eq
 8004a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a04:	2500      	movne	r5, #0
 8004a06:	4293      	cmp	r3, r2
 8004a08:	bfc4      	itt	gt
 8004a0a:	1a9b      	subgt	r3, r3, r2
 8004a0c:	18ed      	addgt	r5, r5, r3
 8004a0e:	2600      	movs	r6, #0
 8004a10:	341a      	adds	r4, #26
 8004a12:	42b5      	cmp	r5, r6
 8004a14:	d11a      	bne.n	8004a4c <_printf_common+0xc8>
 8004a16:	2000      	movs	r0, #0
 8004a18:	e008      	b.n	8004a2c <_printf_common+0xa8>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	4652      	mov	r2, sl
 8004a1e:	4649      	mov	r1, r9
 8004a20:	4638      	mov	r0, r7
 8004a22:	47c0      	blx	r8
 8004a24:	3001      	adds	r0, #1
 8004a26:	d103      	bne.n	8004a30 <_printf_common+0xac>
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a30:	3501      	adds	r5, #1
 8004a32:	e7c6      	b.n	80049c2 <_printf_common+0x3e>
 8004a34:	18e1      	adds	r1, r4, r3
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	2030      	movs	r0, #48	; 0x30
 8004a3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a3e:	4422      	add	r2, r4
 8004a40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a48:	3302      	adds	r3, #2
 8004a4a:	e7c7      	b.n	80049dc <_printf_common+0x58>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	4622      	mov	r2, r4
 8004a50:	4649      	mov	r1, r9
 8004a52:	4638      	mov	r0, r7
 8004a54:	47c0      	blx	r8
 8004a56:	3001      	adds	r0, #1
 8004a58:	d0e6      	beq.n	8004a28 <_printf_common+0xa4>
 8004a5a:	3601      	adds	r6, #1
 8004a5c:	e7d9      	b.n	8004a12 <_printf_common+0x8e>
	...

08004a60 <_printf_i>:
 8004a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a64:	7e0f      	ldrb	r7, [r1, #24]
 8004a66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a68:	2f78      	cmp	r7, #120	; 0x78
 8004a6a:	4691      	mov	r9, r2
 8004a6c:	4680      	mov	r8, r0
 8004a6e:	460c      	mov	r4, r1
 8004a70:	469a      	mov	sl, r3
 8004a72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a76:	d807      	bhi.n	8004a88 <_printf_i+0x28>
 8004a78:	2f62      	cmp	r7, #98	; 0x62
 8004a7a:	d80a      	bhi.n	8004a92 <_printf_i+0x32>
 8004a7c:	2f00      	cmp	r7, #0
 8004a7e:	f000 80d8 	beq.w	8004c32 <_printf_i+0x1d2>
 8004a82:	2f58      	cmp	r7, #88	; 0x58
 8004a84:	f000 80a3 	beq.w	8004bce <_printf_i+0x16e>
 8004a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a90:	e03a      	b.n	8004b08 <_printf_i+0xa8>
 8004a92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a96:	2b15      	cmp	r3, #21
 8004a98:	d8f6      	bhi.n	8004a88 <_printf_i+0x28>
 8004a9a:	a101      	add	r1, pc, #4	; (adr r1, 8004aa0 <_printf_i+0x40>)
 8004a9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004aa0:	08004af9 	.word	0x08004af9
 8004aa4:	08004b0d 	.word	0x08004b0d
 8004aa8:	08004a89 	.word	0x08004a89
 8004aac:	08004a89 	.word	0x08004a89
 8004ab0:	08004a89 	.word	0x08004a89
 8004ab4:	08004a89 	.word	0x08004a89
 8004ab8:	08004b0d 	.word	0x08004b0d
 8004abc:	08004a89 	.word	0x08004a89
 8004ac0:	08004a89 	.word	0x08004a89
 8004ac4:	08004a89 	.word	0x08004a89
 8004ac8:	08004a89 	.word	0x08004a89
 8004acc:	08004c19 	.word	0x08004c19
 8004ad0:	08004b3d 	.word	0x08004b3d
 8004ad4:	08004bfb 	.word	0x08004bfb
 8004ad8:	08004a89 	.word	0x08004a89
 8004adc:	08004a89 	.word	0x08004a89
 8004ae0:	08004c3b 	.word	0x08004c3b
 8004ae4:	08004a89 	.word	0x08004a89
 8004ae8:	08004b3d 	.word	0x08004b3d
 8004aec:	08004a89 	.word	0x08004a89
 8004af0:	08004a89 	.word	0x08004a89
 8004af4:	08004c03 	.word	0x08004c03
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	1d1a      	adds	r2, r3, #4
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	602a      	str	r2, [r5, #0]
 8004b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0a3      	b.n	8004c54 <_printf_i+0x1f4>
 8004b0c:	6820      	ldr	r0, [r4, #0]
 8004b0e:	6829      	ldr	r1, [r5, #0]
 8004b10:	0606      	lsls	r6, r0, #24
 8004b12:	f101 0304 	add.w	r3, r1, #4
 8004b16:	d50a      	bpl.n	8004b2e <_printf_i+0xce>
 8004b18:	680e      	ldr	r6, [r1, #0]
 8004b1a:	602b      	str	r3, [r5, #0]
 8004b1c:	2e00      	cmp	r6, #0
 8004b1e:	da03      	bge.n	8004b28 <_printf_i+0xc8>
 8004b20:	232d      	movs	r3, #45	; 0x2d
 8004b22:	4276      	negs	r6, r6
 8004b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b28:	485e      	ldr	r0, [pc, #376]	; (8004ca4 <_printf_i+0x244>)
 8004b2a:	230a      	movs	r3, #10
 8004b2c:	e019      	b.n	8004b62 <_printf_i+0x102>
 8004b2e:	680e      	ldr	r6, [r1, #0]
 8004b30:	602b      	str	r3, [r5, #0]
 8004b32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b36:	bf18      	it	ne
 8004b38:	b236      	sxthne	r6, r6
 8004b3a:	e7ef      	b.n	8004b1c <_printf_i+0xbc>
 8004b3c:	682b      	ldr	r3, [r5, #0]
 8004b3e:	6820      	ldr	r0, [r4, #0]
 8004b40:	1d19      	adds	r1, r3, #4
 8004b42:	6029      	str	r1, [r5, #0]
 8004b44:	0601      	lsls	r1, r0, #24
 8004b46:	d501      	bpl.n	8004b4c <_printf_i+0xec>
 8004b48:	681e      	ldr	r6, [r3, #0]
 8004b4a:	e002      	b.n	8004b52 <_printf_i+0xf2>
 8004b4c:	0646      	lsls	r6, r0, #25
 8004b4e:	d5fb      	bpl.n	8004b48 <_printf_i+0xe8>
 8004b50:	881e      	ldrh	r6, [r3, #0]
 8004b52:	4854      	ldr	r0, [pc, #336]	; (8004ca4 <_printf_i+0x244>)
 8004b54:	2f6f      	cmp	r7, #111	; 0x6f
 8004b56:	bf0c      	ite	eq
 8004b58:	2308      	moveq	r3, #8
 8004b5a:	230a      	movne	r3, #10
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b62:	6865      	ldr	r5, [r4, #4]
 8004b64:	60a5      	str	r5, [r4, #8]
 8004b66:	2d00      	cmp	r5, #0
 8004b68:	bfa2      	ittt	ge
 8004b6a:	6821      	ldrge	r1, [r4, #0]
 8004b6c:	f021 0104 	bicge.w	r1, r1, #4
 8004b70:	6021      	strge	r1, [r4, #0]
 8004b72:	b90e      	cbnz	r6, 8004b78 <_printf_i+0x118>
 8004b74:	2d00      	cmp	r5, #0
 8004b76:	d04d      	beq.n	8004c14 <_printf_i+0x1b4>
 8004b78:	4615      	mov	r5, r2
 8004b7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b7e:	fb03 6711 	mls	r7, r3, r1, r6
 8004b82:	5dc7      	ldrb	r7, [r0, r7]
 8004b84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b88:	4637      	mov	r7, r6
 8004b8a:	42bb      	cmp	r3, r7
 8004b8c:	460e      	mov	r6, r1
 8004b8e:	d9f4      	bls.n	8004b7a <_printf_i+0x11a>
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d10b      	bne.n	8004bac <_printf_i+0x14c>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	07de      	lsls	r6, r3, #31
 8004b98:	d508      	bpl.n	8004bac <_printf_i+0x14c>
 8004b9a:	6923      	ldr	r3, [r4, #16]
 8004b9c:	6861      	ldr	r1, [r4, #4]
 8004b9e:	4299      	cmp	r1, r3
 8004ba0:	bfde      	ittt	le
 8004ba2:	2330      	movle	r3, #48	; 0x30
 8004ba4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ba8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004bac:	1b52      	subs	r2, r2, r5
 8004bae:	6122      	str	r2, [r4, #16]
 8004bb0:	f8cd a000 	str.w	sl, [sp]
 8004bb4:	464b      	mov	r3, r9
 8004bb6:	aa03      	add	r2, sp, #12
 8004bb8:	4621      	mov	r1, r4
 8004bba:	4640      	mov	r0, r8
 8004bbc:	f7ff fee2 	bl	8004984 <_printf_common>
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d14c      	bne.n	8004c5e <_printf_i+0x1fe>
 8004bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bc8:	b004      	add	sp, #16
 8004bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bce:	4835      	ldr	r0, [pc, #212]	; (8004ca4 <_printf_i+0x244>)
 8004bd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004bd4:	6829      	ldr	r1, [r5, #0]
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bdc:	6029      	str	r1, [r5, #0]
 8004bde:	061d      	lsls	r5, r3, #24
 8004be0:	d514      	bpl.n	8004c0c <_printf_i+0x1ac>
 8004be2:	07df      	lsls	r7, r3, #31
 8004be4:	bf44      	itt	mi
 8004be6:	f043 0320 	orrmi.w	r3, r3, #32
 8004bea:	6023      	strmi	r3, [r4, #0]
 8004bec:	b91e      	cbnz	r6, 8004bf6 <_printf_i+0x196>
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	f023 0320 	bic.w	r3, r3, #32
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	2310      	movs	r3, #16
 8004bf8:	e7b0      	b.n	8004b5c <_printf_i+0xfc>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	f043 0320 	orr.w	r3, r3, #32
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	2378      	movs	r3, #120	; 0x78
 8004c04:	4828      	ldr	r0, [pc, #160]	; (8004ca8 <_printf_i+0x248>)
 8004c06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c0a:	e7e3      	b.n	8004bd4 <_printf_i+0x174>
 8004c0c:	0659      	lsls	r1, r3, #25
 8004c0e:	bf48      	it	mi
 8004c10:	b2b6      	uxthmi	r6, r6
 8004c12:	e7e6      	b.n	8004be2 <_printf_i+0x182>
 8004c14:	4615      	mov	r5, r2
 8004c16:	e7bb      	b.n	8004b90 <_printf_i+0x130>
 8004c18:	682b      	ldr	r3, [r5, #0]
 8004c1a:	6826      	ldr	r6, [r4, #0]
 8004c1c:	6961      	ldr	r1, [r4, #20]
 8004c1e:	1d18      	adds	r0, r3, #4
 8004c20:	6028      	str	r0, [r5, #0]
 8004c22:	0635      	lsls	r5, r6, #24
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	d501      	bpl.n	8004c2c <_printf_i+0x1cc>
 8004c28:	6019      	str	r1, [r3, #0]
 8004c2a:	e002      	b.n	8004c32 <_printf_i+0x1d2>
 8004c2c:	0670      	lsls	r0, r6, #25
 8004c2e:	d5fb      	bpl.n	8004c28 <_printf_i+0x1c8>
 8004c30:	8019      	strh	r1, [r3, #0]
 8004c32:	2300      	movs	r3, #0
 8004c34:	6123      	str	r3, [r4, #16]
 8004c36:	4615      	mov	r5, r2
 8004c38:	e7ba      	b.n	8004bb0 <_printf_i+0x150>
 8004c3a:	682b      	ldr	r3, [r5, #0]
 8004c3c:	1d1a      	adds	r2, r3, #4
 8004c3e:	602a      	str	r2, [r5, #0]
 8004c40:	681d      	ldr	r5, [r3, #0]
 8004c42:	6862      	ldr	r2, [r4, #4]
 8004c44:	2100      	movs	r1, #0
 8004c46:	4628      	mov	r0, r5
 8004c48:	f7fb fae2 	bl	8000210 <memchr>
 8004c4c:	b108      	cbz	r0, 8004c52 <_printf_i+0x1f2>
 8004c4e:	1b40      	subs	r0, r0, r5
 8004c50:	6060      	str	r0, [r4, #4]
 8004c52:	6863      	ldr	r3, [r4, #4]
 8004c54:	6123      	str	r3, [r4, #16]
 8004c56:	2300      	movs	r3, #0
 8004c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c5c:	e7a8      	b.n	8004bb0 <_printf_i+0x150>
 8004c5e:	6923      	ldr	r3, [r4, #16]
 8004c60:	462a      	mov	r2, r5
 8004c62:	4649      	mov	r1, r9
 8004c64:	4640      	mov	r0, r8
 8004c66:	47d0      	blx	sl
 8004c68:	3001      	adds	r0, #1
 8004c6a:	d0ab      	beq.n	8004bc4 <_printf_i+0x164>
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	079b      	lsls	r3, r3, #30
 8004c70:	d413      	bmi.n	8004c9a <_printf_i+0x23a>
 8004c72:	68e0      	ldr	r0, [r4, #12]
 8004c74:	9b03      	ldr	r3, [sp, #12]
 8004c76:	4298      	cmp	r0, r3
 8004c78:	bfb8      	it	lt
 8004c7a:	4618      	movlt	r0, r3
 8004c7c:	e7a4      	b.n	8004bc8 <_printf_i+0x168>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	4632      	mov	r2, r6
 8004c82:	4649      	mov	r1, r9
 8004c84:	4640      	mov	r0, r8
 8004c86:	47d0      	blx	sl
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d09b      	beq.n	8004bc4 <_printf_i+0x164>
 8004c8c:	3501      	adds	r5, #1
 8004c8e:	68e3      	ldr	r3, [r4, #12]
 8004c90:	9903      	ldr	r1, [sp, #12]
 8004c92:	1a5b      	subs	r3, r3, r1
 8004c94:	42ab      	cmp	r3, r5
 8004c96:	dcf2      	bgt.n	8004c7e <_printf_i+0x21e>
 8004c98:	e7eb      	b.n	8004c72 <_printf_i+0x212>
 8004c9a:	2500      	movs	r5, #0
 8004c9c:	f104 0619 	add.w	r6, r4, #25
 8004ca0:	e7f5      	b.n	8004c8e <_printf_i+0x22e>
 8004ca2:	bf00      	nop
 8004ca4:	08011139 	.word	0x08011139
 8004ca8:	0801114a 	.word	0x0801114a

08004cac <_sbrk_r>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	4d06      	ldr	r5, [pc, #24]	; (8004cc8 <_sbrk_r+0x1c>)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	4608      	mov	r0, r1
 8004cb6:	602b      	str	r3, [r5, #0]
 8004cb8:	f7fc fde8 	bl	800188c <_sbrk>
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d102      	bne.n	8004cc6 <_sbrk_r+0x1a>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	b103      	cbz	r3, 8004cc6 <_sbrk_r+0x1a>
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
 8004cc8:	200001f4 	.word	0x200001f4

08004ccc <_raise_r>:
 8004ccc:	291f      	cmp	r1, #31
 8004cce:	b538      	push	{r3, r4, r5, lr}
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	460d      	mov	r5, r1
 8004cd4:	d904      	bls.n	8004ce0 <_raise_r+0x14>
 8004cd6:	2316      	movs	r3, #22
 8004cd8:	6003      	str	r3, [r0, #0]
 8004cda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cde:	bd38      	pop	{r3, r4, r5, pc}
 8004ce0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004ce2:	b112      	cbz	r2, 8004cea <_raise_r+0x1e>
 8004ce4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004ce8:	b94b      	cbnz	r3, 8004cfe <_raise_r+0x32>
 8004cea:	4620      	mov	r0, r4
 8004cec:	f000 f830 	bl	8004d50 <_getpid_r>
 8004cf0:	462a      	mov	r2, r5
 8004cf2:	4601      	mov	r1, r0
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cfa:	f000 b817 	b.w	8004d2c <_kill_r>
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d00a      	beq.n	8004d18 <_raise_r+0x4c>
 8004d02:	1c59      	adds	r1, r3, #1
 8004d04:	d103      	bne.n	8004d0e <_raise_r+0x42>
 8004d06:	2316      	movs	r3, #22
 8004d08:	6003      	str	r3, [r0, #0]
 8004d0a:	2001      	movs	r0, #1
 8004d0c:	e7e7      	b.n	8004cde <_raise_r+0x12>
 8004d0e:	2400      	movs	r4, #0
 8004d10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004d14:	4628      	mov	r0, r5
 8004d16:	4798      	blx	r3
 8004d18:	2000      	movs	r0, #0
 8004d1a:	e7e0      	b.n	8004cde <_raise_r+0x12>

08004d1c <raise>:
 8004d1c:	4b02      	ldr	r3, [pc, #8]	; (8004d28 <raise+0xc>)
 8004d1e:	4601      	mov	r1, r0
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	f7ff bfd3 	b.w	8004ccc <_raise_r>
 8004d26:	bf00      	nop
 8004d28:	20000014 	.word	0x20000014

08004d2c <_kill_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	4d07      	ldr	r5, [pc, #28]	; (8004d4c <_kill_r+0x20>)
 8004d30:	2300      	movs	r3, #0
 8004d32:	4604      	mov	r4, r0
 8004d34:	4608      	mov	r0, r1
 8004d36:	4611      	mov	r1, r2
 8004d38:	602b      	str	r3, [r5, #0]
 8004d3a:	f7fc fd1f 	bl	800177c <_kill>
 8004d3e:	1c43      	adds	r3, r0, #1
 8004d40:	d102      	bne.n	8004d48 <_kill_r+0x1c>
 8004d42:	682b      	ldr	r3, [r5, #0]
 8004d44:	b103      	cbz	r3, 8004d48 <_kill_r+0x1c>
 8004d46:	6023      	str	r3, [r4, #0]
 8004d48:	bd38      	pop	{r3, r4, r5, pc}
 8004d4a:	bf00      	nop
 8004d4c:	200001f4 	.word	0x200001f4

08004d50 <_getpid_r>:
 8004d50:	f7fc bd0c 	b.w	800176c <_getpid>

08004d54 <__swbuf_r>:
 8004d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d56:	460e      	mov	r6, r1
 8004d58:	4614      	mov	r4, r2
 8004d5a:	4605      	mov	r5, r0
 8004d5c:	b118      	cbz	r0, 8004d66 <__swbuf_r+0x12>
 8004d5e:	6983      	ldr	r3, [r0, #24]
 8004d60:	b90b      	cbnz	r3, 8004d66 <__swbuf_r+0x12>
 8004d62:	f000 fa33 	bl	80051cc <__sinit>
 8004d66:	4b21      	ldr	r3, [pc, #132]	; (8004dec <__swbuf_r+0x98>)
 8004d68:	429c      	cmp	r4, r3
 8004d6a:	d12b      	bne.n	8004dc4 <__swbuf_r+0x70>
 8004d6c:	686c      	ldr	r4, [r5, #4]
 8004d6e:	69a3      	ldr	r3, [r4, #24]
 8004d70:	60a3      	str	r3, [r4, #8]
 8004d72:	89a3      	ldrh	r3, [r4, #12]
 8004d74:	071a      	lsls	r2, r3, #28
 8004d76:	d52f      	bpl.n	8004dd8 <__swbuf_r+0x84>
 8004d78:	6923      	ldr	r3, [r4, #16]
 8004d7a:	b36b      	cbz	r3, 8004dd8 <__swbuf_r+0x84>
 8004d7c:	6923      	ldr	r3, [r4, #16]
 8004d7e:	6820      	ldr	r0, [r4, #0]
 8004d80:	1ac0      	subs	r0, r0, r3
 8004d82:	6963      	ldr	r3, [r4, #20]
 8004d84:	b2f6      	uxtb	r6, r6
 8004d86:	4283      	cmp	r3, r0
 8004d88:	4637      	mov	r7, r6
 8004d8a:	dc04      	bgt.n	8004d96 <__swbuf_r+0x42>
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	4628      	mov	r0, r5
 8004d90:	f000 f988 	bl	80050a4 <_fflush_r>
 8004d94:	bb30      	cbnz	r0, 8004de4 <__swbuf_r+0x90>
 8004d96:	68a3      	ldr	r3, [r4, #8]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	60a3      	str	r3, [r4, #8]
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	6022      	str	r2, [r4, #0]
 8004da2:	701e      	strb	r6, [r3, #0]
 8004da4:	6963      	ldr	r3, [r4, #20]
 8004da6:	3001      	adds	r0, #1
 8004da8:	4283      	cmp	r3, r0
 8004daa:	d004      	beq.n	8004db6 <__swbuf_r+0x62>
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	07db      	lsls	r3, r3, #31
 8004db0:	d506      	bpl.n	8004dc0 <__swbuf_r+0x6c>
 8004db2:	2e0a      	cmp	r6, #10
 8004db4:	d104      	bne.n	8004dc0 <__swbuf_r+0x6c>
 8004db6:	4621      	mov	r1, r4
 8004db8:	4628      	mov	r0, r5
 8004dba:	f000 f973 	bl	80050a4 <_fflush_r>
 8004dbe:	b988      	cbnz	r0, 8004de4 <__swbuf_r+0x90>
 8004dc0:	4638      	mov	r0, r7
 8004dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dc4:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <__swbuf_r+0x9c>)
 8004dc6:	429c      	cmp	r4, r3
 8004dc8:	d101      	bne.n	8004dce <__swbuf_r+0x7a>
 8004dca:	68ac      	ldr	r4, [r5, #8]
 8004dcc:	e7cf      	b.n	8004d6e <__swbuf_r+0x1a>
 8004dce:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <__swbuf_r+0xa0>)
 8004dd0:	429c      	cmp	r4, r3
 8004dd2:	bf08      	it	eq
 8004dd4:	68ec      	ldreq	r4, [r5, #12]
 8004dd6:	e7ca      	b.n	8004d6e <__swbuf_r+0x1a>
 8004dd8:	4621      	mov	r1, r4
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f000 f80c 	bl	8004df8 <__swsetup_r>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	d0cb      	beq.n	8004d7c <__swbuf_r+0x28>
 8004de4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004de8:	e7ea      	b.n	8004dc0 <__swbuf_r+0x6c>
 8004dea:	bf00      	nop
 8004dec:	0801117c 	.word	0x0801117c
 8004df0:	0801119c 	.word	0x0801119c
 8004df4:	0801115c 	.word	0x0801115c

08004df8 <__swsetup_r>:
 8004df8:	4b32      	ldr	r3, [pc, #200]	; (8004ec4 <__swsetup_r+0xcc>)
 8004dfa:	b570      	push	{r4, r5, r6, lr}
 8004dfc:	681d      	ldr	r5, [r3, #0]
 8004dfe:	4606      	mov	r6, r0
 8004e00:	460c      	mov	r4, r1
 8004e02:	b125      	cbz	r5, 8004e0e <__swsetup_r+0x16>
 8004e04:	69ab      	ldr	r3, [r5, #24]
 8004e06:	b913      	cbnz	r3, 8004e0e <__swsetup_r+0x16>
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f000 f9df 	bl	80051cc <__sinit>
 8004e0e:	4b2e      	ldr	r3, [pc, #184]	; (8004ec8 <__swsetup_r+0xd0>)
 8004e10:	429c      	cmp	r4, r3
 8004e12:	d10f      	bne.n	8004e34 <__swsetup_r+0x3c>
 8004e14:	686c      	ldr	r4, [r5, #4]
 8004e16:	89a3      	ldrh	r3, [r4, #12]
 8004e18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e1c:	0719      	lsls	r1, r3, #28
 8004e1e:	d42c      	bmi.n	8004e7a <__swsetup_r+0x82>
 8004e20:	06dd      	lsls	r5, r3, #27
 8004e22:	d411      	bmi.n	8004e48 <__swsetup_r+0x50>
 8004e24:	2309      	movs	r3, #9
 8004e26:	6033      	str	r3, [r6, #0]
 8004e28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e2c:	81a3      	strh	r3, [r4, #12]
 8004e2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e32:	e03e      	b.n	8004eb2 <__swsetup_r+0xba>
 8004e34:	4b25      	ldr	r3, [pc, #148]	; (8004ecc <__swsetup_r+0xd4>)
 8004e36:	429c      	cmp	r4, r3
 8004e38:	d101      	bne.n	8004e3e <__swsetup_r+0x46>
 8004e3a:	68ac      	ldr	r4, [r5, #8]
 8004e3c:	e7eb      	b.n	8004e16 <__swsetup_r+0x1e>
 8004e3e:	4b24      	ldr	r3, [pc, #144]	; (8004ed0 <__swsetup_r+0xd8>)
 8004e40:	429c      	cmp	r4, r3
 8004e42:	bf08      	it	eq
 8004e44:	68ec      	ldreq	r4, [r5, #12]
 8004e46:	e7e6      	b.n	8004e16 <__swsetup_r+0x1e>
 8004e48:	0758      	lsls	r0, r3, #29
 8004e4a:	d512      	bpl.n	8004e72 <__swsetup_r+0x7a>
 8004e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e4e:	b141      	cbz	r1, 8004e62 <__swsetup_r+0x6a>
 8004e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e54:	4299      	cmp	r1, r3
 8004e56:	d002      	beq.n	8004e5e <__swsetup_r+0x66>
 8004e58:	4630      	mov	r0, r6
 8004e5a:	f7ff fb59 	bl	8004510 <_free_r>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	6363      	str	r3, [r4, #52]	; 0x34
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e68:	81a3      	strh	r3, [r4, #12]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	6063      	str	r3, [r4, #4]
 8004e6e:	6923      	ldr	r3, [r4, #16]
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	f043 0308 	orr.w	r3, r3, #8
 8004e78:	81a3      	strh	r3, [r4, #12]
 8004e7a:	6923      	ldr	r3, [r4, #16]
 8004e7c:	b94b      	cbnz	r3, 8004e92 <__swsetup_r+0x9a>
 8004e7e:	89a3      	ldrh	r3, [r4, #12]
 8004e80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e88:	d003      	beq.n	8004e92 <__swsetup_r+0x9a>
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	4630      	mov	r0, r6
 8004e8e:	f000 fa5f 	bl	8005350 <__smakebuf_r>
 8004e92:	89a0      	ldrh	r0, [r4, #12]
 8004e94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e98:	f010 0301 	ands.w	r3, r0, #1
 8004e9c:	d00a      	beq.n	8004eb4 <__swsetup_r+0xbc>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60a3      	str	r3, [r4, #8]
 8004ea2:	6963      	ldr	r3, [r4, #20]
 8004ea4:	425b      	negs	r3, r3
 8004ea6:	61a3      	str	r3, [r4, #24]
 8004ea8:	6923      	ldr	r3, [r4, #16]
 8004eaa:	b943      	cbnz	r3, 8004ebe <__swsetup_r+0xc6>
 8004eac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004eb0:	d1ba      	bne.n	8004e28 <__swsetup_r+0x30>
 8004eb2:	bd70      	pop	{r4, r5, r6, pc}
 8004eb4:	0781      	lsls	r1, r0, #30
 8004eb6:	bf58      	it	pl
 8004eb8:	6963      	ldrpl	r3, [r4, #20]
 8004eba:	60a3      	str	r3, [r4, #8]
 8004ebc:	e7f4      	b.n	8004ea8 <__swsetup_r+0xb0>
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	e7f7      	b.n	8004eb2 <__swsetup_r+0xba>
 8004ec2:	bf00      	nop
 8004ec4:	20000014 	.word	0x20000014
 8004ec8:	0801117c 	.word	0x0801117c
 8004ecc:	0801119c 	.word	0x0801119c
 8004ed0:	0801115c 	.word	0x0801115c

08004ed4 <__register_exitproc>:
 8004ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ed8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8004f94 <__register_exitproc+0xc0>
 8004edc:	4606      	mov	r6, r0
 8004ede:	f8d8 0000 	ldr.w	r0, [r8]
 8004ee2:	461f      	mov	r7, r3
 8004ee4:	460d      	mov	r5, r1
 8004ee6:	4691      	mov	r9, r2
 8004ee8:	f7ff faf7 	bl	80044da <__retarget_lock_acquire_recursive>
 8004eec:	4b25      	ldr	r3, [pc, #148]	; (8004f84 <__register_exitproc+0xb0>)
 8004eee:	681c      	ldr	r4, [r3, #0]
 8004ef0:	b934      	cbnz	r4, 8004f00 <__register_exitproc+0x2c>
 8004ef2:	4c25      	ldr	r4, [pc, #148]	; (8004f88 <__register_exitproc+0xb4>)
 8004ef4:	601c      	str	r4, [r3, #0]
 8004ef6:	4b25      	ldr	r3, [pc, #148]	; (8004f8c <__register_exitproc+0xb8>)
 8004ef8:	b113      	cbz	r3, 8004f00 <__register_exitproc+0x2c>
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004f00:	6863      	ldr	r3, [r4, #4]
 8004f02:	2b1f      	cmp	r3, #31
 8004f04:	dd07      	ble.n	8004f16 <__register_exitproc+0x42>
 8004f06:	f8d8 0000 	ldr.w	r0, [r8]
 8004f0a:	f7ff fae8 	bl	80044de <__retarget_lock_release_recursive>
 8004f0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f16:	b34e      	cbz	r6, 8004f6c <__register_exitproc+0x98>
 8004f18:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004f1c:	b988      	cbnz	r0, 8004f42 <__register_exitproc+0x6e>
 8004f1e:	4b1c      	ldr	r3, [pc, #112]	; (8004f90 <__register_exitproc+0xbc>)
 8004f20:	b923      	cbnz	r3, 8004f2c <__register_exitproc+0x58>
 8004f22:	f8d8 0000 	ldr.w	r0, [r8]
 8004f26:	f7ff fad9 	bl	80044dc <__retarget_lock_release>
 8004f2a:	e7f0      	b.n	8004f0e <__register_exitproc+0x3a>
 8004f2c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8004f30:	f7ff fad6 	bl	80044e0 <malloc>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d0f4      	beq.n	8004f22 <__register_exitproc+0x4e>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8004f3e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8004f42:	6863      	ldr	r3, [r4, #4]
 8004f44:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	409a      	lsls	r2, r3
 8004f4c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8004f50:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8004f5a:	2e02      	cmp	r6, #2
 8004f5c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8004f60:	bf02      	ittt	eq
 8004f62:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8004f66:	4313      	orreq	r3, r2
 8004f68:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8004f6c:	6863      	ldr	r3, [r4, #4]
 8004f6e:	f8d8 0000 	ldr.w	r0, [r8]
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	3302      	adds	r3, #2
 8004f76:	6062      	str	r2, [r4, #4]
 8004f78:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8004f7c:	f7ff faaf 	bl	80044de <__retarget_lock_release_recursive>
 8004f80:	2000      	movs	r0, #0
 8004f82:	e7c6      	b.n	8004f12 <__register_exitproc+0x3e>
 8004f84:	200001f0 	.word	0x200001f0
 8004f88:	20000164 	.word	0x20000164
 8004f8c:	00000000 	.word	0x00000000
 8004f90:	080044e1 	.word	0x080044e1
 8004f94:	20000078 	.word	0x20000078

08004f98 <__sflush_r>:
 8004f98:	898a      	ldrh	r2, [r1, #12]
 8004f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	0710      	lsls	r0, r2, #28
 8004fa2:	460c      	mov	r4, r1
 8004fa4:	d458      	bmi.n	8005058 <__sflush_r+0xc0>
 8004fa6:	684b      	ldr	r3, [r1, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	dc05      	bgt.n	8004fb8 <__sflush_r+0x20>
 8004fac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	dc02      	bgt.n	8004fb8 <__sflush_r+0x20>
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fba:	2e00      	cmp	r6, #0
 8004fbc:	d0f9      	beq.n	8004fb2 <__sflush_r+0x1a>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fc4:	682f      	ldr	r7, [r5, #0]
 8004fc6:	602b      	str	r3, [r5, #0]
 8004fc8:	d032      	beq.n	8005030 <__sflush_r+0x98>
 8004fca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fcc:	89a3      	ldrh	r3, [r4, #12]
 8004fce:	075a      	lsls	r2, r3, #29
 8004fd0:	d505      	bpl.n	8004fde <__sflush_r+0x46>
 8004fd2:	6863      	ldr	r3, [r4, #4]
 8004fd4:	1ac0      	subs	r0, r0, r3
 8004fd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fd8:	b10b      	cbz	r3, 8004fde <__sflush_r+0x46>
 8004fda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fdc:	1ac0      	subs	r0, r0, r3
 8004fde:	2300      	movs	r3, #0
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fe4:	6a21      	ldr	r1, [r4, #32]
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	47b0      	blx	r6
 8004fea:	1c43      	adds	r3, r0, #1
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	d106      	bne.n	8004ffe <__sflush_r+0x66>
 8004ff0:	6829      	ldr	r1, [r5, #0]
 8004ff2:	291d      	cmp	r1, #29
 8004ff4:	d82c      	bhi.n	8005050 <__sflush_r+0xb8>
 8004ff6:	4a2a      	ldr	r2, [pc, #168]	; (80050a0 <__sflush_r+0x108>)
 8004ff8:	40ca      	lsrs	r2, r1
 8004ffa:	07d6      	lsls	r6, r2, #31
 8004ffc:	d528      	bpl.n	8005050 <__sflush_r+0xb8>
 8004ffe:	2200      	movs	r2, #0
 8005000:	6062      	str	r2, [r4, #4]
 8005002:	04d9      	lsls	r1, r3, #19
 8005004:	6922      	ldr	r2, [r4, #16]
 8005006:	6022      	str	r2, [r4, #0]
 8005008:	d504      	bpl.n	8005014 <__sflush_r+0x7c>
 800500a:	1c42      	adds	r2, r0, #1
 800500c:	d101      	bne.n	8005012 <__sflush_r+0x7a>
 800500e:	682b      	ldr	r3, [r5, #0]
 8005010:	b903      	cbnz	r3, 8005014 <__sflush_r+0x7c>
 8005012:	6560      	str	r0, [r4, #84]	; 0x54
 8005014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005016:	602f      	str	r7, [r5, #0]
 8005018:	2900      	cmp	r1, #0
 800501a:	d0ca      	beq.n	8004fb2 <__sflush_r+0x1a>
 800501c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005020:	4299      	cmp	r1, r3
 8005022:	d002      	beq.n	800502a <__sflush_r+0x92>
 8005024:	4628      	mov	r0, r5
 8005026:	f7ff fa73 	bl	8004510 <_free_r>
 800502a:	2000      	movs	r0, #0
 800502c:	6360      	str	r0, [r4, #52]	; 0x34
 800502e:	e7c1      	b.n	8004fb4 <__sflush_r+0x1c>
 8005030:	6a21      	ldr	r1, [r4, #32]
 8005032:	2301      	movs	r3, #1
 8005034:	4628      	mov	r0, r5
 8005036:	47b0      	blx	r6
 8005038:	1c41      	adds	r1, r0, #1
 800503a:	d1c7      	bne.n	8004fcc <__sflush_r+0x34>
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0c4      	beq.n	8004fcc <__sflush_r+0x34>
 8005042:	2b1d      	cmp	r3, #29
 8005044:	d001      	beq.n	800504a <__sflush_r+0xb2>
 8005046:	2b16      	cmp	r3, #22
 8005048:	d101      	bne.n	800504e <__sflush_r+0xb6>
 800504a:	602f      	str	r7, [r5, #0]
 800504c:	e7b1      	b.n	8004fb2 <__sflush_r+0x1a>
 800504e:	89a3      	ldrh	r3, [r4, #12]
 8005050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005054:	81a3      	strh	r3, [r4, #12]
 8005056:	e7ad      	b.n	8004fb4 <__sflush_r+0x1c>
 8005058:	690f      	ldr	r7, [r1, #16]
 800505a:	2f00      	cmp	r7, #0
 800505c:	d0a9      	beq.n	8004fb2 <__sflush_r+0x1a>
 800505e:	0793      	lsls	r3, r2, #30
 8005060:	680e      	ldr	r6, [r1, #0]
 8005062:	bf08      	it	eq
 8005064:	694b      	ldreq	r3, [r1, #20]
 8005066:	600f      	str	r7, [r1, #0]
 8005068:	bf18      	it	ne
 800506a:	2300      	movne	r3, #0
 800506c:	eba6 0807 	sub.w	r8, r6, r7
 8005070:	608b      	str	r3, [r1, #8]
 8005072:	f1b8 0f00 	cmp.w	r8, #0
 8005076:	dd9c      	ble.n	8004fb2 <__sflush_r+0x1a>
 8005078:	6a21      	ldr	r1, [r4, #32]
 800507a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800507c:	4643      	mov	r3, r8
 800507e:	463a      	mov	r2, r7
 8005080:	4628      	mov	r0, r5
 8005082:	47b0      	blx	r6
 8005084:	2800      	cmp	r0, #0
 8005086:	dc06      	bgt.n	8005096 <__sflush_r+0xfe>
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800508e:	81a3      	strh	r3, [r4, #12]
 8005090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005094:	e78e      	b.n	8004fb4 <__sflush_r+0x1c>
 8005096:	4407      	add	r7, r0
 8005098:	eba8 0800 	sub.w	r8, r8, r0
 800509c:	e7e9      	b.n	8005072 <__sflush_r+0xda>
 800509e:	bf00      	nop
 80050a0:	20400001 	.word	0x20400001

080050a4 <_fflush_r>:
 80050a4:	b538      	push	{r3, r4, r5, lr}
 80050a6:	690b      	ldr	r3, [r1, #16]
 80050a8:	4605      	mov	r5, r0
 80050aa:	460c      	mov	r4, r1
 80050ac:	b913      	cbnz	r3, 80050b4 <_fflush_r+0x10>
 80050ae:	2500      	movs	r5, #0
 80050b0:	4628      	mov	r0, r5
 80050b2:	bd38      	pop	{r3, r4, r5, pc}
 80050b4:	b118      	cbz	r0, 80050be <_fflush_r+0x1a>
 80050b6:	6983      	ldr	r3, [r0, #24]
 80050b8:	b90b      	cbnz	r3, 80050be <_fflush_r+0x1a>
 80050ba:	f000 f887 	bl	80051cc <__sinit>
 80050be:	4b14      	ldr	r3, [pc, #80]	; (8005110 <_fflush_r+0x6c>)
 80050c0:	429c      	cmp	r4, r3
 80050c2:	d11b      	bne.n	80050fc <_fflush_r+0x58>
 80050c4:	686c      	ldr	r4, [r5, #4]
 80050c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0ef      	beq.n	80050ae <_fflush_r+0xa>
 80050ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050d0:	07d0      	lsls	r0, r2, #31
 80050d2:	d404      	bmi.n	80050de <_fflush_r+0x3a>
 80050d4:	0599      	lsls	r1, r3, #22
 80050d6:	d402      	bmi.n	80050de <_fflush_r+0x3a>
 80050d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050da:	f7ff f9fe 	bl	80044da <__retarget_lock_acquire_recursive>
 80050de:	4628      	mov	r0, r5
 80050e0:	4621      	mov	r1, r4
 80050e2:	f7ff ff59 	bl	8004f98 <__sflush_r>
 80050e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050e8:	07da      	lsls	r2, r3, #31
 80050ea:	4605      	mov	r5, r0
 80050ec:	d4e0      	bmi.n	80050b0 <_fflush_r+0xc>
 80050ee:	89a3      	ldrh	r3, [r4, #12]
 80050f0:	059b      	lsls	r3, r3, #22
 80050f2:	d4dd      	bmi.n	80050b0 <_fflush_r+0xc>
 80050f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050f6:	f7ff f9f2 	bl	80044de <__retarget_lock_release_recursive>
 80050fa:	e7d9      	b.n	80050b0 <_fflush_r+0xc>
 80050fc:	4b05      	ldr	r3, [pc, #20]	; (8005114 <_fflush_r+0x70>)
 80050fe:	429c      	cmp	r4, r3
 8005100:	d101      	bne.n	8005106 <_fflush_r+0x62>
 8005102:	68ac      	ldr	r4, [r5, #8]
 8005104:	e7df      	b.n	80050c6 <_fflush_r+0x22>
 8005106:	4b04      	ldr	r3, [pc, #16]	; (8005118 <_fflush_r+0x74>)
 8005108:	429c      	cmp	r4, r3
 800510a:	bf08      	it	eq
 800510c:	68ec      	ldreq	r4, [r5, #12]
 800510e:	e7da      	b.n	80050c6 <_fflush_r+0x22>
 8005110:	0801117c 	.word	0x0801117c
 8005114:	0801119c 	.word	0x0801119c
 8005118:	0801115c 	.word	0x0801115c

0800511c <std>:
 800511c:	2300      	movs	r3, #0
 800511e:	b510      	push	{r4, lr}
 8005120:	4604      	mov	r4, r0
 8005122:	e9c0 3300 	strd	r3, r3, [r0]
 8005126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800512a:	6083      	str	r3, [r0, #8]
 800512c:	8181      	strh	r1, [r0, #12]
 800512e:	6643      	str	r3, [r0, #100]	; 0x64
 8005130:	81c2      	strh	r2, [r0, #14]
 8005132:	6183      	str	r3, [r0, #24]
 8005134:	4619      	mov	r1, r3
 8005136:	2208      	movs	r2, #8
 8005138:	305c      	adds	r0, #92	; 0x5c
 800513a:	f7ff f9e1 	bl	8004500 <memset>
 800513e:	4b05      	ldr	r3, [pc, #20]	; (8005154 <std+0x38>)
 8005140:	6263      	str	r3, [r4, #36]	; 0x24
 8005142:	4b05      	ldr	r3, [pc, #20]	; (8005158 <std+0x3c>)
 8005144:	62a3      	str	r3, [r4, #40]	; 0x28
 8005146:	4b05      	ldr	r3, [pc, #20]	; (800515c <std+0x40>)
 8005148:	62e3      	str	r3, [r4, #44]	; 0x2c
 800514a:	4b05      	ldr	r3, [pc, #20]	; (8005160 <std+0x44>)
 800514c:	6224      	str	r4, [r4, #32]
 800514e:	6323      	str	r3, [r4, #48]	; 0x30
 8005150:	bd10      	pop	{r4, pc}
 8005152:	bf00      	nop
 8005154:	080053e9 	.word	0x080053e9
 8005158:	0800540b 	.word	0x0800540b
 800515c:	08005443 	.word	0x08005443
 8005160:	08005467 	.word	0x08005467

08005164 <_cleanup_r>:
 8005164:	4901      	ldr	r1, [pc, #4]	; (800516c <_cleanup_r+0x8>)
 8005166:	f000 b8af 	b.w	80052c8 <_fwalk_reent>
 800516a:	bf00      	nop
 800516c:	080050a5 	.word	0x080050a5

08005170 <__sfmoreglue>:
 8005170:	b570      	push	{r4, r5, r6, lr}
 8005172:	2268      	movs	r2, #104	; 0x68
 8005174:	1e4d      	subs	r5, r1, #1
 8005176:	4355      	muls	r5, r2
 8005178:	460e      	mov	r6, r1
 800517a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800517e:	f7ff fa33 	bl	80045e8 <_malloc_r>
 8005182:	4604      	mov	r4, r0
 8005184:	b140      	cbz	r0, 8005198 <__sfmoreglue+0x28>
 8005186:	2100      	movs	r1, #0
 8005188:	e9c0 1600 	strd	r1, r6, [r0]
 800518c:	300c      	adds	r0, #12
 800518e:	60a0      	str	r0, [r4, #8]
 8005190:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005194:	f7ff f9b4 	bl	8004500 <memset>
 8005198:	4620      	mov	r0, r4
 800519a:	bd70      	pop	{r4, r5, r6, pc}

0800519c <__sfp_lock_acquire>:
 800519c:	4801      	ldr	r0, [pc, #4]	; (80051a4 <__sfp_lock_acquire+0x8>)
 800519e:	f7ff b99c 	b.w	80044da <__retarget_lock_acquire_recursive>
 80051a2:	bf00      	nop
 80051a4:	2000015a 	.word	0x2000015a

080051a8 <__sfp_lock_release>:
 80051a8:	4801      	ldr	r0, [pc, #4]	; (80051b0 <__sfp_lock_release+0x8>)
 80051aa:	f7ff b998 	b.w	80044de <__retarget_lock_release_recursive>
 80051ae:	bf00      	nop
 80051b0:	2000015a 	.word	0x2000015a

080051b4 <__sinit_lock_acquire>:
 80051b4:	4801      	ldr	r0, [pc, #4]	; (80051bc <__sinit_lock_acquire+0x8>)
 80051b6:	f7ff b990 	b.w	80044da <__retarget_lock_acquire_recursive>
 80051ba:	bf00      	nop
 80051bc:	2000015b 	.word	0x2000015b

080051c0 <__sinit_lock_release>:
 80051c0:	4801      	ldr	r0, [pc, #4]	; (80051c8 <__sinit_lock_release+0x8>)
 80051c2:	f7ff b98c 	b.w	80044de <__retarget_lock_release_recursive>
 80051c6:	bf00      	nop
 80051c8:	2000015b 	.word	0x2000015b

080051cc <__sinit>:
 80051cc:	b510      	push	{r4, lr}
 80051ce:	4604      	mov	r4, r0
 80051d0:	f7ff fff0 	bl	80051b4 <__sinit_lock_acquire>
 80051d4:	69a3      	ldr	r3, [r4, #24]
 80051d6:	b11b      	cbz	r3, 80051e0 <__sinit+0x14>
 80051d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051dc:	f7ff bff0 	b.w	80051c0 <__sinit_lock_release>
 80051e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051e4:	6523      	str	r3, [r4, #80]	; 0x50
 80051e6:	4b13      	ldr	r3, [pc, #76]	; (8005234 <__sinit+0x68>)
 80051e8:	4a13      	ldr	r2, [pc, #76]	; (8005238 <__sinit+0x6c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80051ee:	42a3      	cmp	r3, r4
 80051f0:	bf04      	itt	eq
 80051f2:	2301      	moveq	r3, #1
 80051f4:	61a3      	streq	r3, [r4, #24]
 80051f6:	4620      	mov	r0, r4
 80051f8:	f000 f820 	bl	800523c <__sfp>
 80051fc:	6060      	str	r0, [r4, #4]
 80051fe:	4620      	mov	r0, r4
 8005200:	f000 f81c 	bl	800523c <__sfp>
 8005204:	60a0      	str	r0, [r4, #8]
 8005206:	4620      	mov	r0, r4
 8005208:	f000 f818 	bl	800523c <__sfp>
 800520c:	2200      	movs	r2, #0
 800520e:	60e0      	str	r0, [r4, #12]
 8005210:	2104      	movs	r1, #4
 8005212:	6860      	ldr	r0, [r4, #4]
 8005214:	f7ff ff82 	bl	800511c <std>
 8005218:	68a0      	ldr	r0, [r4, #8]
 800521a:	2201      	movs	r2, #1
 800521c:	2109      	movs	r1, #9
 800521e:	f7ff ff7d 	bl	800511c <std>
 8005222:	68e0      	ldr	r0, [r4, #12]
 8005224:	2202      	movs	r2, #2
 8005226:	2112      	movs	r1, #18
 8005228:	f7ff ff78 	bl	800511c <std>
 800522c:	2301      	movs	r3, #1
 800522e:	61a3      	str	r3, [r4, #24]
 8005230:	e7d2      	b.n	80051d8 <__sinit+0xc>
 8005232:	bf00      	nop
 8005234:	08011124 	.word	0x08011124
 8005238:	08005165 	.word	0x08005165

0800523c <__sfp>:
 800523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523e:	4607      	mov	r7, r0
 8005240:	f7ff ffac 	bl	800519c <__sfp_lock_acquire>
 8005244:	4b1e      	ldr	r3, [pc, #120]	; (80052c0 <__sfp+0x84>)
 8005246:	681e      	ldr	r6, [r3, #0]
 8005248:	69b3      	ldr	r3, [r6, #24]
 800524a:	b913      	cbnz	r3, 8005252 <__sfp+0x16>
 800524c:	4630      	mov	r0, r6
 800524e:	f7ff ffbd 	bl	80051cc <__sinit>
 8005252:	3648      	adds	r6, #72	; 0x48
 8005254:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005258:	3b01      	subs	r3, #1
 800525a:	d503      	bpl.n	8005264 <__sfp+0x28>
 800525c:	6833      	ldr	r3, [r6, #0]
 800525e:	b30b      	cbz	r3, 80052a4 <__sfp+0x68>
 8005260:	6836      	ldr	r6, [r6, #0]
 8005262:	e7f7      	b.n	8005254 <__sfp+0x18>
 8005264:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005268:	b9d5      	cbnz	r5, 80052a0 <__sfp+0x64>
 800526a:	4b16      	ldr	r3, [pc, #88]	; (80052c4 <__sfp+0x88>)
 800526c:	60e3      	str	r3, [r4, #12]
 800526e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005272:	6665      	str	r5, [r4, #100]	; 0x64
 8005274:	f7ff f930 	bl	80044d8 <__retarget_lock_init_recursive>
 8005278:	f7ff ff96 	bl	80051a8 <__sfp_lock_release>
 800527c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005280:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005284:	6025      	str	r5, [r4, #0]
 8005286:	61a5      	str	r5, [r4, #24]
 8005288:	2208      	movs	r2, #8
 800528a:	4629      	mov	r1, r5
 800528c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005290:	f7ff f936 	bl	8004500 <memset>
 8005294:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005298:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800529c:	4620      	mov	r0, r4
 800529e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052a0:	3468      	adds	r4, #104	; 0x68
 80052a2:	e7d9      	b.n	8005258 <__sfp+0x1c>
 80052a4:	2104      	movs	r1, #4
 80052a6:	4638      	mov	r0, r7
 80052a8:	f7ff ff62 	bl	8005170 <__sfmoreglue>
 80052ac:	4604      	mov	r4, r0
 80052ae:	6030      	str	r0, [r6, #0]
 80052b0:	2800      	cmp	r0, #0
 80052b2:	d1d5      	bne.n	8005260 <__sfp+0x24>
 80052b4:	f7ff ff78 	bl	80051a8 <__sfp_lock_release>
 80052b8:	230c      	movs	r3, #12
 80052ba:	603b      	str	r3, [r7, #0]
 80052bc:	e7ee      	b.n	800529c <__sfp+0x60>
 80052be:	bf00      	nop
 80052c0:	08011124 	.word	0x08011124
 80052c4:	ffff0001 	.word	0xffff0001

080052c8 <_fwalk_reent>:
 80052c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052cc:	4606      	mov	r6, r0
 80052ce:	4688      	mov	r8, r1
 80052d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052d4:	2700      	movs	r7, #0
 80052d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052da:	f1b9 0901 	subs.w	r9, r9, #1
 80052de:	d505      	bpl.n	80052ec <_fwalk_reent+0x24>
 80052e0:	6824      	ldr	r4, [r4, #0]
 80052e2:	2c00      	cmp	r4, #0
 80052e4:	d1f7      	bne.n	80052d6 <_fwalk_reent+0xe>
 80052e6:	4638      	mov	r0, r7
 80052e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052ec:	89ab      	ldrh	r3, [r5, #12]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d907      	bls.n	8005302 <_fwalk_reent+0x3a>
 80052f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052f6:	3301      	adds	r3, #1
 80052f8:	d003      	beq.n	8005302 <_fwalk_reent+0x3a>
 80052fa:	4629      	mov	r1, r5
 80052fc:	4630      	mov	r0, r6
 80052fe:	47c0      	blx	r8
 8005300:	4307      	orrs	r7, r0
 8005302:	3568      	adds	r5, #104	; 0x68
 8005304:	e7e9      	b.n	80052da <_fwalk_reent+0x12>

08005306 <__swhatbuf_r>:
 8005306:	b570      	push	{r4, r5, r6, lr}
 8005308:	460e      	mov	r6, r1
 800530a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800530e:	2900      	cmp	r1, #0
 8005310:	b096      	sub	sp, #88	; 0x58
 8005312:	4614      	mov	r4, r2
 8005314:	461d      	mov	r5, r3
 8005316:	da08      	bge.n	800532a <__swhatbuf_r+0x24>
 8005318:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	602a      	str	r2, [r5, #0]
 8005320:	061a      	lsls	r2, r3, #24
 8005322:	d410      	bmi.n	8005346 <__swhatbuf_r+0x40>
 8005324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005328:	e00e      	b.n	8005348 <__swhatbuf_r+0x42>
 800532a:	466a      	mov	r2, sp
 800532c:	f000 f8c2 	bl	80054b4 <_fstat_r>
 8005330:	2800      	cmp	r0, #0
 8005332:	dbf1      	blt.n	8005318 <__swhatbuf_r+0x12>
 8005334:	9a01      	ldr	r2, [sp, #4]
 8005336:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800533a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800533e:	425a      	negs	r2, r3
 8005340:	415a      	adcs	r2, r3
 8005342:	602a      	str	r2, [r5, #0]
 8005344:	e7ee      	b.n	8005324 <__swhatbuf_r+0x1e>
 8005346:	2340      	movs	r3, #64	; 0x40
 8005348:	2000      	movs	r0, #0
 800534a:	6023      	str	r3, [r4, #0]
 800534c:	b016      	add	sp, #88	; 0x58
 800534e:	bd70      	pop	{r4, r5, r6, pc}

08005350 <__smakebuf_r>:
 8005350:	898b      	ldrh	r3, [r1, #12]
 8005352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005354:	079d      	lsls	r5, r3, #30
 8005356:	4606      	mov	r6, r0
 8005358:	460c      	mov	r4, r1
 800535a:	d507      	bpl.n	800536c <__smakebuf_r+0x1c>
 800535c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	6123      	str	r3, [r4, #16]
 8005364:	2301      	movs	r3, #1
 8005366:	6163      	str	r3, [r4, #20]
 8005368:	b002      	add	sp, #8
 800536a:	bd70      	pop	{r4, r5, r6, pc}
 800536c:	ab01      	add	r3, sp, #4
 800536e:	466a      	mov	r2, sp
 8005370:	f7ff ffc9 	bl	8005306 <__swhatbuf_r>
 8005374:	9900      	ldr	r1, [sp, #0]
 8005376:	4605      	mov	r5, r0
 8005378:	4630      	mov	r0, r6
 800537a:	f7ff f935 	bl	80045e8 <_malloc_r>
 800537e:	b948      	cbnz	r0, 8005394 <__smakebuf_r+0x44>
 8005380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005384:	059a      	lsls	r2, r3, #22
 8005386:	d4ef      	bmi.n	8005368 <__smakebuf_r+0x18>
 8005388:	f023 0303 	bic.w	r3, r3, #3
 800538c:	f043 0302 	orr.w	r3, r3, #2
 8005390:	81a3      	strh	r3, [r4, #12]
 8005392:	e7e3      	b.n	800535c <__smakebuf_r+0xc>
 8005394:	4b0d      	ldr	r3, [pc, #52]	; (80053cc <__smakebuf_r+0x7c>)
 8005396:	62b3      	str	r3, [r6, #40]	; 0x28
 8005398:	89a3      	ldrh	r3, [r4, #12]
 800539a:	6020      	str	r0, [r4, #0]
 800539c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a0:	81a3      	strh	r3, [r4, #12]
 80053a2:	9b00      	ldr	r3, [sp, #0]
 80053a4:	6163      	str	r3, [r4, #20]
 80053a6:	9b01      	ldr	r3, [sp, #4]
 80053a8:	6120      	str	r0, [r4, #16]
 80053aa:	b15b      	cbz	r3, 80053c4 <__smakebuf_r+0x74>
 80053ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053b0:	4630      	mov	r0, r6
 80053b2:	f000 f891 	bl	80054d8 <_isatty_r>
 80053b6:	b128      	cbz	r0, 80053c4 <__smakebuf_r+0x74>
 80053b8:	89a3      	ldrh	r3, [r4, #12]
 80053ba:	f023 0303 	bic.w	r3, r3, #3
 80053be:	f043 0301 	orr.w	r3, r3, #1
 80053c2:	81a3      	strh	r3, [r4, #12]
 80053c4:	89a0      	ldrh	r0, [r4, #12]
 80053c6:	4305      	orrs	r5, r0
 80053c8:	81a5      	strh	r5, [r4, #12]
 80053ca:	e7cd      	b.n	8005368 <__smakebuf_r+0x18>
 80053cc:	08005165 	.word	0x08005165

080053d0 <__malloc_lock>:
 80053d0:	4801      	ldr	r0, [pc, #4]	; (80053d8 <__malloc_lock+0x8>)
 80053d2:	f7ff b882 	b.w	80044da <__retarget_lock_acquire_recursive>
 80053d6:	bf00      	nop
 80053d8:	20000159 	.word	0x20000159

080053dc <__malloc_unlock>:
 80053dc:	4801      	ldr	r0, [pc, #4]	; (80053e4 <__malloc_unlock+0x8>)
 80053de:	f7ff b87e 	b.w	80044de <__retarget_lock_release_recursive>
 80053e2:	bf00      	nop
 80053e4:	20000159 	.word	0x20000159

080053e8 <__sread>:
 80053e8:	b510      	push	{r4, lr}
 80053ea:	460c      	mov	r4, r1
 80053ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f0:	f000 f894 	bl	800551c <_read_r>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	bfab      	itete	ge
 80053f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053fa:	89a3      	ldrhlt	r3, [r4, #12]
 80053fc:	181b      	addge	r3, r3, r0
 80053fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005402:	bfac      	ite	ge
 8005404:	6563      	strge	r3, [r4, #84]	; 0x54
 8005406:	81a3      	strhlt	r3, [r4, #12]
 8005408:	bd10      	pop	{r4, pc}

0800540a <__swrite>:
 800540a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800540e:	461f      	mov	r7, r3
 8005410:	898b      	ldrh	r3, [r1, #12]
 8005412:	05db      	lsls	r3, r3, #23
 8005414:	4605      	mov	r5, r0
 8005416:	460c      	mov	r4, r1
 8005418:	4616      	mov	r6, r2
 800541a:	d505      	bpl.n	8005428 <__swrite+0x1e>
 800541c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005420:	2302      	movs	r3, #2
 8005422:	2200      	movs	r2, #0
 8005424:	f000 f868 	bl	80054f8 <_lseek_r>
 8005428:	89a3      	ldrh	r3, [r4, #12]
 800542a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800542e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005432:	81a3      	strh	r3, [r4, #12]
 8005434:	4632      	mov	r2, r6
 8005436:	463b      	mov	r3, r7
 8005438:	4628      	mov	r0, r5
 800543a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800543e:	f000 b817 	b.w	8005470 <_write_r>

08005442 <__sseek>:
 8005442:	b510      	push	{r4, lr}
 8005444:	460c      	mov	r4, r1
 8005446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800544a:	f000 f855 	bl	80054f8 <_lseek_r>
 800544e:	1c43      	adds	r3, r0, #1
 8005450:	89a3      	ldrh	r3, [r4, #12]
 8005452:	bf15      	itete	ne
 8005454:	6560      	strne	r0, [r4, #84]	; 0x54
 8005456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800545a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800545e:	81a3      	strheq	r3, [r4, #12]
 8005460:	bf18      	it	ne
 8005462:	81a3      	strhne	r3, [r4, #12]
 8005464:	bd10      	pop	{r4, pc}

08005466 <__sclose>:
 8005466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800546a:	f000 b813 	b.w	8005494 <_close_r>
	...

08005470 <_write_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4d07      	ldr	r5, [pc, #28]	; (8005490 <_write_r+0x20>)
 8005474:	4604      	mov	r4, r0
 8005476:	4608      	mov	r0, r1
 8005478:	4611      	mov	r1, r2
 800547a:	2200      	movs	r2, #0
 800547c:	602a      	str	r2, [r5, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	f7fc f9b3 	bl	80017ea <_write>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d102      	bne.n	800548e <_write_r+0x1e>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	b103      	cbz	r3, 800548e <_write_r+0x1e>
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	bd38      	pop	{r3, r4, r5, pc}
 8005490:	200001f4 	.word	0x200001f4

08005494 <_close_r>:
 8005494:	b538      	push	{r3, r4, r5, lr}
 8005496:	4d06      	ldr	r5, [pc, #24]	; (80054b0 <_close_r+0x1c>)
 8005498:	2300      	movs	r3, #0
 800549a:	4604      	mov	r4, r0
 800549c:	4608      	mov	r0, r1
 800549e:	602b      	str	r3, [r5, #0]
 80054a0:	f7fc f9bf 	bl	8001822 <_close>
 80054a4:	1c43      	adds	r3, r0, #1
 80054a6:	d102      	bne.n	80054ae <_close_r+0x1a>
 80054a8:	682b      	ldr	r3, [r5, #0]
 80054aa:	b103      	cbz	r3, 80054ae <_close_r+0x1a>
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	bd38      	pop	{r3, r4, r5, pc}
 80054b0:	200001f4 	.word	0x200001f4

080054b4 <_fstat_r>:
 80054b4:	b538      	push	{r3, r4, r5, lr}
 80054b6:	4d07      	ldr	r5, [pc, #28]	; (80054d4 <_fstat_r+0x20>)
 80054b8:	2300      	movs	r3, #0
 80054ba:	4604      	mov	r4, r0
 80054bc:	4608      	mov	r0, r1
 80054be:	4611      	mov	r1, r2
 80054c0:	602b      	str	r3, [r5, #0]
 80054c2:	f7fc f9ba 	bl	800183a <_fstat>
 80054c6:	1c43      	adds	r3, r0, #1
 80054c8:	d102      	bne.n	80054d0 <_fstat_r+0x1c>
 80054ca:	682b      	ldr	r3, [r5, #0]
 80054cc:	b103      	cbz	r3, 80054d0 <_fstat_r+0x1c>
 80054ce:	6023      	str	r3, [r4, #0]
 80054d0:	bd38      	pop	{r3, r4, r5, pc}
 80054d2:	bf00      	nop
 80054d4:	200001f4 	.word	0x200001f4

080054d8 <_isatty_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4d06      	ldr	r5, [pc, #24]	; (80054f4 <_isatty_r+0x1c>)
 80054dc:	2300      	movs	r3, #0
 80054de:	4604      	mov	r4, r0
 80054e0:	4608      	mov	r0, r1
 80054e2:	602b      	str	r3, [r5, #0]
 80054e4:	f7fc f9b9 	bl	800185a <_isatty>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_isatty_r+0x1a>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_isatty_r+0x1a>
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	200001f4 	.word	0x200001f4

080054f8 <_lseek_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4d07      	ldr	r5, [pc, #28]	; (8005518 <_lseek_r+0x20>)
 80054fc:	4604      	mov	r4, r0
 80054fe:	4608      	mov	r0, r1
 8005500:	4611      	mov	r1, r2
 8005502:	2200      	movs	r2, #0
 8005504:	602a      	str	r2, [r5, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	f7fc f9b2 	bl	8001870 <_lseek>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_lseek_r+0x1e>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_lseek_r+0x1e>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	200001f4 	.word	0x200001f4

0800551c <_read_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4d07      	ldr	r5, [pc, #28]	; (800553c <_read_r+0x20>)
 8005520:	4604      	mov	r4, r0
 8005522:	4608      	mov	r0, r1
 8005524:	4611      	mov	r1, r2
 8005526:	2200      	movs	r2, #0
 8005528:	602a      	str	r2, [r5, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	f7fc f940 	bl	80017b0 <_read>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d102      	bne.n	800553a <_read_r+0x1e>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	b103      	cbz	r3, 800553a <_read_r+0x1e>
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	200001f4 	.word	0x200001f4

08005540 <_init>:
 8005540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005542:	bf00      	nop
 8005544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005546:	bc08      	pop	{r3}
 8005548:	469e      	mov	lr, r3
 800554a:	4770      	bx	lr

0800554c <_fini>:
 800554c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554e:	bf00      	nop
 8005550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005552:	bc08      	pop	{r3}
 8005554:	469e      	mov	lr, r3
 8005556:	4770      	bx	lr
